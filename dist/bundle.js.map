{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/app.js","src/bit_stream.js","src/bitmap.js","src/buffer_stream.js","src/resource.js","src/scumm/index.js","src/scumm/object.js","src/scumm/room.js","src/ui/container.js"],"names":[],"mappings":"AAAA;;ACAA,MAAM,WAAW,QAAQ,YAAR,CAAjB;AACA,MAAM,YAAY,QAAQ,gBAAR,CAAlB;;AAEA,MAAM,QAAQ,QAAQ,SAAR,CAAd;AACA,MAAM,SAAS,QAAQ,UAAR,CAAf;;AAEA,MAAM,aAAa,aAAnB;AACA,MAAM,cAAc,aAApB;;AAEA;AACA;;AAEA,MAAM,GAAN,CAAU;AACR,gBAAc;AACZ,YAAQ,GAAR,CAAY,MAAZ;;AAEA,SAAK,KAAL,GAAa,EAAb;;AAEA,SAAK,QAAL,GAAgB,IAAI,QAAJ,EAAhB;;AAEA,SAAK,SAAL,GAAiB,SAAS,aAAT,CAAuB,QAAvB,CAAjB;AACA,SAAK,SAAL,CAAe,KAAf,GAAuB,GAAvB;AACA,SAAK,SAAL,CAAe,MAAf,GAAwB,GAAxB;;AAEA,WAAO,gBAAP,CAAwB,kBAAxB,EAA4C,MAAM;AAChD,WAAK,cAAL;AACA,WAAK,kBAAL;AACD,KAHD;AAID;;AAED,SAAO,MAAP,EAAe,MAAI,CAAnB,EAAsB;AACpB,QAAI,OAAO,IAAI,UAAJ,CAAe,MAAf,CAAX;AACA,SAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,KAAK,MAAzB,EAAiC,GAAjC,EAAsC;AACpC,WAAK,CAAL,IAAU,KAAK,CAAL,IAAU,GAApB;AACD;AACD,WAAO,KAAK,MAAZ;AACD;;AAED,yBAAuB;AACrB,QAAI,UAAU,KAAK,OAAnB;;AAEA,QAAI,YAAY,KAAK,SAArB;AACA,WAAM,UAAU,UAAhB,EAA4B,UAAU,WAAV,CAAsB,UAAU,UAAhC;;AAE5B,QAAI,OAAJ,EAAa;AACX,WAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,GAApB,EAAyB,GAAzB,EAA8B;AAC5B,YAAI,IAAI,QAAQ,IAAE,CAAV,CAAR;AACA,YAAI,IAAI,QAAQ,IAAE,CAAF,GAAM,CAAd,CAAR;AACA,YAAI,IAAI,QAAQ,IAAE,CAAF,GAAM,CAAd,CAAR;AACA,YAAI,SAAS,SAAS,aAAT,CAAuB,KAAvB,CAAb;AACA,eAAO,SAAP,CAAiB,GAAjB,CAAqB,gBAArB;AACA,eAAO,KAAP,CAAa,eAAb,GAA+B,SAAO,CAAP,GAAS,GAAT,GAAa,CAAb,GAAe,GAAf,GAAmB,CAAnB,GAAqB,GAApD;AACA,eAAO,KAAP,GAAe,IAAI,GAAJ,GAAU,MAAV,GAAiB,CAAjB,GAAmB,GAAnB,GAAuB,CAAvB,GAAyB,GAAzB,GAA6B,CAA7B,GAA+B,GAA9C;AACA,kBAAU,WAAV,CAAsB,MAAtB;AACD;AACF;AACF;;AAED,wBAAsB,KAAtB,EAA6B,MAA7B,EAAqC;AACnC,SAAK,SAAL,CAAe,KAAf,GAAuB,KAAvB;AACA,SAAK,SAAL,CAAe,MAAf,GAAwB,MAAxB;AACD;;AAED,2BAAyB;AACvB,QAAI,CAAC,KAAK,IAAV,EAAgB;AAChB,QAAI,OAAO,KAAK,IAAhB;;AAEA,QAAI,QAAQ,KAAK,KAAjB;AACA,QAAI,SAAS,KAAK,MAAlB;;AAEA,SAAK,qBAAL,CAA2B,KAA3B,EAAkC,MAAlC;;AAEA,QAAI,MAAM,KAAK,SAAL,CAAe,UAAf,CAA0B,IAA1B,CAAV;AACA,QAAI,SAAJ,CAAc,CAAd,EAAiB,CAAjB,EAAoB,KAAK,SAAL,CAAe,KAAnC,EAA0C,KAAK,SAAL,CAAe,MAAzD;;AAEA,QAAI,KAAK,MAAT,EAAiB;AACf,UAAI,YAAY,IAAI,YAAJ,CAAiB,CAAjB,EAAoB,CAApB,EAAuB,KAAvB,EAA8B,MAA9B,CAAhB;;AAEA,WAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,KAAK,MAAL,CAAY,MAAhC,EAAwC,GAAxC,EAA6C;AAC3C,YAAI,QAAQ,KAAK,MAAL,CAAY,CAAZ,CAAZ;AACA,kBAAU,IAAV,CAAe,IAAI,CAAJ,GAAQ,CAAvB,IAA4B,KAAK,OAAL,CAAa,QAAQ,CAAR,GAAY,CAAzB,CAA5B;AACA,kBAAU,IAAV,CAAe,IAAI,CAAJ,GAAQ,CAAvB,IAA4B,KAAK,OAAL,CAAa,QAAQ,CAAR,GAAY,CAAzB,CAA5B;AACA,kBAAU,IAAV,CAAe,IAAI,CAAJ,GAAQ,CAAvB,IAA4B,KAAK,OAAL,CAAa,QAAQ,CAAR,GAAY,CAAzB,CAA5B;AACA,kBAAU,IAAV,CAAe,IAAI,CAAJ,GAAQ,CAAvB,IAA4B,GAA5B;AACD;;AAED,UAAI,YAAJ,CAAiB,SAAjB,EAA4B,CAA5B,EAA+B,CAA/B;AACD;;AAED,QAAI,SAAS,KAAK,MAAlB;AACA,WAAO,KAAP,GAAe,KAAf;AACA,WAAO,MAAP,GAAgB,MAAhB;;AAEA,UAAM,OAAO,UAAP,CAAkB,IAAlB,CAAN;AACA,QAAI,SAAJ,CAAc,CAAd,EAAiB,CAAjB,EAAoB,OAAO,KAA3B,EAAkC,OAAO,MAAzC;AACA;AACA,QAAI,SAAJ,CAAc,KAAK,SAAnB,EAA8B,CAA9B,EAAiC,CAAjC,EAAoC,KAAK,SAAL,CAAe,KAAnD,EAA0D,KAAK,SAAL,CAAe,MAAzE;AACA;AACD;;AAED,yBAAuB,MAAvB,EAA+B,KAA/B,EAAsC,MAAtC,EAA8C;AAC5C,QAAI,SAAS,SAAS,aAAT,CAAuB,QAAvB,CAAb;AACA,WAAO,KAAP,GAAe,KAAf;AACA,WAAO,MAAP,GAAgB,MAAhB;AACA,QAAI,MAAJ,EAAY;AACV,UAAI,MAAM,OAAO,UAAP,CAAkB,IAAlB,CAAV;AACA,UAAI,YAAY,IAAI,YAAJ,CAAiB,CAAjB,EAAoB,CAApB,EAAuB,OAAO,KAA9B,EAAqC,OAAO,MAA5C,CAAhB;AACA,WAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,OAAO,MAA3B,EAAmC,GAAnC,EAAwC;AACtC,YAAI,IAAI,IAAI,KAAZ;AACA,YAAI,IAAK,IAAI,KAAL,IAAe,CAAvB;AACA,YAAI,QAAQ,CAAC,IAAI,KAAJ,GAAY,CAAb,IAAkB,CAA9B;AACA,YAAI,QAAQ,OAAO,CAAP,CAAZ;AACA,kBAAU,IAAV,CAAe,QAAQ,CAAvB,IAA4B,KAAK,OAAL,CAAa,QAAQ,CAAR,GAAY,CAAzB,CAA5B;AACA,kBAAU,IAAV,CAAe,QAAQ,CAAvB,IAA4B,KAAK,OAAL,CAAa,QAAQ,CAAR,GAAY,CAAzB,CAA5B;AACA,kBAAU,IAAV,CAAe,QAAQ,CAAvB,IAA4B,KAAK,OAAL,CAAa,QAAQ,CAAR,GAAY,CAAzB,CAA5B;AACA,kBAAU,IAAV,CAAe,QAAQ,CAAvB,IAA4B,GAA5B;AACD;AACD,UAAI,YAAJ,CAAiB,SAAjB,EAA4B,CAA5B,EAA+B,CAA/B;AACD;AACD,WAAO,MAAP;AACD;;AAED,sBAAoB;AAClB,QAAI,UAAU,KAAK,IAAL,CAAU,UAAV,EAAd;AACA,QAAI,YAAY,KAAK,SAArB;AACA,WAAO,UAAU,UAAjB,EAA6B,UAAU,WAAV,CAAsB,UAAU,UAAhC;;AAE7B,SAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,QAAQ,MAA5B,EAAoC,GAApC,EAAyC;AACvC,UAAI,KAAK,QAAQ,CAAR,CAAT;;AAEA,UAAI,GAAG,MAAP,EAAe;AACb,YAAI,KAAK,SAAS,aAAT,CAAuB,KAAvB,CAAT;AACA,WAAG,SAAH,CAAa,GAAb,CAAiB,QAAjB;;AAEA,YAAI,UAAU,SAAS,aAAT,CAAuB,KAAvB,CAAd;AACA,gBAAQ,SAAR,CAAkB,GAAlB,CAAsB,cAAtB;;AAEA,YAAI,SAAS,KAAK,sBAAL,CAA4B,GAAG,MAA/B,EAAuC,GAAG,KAA1C,EAAiD,GAAG,MAApD,CAAb;AACA,gBAAQ,WAAR,CAAoB,MAApB;;AAEA,YAAI,UAAU,SAAS,aAAT,CAAuB,KAAvB,CAAd;AACA,gBAAQ,SAAR,CAAkB,GAAlB,CAAsB,cAAtB;AACA;AACA,gBAAQ,SAAR,GAAoB,GAAG,EAAvB;;AAEA,WAAG,KAAH,GAAW,GAAG,IAAd;;AAEA,WAAG,WAAH,CAAe,OAAf;AACA,WAAG,WAAH,CAAe,OAAf;;AAEA,kBAAU,WAAV,CAAsB,EAAtB;AACD;AACF;AACF;;AAED,UAAQ,GAAR,EAAa;AACX,QAAI,OAAO,KAAK,QAAL,CAAc,OAAd,CAAsB,GAAtB,CAAX;AACA,QAAI,IAAJ,EAAU;AACR,WAAK,IAAL,GAAY,IAAZ;AACA,WAAK,MAAL,GAAc,GAAd;AACA,WAAK,OAAL,GAAe,KAAK,OAApB;;AAEA,WAAK,oBAAL;AACA,WAAK,sBAAL;AACA,WAAK,iBAAL;;AAEA;AACD;AACF;;AAED,eAAa;AACX,QAAI,KAAK,KAAL,CAAW,UAAX,CAAJ,EAA4B;AAC1B;AACA,WAAK,QAAL,CAAc,QAAd,CAAuB,KAAK,KAAL,CAAW,UAAX,CAAvB;AACD;AACD,QAAI,KAAK,KAAL,CAAW,WAAX,CAAJ,EAA6B;AAC3B,WAAK,QAAL,CAAc,SAAd,CAAwB,KAAK,KAAL,CAAW,WAAX,CAAxB;AACA,WAAK,OAAL,CAAa,EAAb;AACA;AACA;AACD;AACF;;AAED,eAAa,QAAb,EAAuB;AACrB,YAAQ,GAAR,CAAY,QAAZ,EAAsB,QAAtB,EAAgC,KAAK,KAAL,CAAW,QAAX,EAAqB,UAArD;;AAEA,QAAI,YAAY,UAAZ,IAA0B,YAAY,WAA1C,EAAuD;AACrD,WAAK,KAAL,CAAW,QAAX,IAAuB,KAAK,MAAL,CAAY,KAAK,KAAL,CAAW,QAAX,CAAZ,EAAkC,IAAlC,CAAvB;AACD;;AAED,SAAK,WAAL;;AAEA,QAAI,KAAK,WAAL,IAAoB,CAAxB,EAA2B;AACzB,cAAQ,GAAR,CAAY,MAAZ;AACA,WAAK,UAAL;AACD;AACF;;AAED,WAAS,IAAT,EAAe;AACb,QAAI,SAAS,IAAI,UAAJ,EAAb;AACA,QAAI,WAAW,KAAK,IAAL,CAAU,WAAV,EAAf;AACF,WAAO,MAAP,GAAiB,KAAD,IAAW;AACvB,WAAK,KAAL,CAAW,QAAX,IAAuB,MAAM,MAAN,CAAa,MAApC;AACA,WAAK,YAAL,CAAkB,QAAlB;AACH,KAHD;AAIC,WAAO,iBAAP,CAAyB,IAAzB;AACA;;AAED,SAAO,KAAP,EAAc;AACZ,UAAM,eAAN;AACA,UAAM,cAAN;;AAEA,QAAI,QAAQ,MAAM,YAAN,CAAmB,KAA/B;AACA,QAAI,MAAM,MAAV,EAAkB;AAChB,WAAK,WAAL,GAAmB,MAAM,MAAzB;AACA,WAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,MAAM,MAA1B,EAAkC,GAAlC,EAAuC;AACrC,aAAK,QAAL,CAAc,MAAM,CAAN,CAAd;AACD;AACF;AACF;;AAED,cAAY,KAAZ,EAAmB;AACjB,UAAM,eAAN;AACA,UAAM,cAAN;AACD;;AAED,aAAW,KAAX,EAAkB;AAChB,UAAM,eAAN;AACA,UAAM,cAAN;AACD;;AAED,YAAU,KAAV,EAAiB;AACf,QAAI,MAAM,GAAN,IAAa,YAAb,IAA6B,CAAC,MAAM,MAAxC,EAAgD;AAC9C,WAAK,OAAL,CAAa,KAAK,MAAL,GAAc,CAA3B;AACD,KAFD,MAGK,IAAI,MAAM,GAAN,IAAa,WAAb,IAA4B,CAAC,MAAM,MAAvC,EAA+C;AAClD,WAAK,OAAL,CAAa,KAAK,MAAL,GAAc,CAA3B;AACD;AACF;;AAED,cAAY,KAAZ,EAAmB;AACjB,QAAI,MAAM,IAAN,IAAc,MAAlB,EAA0B;AACxB,WAAK,MAAL,CAAY,KAAZ;AACD,KAFD,MAGK,IAAI,MAAM,IAAN,IAAc,UAAlB,EAA8B;AACjC,WAAK,UAAL,CAAgB,KAAhB;AACD,KAFI,MAGA,IAAI,MAAM,IAAN,IAAc,WAAlB,EAA+B;AAClC,WAAK,WAAL,CAAiB,KAAjB;AACD,KAFI,MAGA,IAAI,MAAM,IAAN,IAAc,SAAlB,EAA6B;AAChC,WAAK,SAAL,CAAe,KAAf;AACD;AACF;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,mBAAiB;AACf,SAAK,iBAAL,GAAyB,SAAS,aAAT,CAAuB,KAAvB,CAAzB;AACA,SAAK,iBAAL,CAAuB,SAAvB,CAAiC,GAAjC,CAAqC,YAArC;;AAEA,SAAK,MAAL,GAAc,SAAS,aAAT,CAAuB,QAAvB,CAAd;AACA,SAAK,iBAAL,CAAuB,WAAvB,CAAmC,KAAK,MAAxC;;AAEA,SAAK,cAAL,GAAsB,IAAI,SAAJ,CAAc,EAAE,OAAO,YAAT,EAAuB,SAAS,KAAK,iBAArC,EAAwD,GAAG,EAA3D,EAA+D,GAAG,EAAlE,EAAd,CAAtB;AACA,SAAK,cAAL,CAAoB,IAApB;;AAEA,SAAK,SAAL,GAAiB,SAAS,aAAT,CAAuB,KAAvB,CAAjB;AACA,SAAK,SAAL,CAAe,SAAf,CAAyB,GAAzB,CAA6B,kBAA7B;;AAEA,SAAK,gBAAL,GAAwB,IAAI,SAAJ,CAAc,EAAE,OAAO,SAAT,EAAoB,SAAS,KAAK,SAAlC,EAA6C,GAAG,EAAhD,EAAoD,GAAG,GAAvD,EAAd,CAAxB;AACA,SAAK,gBAAL,CAAsB,IAAtB;;AAEA,SAAK,SAAL,GAAiB,SAAS,aAAT,CAAuB,KAAvB,CAAjB;AACA,SAAK,SAAL,CAAe,SAAf,CAAyB,GAAzB,CAA6B,SAA7B;;AAEA,SAAK,gBAAL,GAAwB,IAAI,SAAJ,CAAc,EAAE,OAAO,SAAT,EAAoB,SAAS,KAAK,SAAlC,EAA6C,GAAG,GAAhD,EAAqD,GAAG,EAAxD,EAAd,CAAxB;AACA,SAAK,gBAAL,CAAsB,IAAtB;AAED;;AAED,uBAAqB;AACnB,WAAO,gBAAP,CAAwB,MAAxB,EAAgC,IAAhC,EAAsC,KAAtC;AACA,WAAO,gBAAP,CAAwB,WAAxB,EAAqC,IAArC,EAA2C,KAA3C;AACA,WAAO,gBAAP,CAAwB,UAAxB,EAAoC,IAApC,EAA0C,KAA1C;;AAEA,WAAO,gBAAP,CAAwB,SAAxB,EAAmC,IAAnC,EAAyC,KAAzC;AACA,WAAO,gBAAP,CAAwB,OAAxB,EAAiC,IAAjC,EAAuC,KAAvC;AACD;AAzSO;;AA4SV,OAAO,OAAP,GAAiB,GAAjB;AACA,OAAO,GAAP,GAAa,GAAb;;;;;;ACxTA,MAAM,SAAN,CAAgB;AACd,cAAY,MAAZ,EAAoB;AAClB,SAAK,MAAL,GAAc,MAAd;AACA,SAAK,MAAL,GAAc,CAAd;AACA,SAAK,EAAL,GAAU,CAAV;AACD;;AAED,SAAO;AACL,SAAK,IAAL,GAAY,KAAK,MAAL,CAAY,QAAZ,EAAZ;AACA,SAAK,GAAL,GAAW,KAAK,IAAL,GAAY,CAAvB;AACA,SAAK,EAAL,GAAU,CAAV;AACD;;AAED,UAAQ;AACN,QAAI,KAAK,EAAL,GAAU,CAAd,EAAiB;AACf,WAAK,IAAL,KAAc,CAAd;AACA,WAAK,GAAL,GAAW,KAAK,IAAL,GAAY,CAAvB;AACA,WAAK,EAAL;AACD,KAJD,MAIO;AACL,WAAK,IAAL;AACD;AACF;;AAED,OAAK,MAAL,EAAa;AACX,QAAI,KAAK,EAAL,IAAW,CAAf,EAAkB;AAChB,WAAK,IAAL;AACD;;AAED,QAAI,MAAJ,EAAY;AACV,UAAI,QAAQ,CAAZ;AACA,WAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,MAApB,EAA4B,GAA5B,EAAiC;AAC/B,iBAAU,KAAK,GAAL,IAAY,CAAtB;AACA,aAAK,KAAL;AACD;AACD,aAAO,KAAP;AACD,KAPD,MAOO;AACL,UAAI,QAAQ,KAAK,GAAL,GAAW,CAAX,GAAe,CAA3B;AACA,WAAK,KAAL;AACA,aAAO,KAAP;AACD;AACF;AAxCa;;AA2ChB,OAAO,OAAP,GAAiB,SAAjB;;;;AC3CA,MAAM,MAAN,CAAa;AACX,cAAY,MAAZ,EAAoB;AAClB,SAAK,KAAL,GAAa,OAAO,KAApB;AACA,SAAK,MAAL,GAAc,OAAO,MAArB;AACA,SAAK,MAAL,GAAc,OAAO,MAArB;AACD;AALU;;AAQb,OAAO,OAAP,GAAiB,MAAjB;;;;ACRA,MAAM,YAAN,CAAmB;AACjB,cAAY,MAAZ,EAAoB;AAClB,SAAK,MAAL,GAAc,MAAd;AACA,SAAK,IAAL,GAAY,IAAI,QAAJ,CAAa,KAAK,MAAlB,CAAZ;AACA,SAAK,MAAL,GAAc,CAAd;AACD;;AAED,MAAI,MAAJ,GAAa;AACX,WAAO,KAAK,MAAL,CAAY,UAAnB;AACD;;AAED,OAAK,SAAO,CAAZ,EAAe;AACb,SAAK,MAAL,GAAc,MAAd;AACD;;AAED,UAAQ,QAAM,CAAd,EAAiB;AACf,SAAK,MAAL,IAAe,KAAf;AACA,QAAI,KAAK,MAAL,GAAc,KAAK,MAAL,CAAY,UAAZ,GAAuB,CAAzC,EAA4C,KAAK,MAAL,GAAc,KAAK,MAAL,CAAY,UAAZ,GAAuB,CAArC;AAC7C;;AAED,SAAO,QAAM,CAAb,EAAgB;AACd,SAAK,MAAL,IAAe,KAAf;AACA,QAAI,KAAK,MAAL,GAAc,CAAlB,EAAqB,KAAK,MAAL,GAAc,CAAd;AACtB;;AAED,WAAS,MAAT,EAAiB;AACf,QAAI,UAAU,SAAd,EAAyB;AACvB,eAAS,KAAK,MAAd;AACA,WAAK,MAAL;AACD;AACD,WAAO,KAAK,IAAL,CAAU,QAAV,CAAmB,MAAnB,CAAP;AACD;;AAED,YAAU,MAAV,EAAkB,eAAa,KAA/B,EAAsC;AACpC,QAAI,UAAU,SAAd,EAAyB;AACvB,eAAS,KAAK,MAAd;AACA,WAAK,MAAL,IAAe,CAAf;AACD;AACD,WAAO,KAAK,IAAL,CAAU,SAAV,CAAoB,MAApB,EAA4B,YAA5B,CAAP;AACD;;AAED,YAAU,MAAV,EAAkB,eAAa,KAA/B,EAAsC;AACpC,QAAI,UAAU,SAAd,EAAyB;AACvB,eAAS,KAAK,MAAd;AACA,WAAK,MAAL,IAAe,CAAf;AACD;AACD,WAAO,KAAK,IAAL,CAAU,SAAV,CAAoB,MAApB,EAA4B,YAA5B,CAAP;AACD;;AAED,cAAY,MAAZ,EAAoB;AAClB,WAAO,KAAK,SAAL,CAAe,MAAf,EAAuB,IAAvB,CAAP;AACD;;AAED,cAAY,MAAZ,EAAoB;AAClB,WAAO,KAAK,SAAL,CAAe,MAAf,EAAuB,IAAvB,CAAP;AACD;;AAED,WAAS,SAAO,CAAhB,EAAmB,MAAnB,EAA2B;AACzB,QAAI,UAAU,SAAd,EAAyB;AACvB,eAAS,KAAK,MAAd;AACA,WAAK,MAAL,IAAe,MAAf;AACD;AACD,QAAI,QAAQ,IAAI,UAAJ,CAAe,MAAf,CAAZ;AACA,SAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,MAApB,EAA4B,GAA5B,EAAiC;AAC/B,YAAM,CAAN,IAAW,KAAK,IAAL,CAAU,QAAV,CAAmB,SAAS,CAA5B,CAAX,CAD+B,CACY;AAC5C;AACD,WAAO,KAAP;AACD;AAnEgB;;AAsEnB,OAAO,OAAP,GAAiB,YAAjB;;;ACvEA,MAAM,eAAe,QAAQ,iBAAR,CAArB;AACA,MAAM,YAAY,QAAQ,cAAR,CAAlB;AACA,MAAM,QAAQ,QAAQ,SAAR,CAAd;;AAEA,MAAM,QAAN,CAAe;AACb,gBAAc;AACZ,SAAK,KAAL,GAAa,EAAb;AACA,SAAK,SAAL,GAAiB,EAAjB;AACD;;AAED,WAAS,MAAT,EAAiB;AACf,SAAK,UAAL,CAAgB,MAAhB;AACD;;AAED,YAAU,MAAV,EAAkB;AAChB,SAAK,WAAL,CAAiB,MAAjB;AACD;;AAED,UAAQ,GAAR,EAAa;AACX,WAAO,KAAK,SAAL,CAAe,GAAf,CAAP;AACD;;AAED,mBAAiB,MAAjB,EAAyB;AACvB,WAAO,OAAO,YAAP,CACJ,SAAS,IADL,EAEH,UAAU,CAAX,GAAgB,IAFZ,EAGH,UAAU,EAAX,GAAiB,IAHb,EAIH,UAAU,EAAX,GAAiB,IAJb,CAAP;AAMD;;AAED,iBAAe,MAAf,EAAuB;AACrB,QAAI,OAAO,OAAO,WAAP,EAAX;AACA,WAAO,KAAK,gBAAL,CAAsB,IAAtB,CAAP;AACD;;AAED,mBAAiB,MAAjB,EAAyB;AACvB,QAAI,OAAO,OAAO,WAAP,EAAX;AACA,QAAI,OAAO,OAAO,SAAP,EAAX;AACA,QAAI,OAAO,KAAK,gBAAL,CAAsB,IAAtB,CAAX;AACA,WAAO,EAAE,MAAM,IAAR,EAAc,MAAM,IAApB,EAA0B,MAAM,IAAhC,EAAP;AACD;;AAED,aAAW,MAAX,EAAmB;AACjB;AACA,YAAQ,GAAR,CAAY,YAAZ;AACA,QAAI,SAAS,IAAI,YAAJ,CAAiB,MAAjB,CAAb;;AAEA,WAAO,OAAO,MAAP,GAAgB,OAAO,MAA9B,EAAsC;AACpC,UAAI,OAAO,KAAK,cAAL,CAAoB,MAApB,CAAX;AACA,UAAI,OAAO,OAAO,SAAP,EAAX;;AAEA,UAAI,QAAQ,MAAZ,EAAoB;AAAE;AACpB,eAAO,CAAP,EAAU;AACR,cAAI,SAAS,OAAO,QAAP,EAAb;AACA,cAAI,UAAU,CAAd,EAAiB;AACjB,cAAI,QAAQ,OAAO,QAAP,CAAgB,CAAhB,CAAZ;AACA;AACA,eAAK,SAAL,CAAe,MAAf,IAAyB,MAAM,MAAN,CAAa,CAAC,WAAD,EAAc,YAAd,KAA+B;AACnE,mBAAO,eAAe,gBAAgB,IAAhB,GAAuB,OAAO,YAAP,CAAoB,eAAe,IAAnC,CAAvB,GAAkE,EAAjF,CAAP;AACD,WAFwB,EAEtB,EAFsB,CAAzB;AAGA;AACD;AACD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC,OAtBD,MAsBO;AACL,eAAO,QAAP,CAAgB,OAAO,CAAvB;AACD;AACF;AACF;;AAED;AACA;AACA;AACA;AACA;AACA;;AAEA,cAAY,IAAZ,EAAkB,KAAlB,EAAyB,KAAzB,EAAgC,MAAhC,EAAwC;AACtC,QAAI,SAAS,IAAI,UAAJ,CAAe,QAAQ,MAAvB,CAAb;AACA,QAAI,SAAS,CAAb;;AAEA;AACA,QAAI,QAAQ,KAAK,IAAL,CAAU,CAAV,CAAZ;;AAEA,QAAI,MAAM,CAAC,CAAX;;AAEA,WAAO,SAAS,QAAQ,MAAxB,EAAgC;AAC9B,aAAO,QAAP,IAAmB,KAAnB;AACA,UAAI,KAAK,IAAL,EAAJ,EAAiB;AACf,YAAI,CAAC,KAAK,IAAL,EAAL,EAAkB;AAChB,kBAAQ,KAAK,IAAL,CAAU,KAAV,CAAR;AACA,gBAAM,CAAC,CAAP;AACA;AACA;AACD,SALD,MAKO;AACL,cAAI,CAAC,KAAK,IAAL,EAAL,EAAkB;AAChB,qBAAS,GAAT;AACD,WAFD,MAEO;AACL,kBAAM,CAAC,GAAP;AACA,qBAAS,GAAT;AACD;AACD;AACA;AACD;AACF;AACF;;AAED,WAAO,MAAP;AACD;;AAED,cAAY,IAAZ,EAAkB,KAAlB,EAAyB,KAAzB,EAAgC,MAAhC,EAAwC;AACtC,QAAI,SAAS,IAAI,UAAJ,CAAe,QAAQ,MAAvB,CAAb;AACA,QAAI,SAAS,CAAb;;AAEA;AACA,QAAI,QAAQ,KAAK,IAAL,CAAU,CAAV,CAAZ;AACA,QAAI,OAAO,KAAX;;AAEA,WAAO,SAAS,QAAQ,MAAxB,EAAgC;AAC9B,UAAI,CAAC,IAAL,EAAW;AACT,eAAO,QAAP,IAAmB,KAAnB;AACA,eAAO,KAAP;AACD;;AAED,UAAI,KAAK,IAAL,EAAJ,EAAiB;AACf,YAAI,KAAK,IAAL,EAAJ,EAAiB;AACf;AACA,cAAI,IAAI,KAAK,IAAL,CAAU,CAAV,CAAR;AACA,cAAI,OAAO,IAAI,CAAf;AACA,cAAI,IAAJ,EAAU;AACR,qBAAS,IAAT;AACD,WAFD,MAEO;AACL;AACA,gBAAI,MAAM,KAAK,IAAL,CAAU,CAAV,CAAV;AACA,iBAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,GAApB,EAAyB,GAAzB,EAA8B;AAC5B,qBAAO,QAAP,IAAmB,KAAnB;AACD;AACD,mBAAO,IAAP;AACD;AACF,SAdD,MAcO;AACL;AACA,kBAAQ,KAAK,IAAL,CAAU,KAAV,CAAR;AACD;AACF;AACF;AACD,WAAO,MAAP;AACD;;AAED;;AAEA,kBAAgB,MAAhB,EAAwB,KAAxB,EAA+B,MAA/B,EAAuC;AACrC,QAAI,OAAO,OAAO,QAAP,EAAX;AACA,QAAI,QAAQ,OAAO,EAAnB;;AAEA,QAAI,OAAO,IAAI,SAAJ,CAAc,MAAd,CAAX;AACA,QAAI,MAAJ;AACA,QAAI,cAAc,CAAlB;;AAEA,QAAI,QAAQ,IAAZ,EAAkB;AAAE;AAClB,eAAS,IAAI,UAAJ,CAAe,QAAQ,MAAvB,CAAT;AACA,WAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,OAAO,MAA3B,EAAmC,GAAnC,EAAwC;AACtC,eAAO,CAAP,IAAY,OAAO,QAAP,EAAZ;AACD;AACF,KALD,MAMK,IAAI,QAAQ,IAAR,IAAgB,QAAQ,IAA5B,EAAkC;AAAE;AACvC,oBAAc,CAAd;AACA,eAAS,KAAK,WAAL,CAAiB,IAAjB,EAAuB,KAAvB,EAA8B,KAA9B,EAAqC,MAArC,CAAT;AACD,KAHI,MAIA,IAAI,QAAQ,IAAR,IAAgB,QAAQ,IAA5B,EAAkC;AAAE;AACvC,eAAS,KAAK,WAAL,CAAiB,IAAjB,EAAuB,KAAvB,EAA8B,KAA9B,EAAqC,MAArC,CAAT;AACD,KAFI,MAGA,IAAI,QAAQ,IAAR,IAAgB,QAAQ,IAA5B,EAAkC;AAAE;AACvC,oBAAc,CAAd;AACA,eAAS,KAAK,WAAL,CAAiB,IAAjB,EAAuB,KAAvB,EAA8B,KAA9B,EAAqC,MAArC,CAAT;AACD,KAHI,MAIA,IAAI,QAAQ,IAAR,IAAgB,QAAQ,IAA5B,EAAkC;AAAE;AACvC,eAAS,KAAK,WAAL,CAAiB,IAAjB,EAAuB,KAAvB,EAA8B,KAA9B,EAAqC,MAArC,CAAT;AACD,KAFI,MAGA,IAAI,QAAQ,IAAR,IAAgB,QAAQ,IAA5B,EAAkC;AAAE;AACvC,eAAS,KAAK,WAAL,CAAiB,IAAjB,EAAuB,KAAvB,EAA8B,KAA9B,EAAqC,MAArC,CAAT;AACD,KAFI,MAGA,IAAI,QAAQ,IAAR,IAAgB,QAAQ,IAA5B,EAAkC;AAAE;AACvC,eAAS,KAAK,WAAL,CAAiB,IAAjB,EAAuB,KAAvB,EAA8B,KAA9B,EAAqC,MAArC,CAAT;AACD,KAFI,MAGA,IAAI,QAAQ,IAAR,IAAgB,QAAQ,IAA5B,EAAkC;AAAE;AACvC,eAAS,KAAK,WAAL,CAAiB,IAAjB,EAAuB,KAAvB,EAA8B,KAA9B,EAAqC,MAArC,CAAT;AACD,KAFI,MAGA,IAAI,QAAQ,IAAR,IAAgB,QAAQ,IAA5B,EAAkC;AAAE;AACvC,eAAS,KAAK,WAAL,CAAiB,IAAjB,EAAuB,KAAvB,EAA8B,KAA9B,EAAqC,MAArC,CAAT;AACD,KAFI,MAGA;AACH,cAAQ,GAAR,CAAY,SAAZ,EAAuB,IAAvB;AACD;;AAED,QAAI,WAAJ,EAAiB;AAAE;AACjB,UAAI,OAAO,IAAI,UAAJ,CAAe,OAAO,MAAtB,CAAX;AACA,WAAK,IAAI,IAAI,CAAR,EAAW,QAAQ,CAAxB,EAA2B,IAAI,OAAO,MAAtC,EAA8C,GAA9C,EAAmD;AACjD,aAAK,KAAL,IAAc,OAAO,CAAP,CAAd;AACA,iBAAS,CAAT;AACA,YAAI,SAAS,SAAS,CAAtB,EAAyB,QAAQ,CAAE,IAAI,MAAL,IAAgB,CAAjB,IAAsB,CAA9B;AAC1B;AACD,eAAS,IAAT;AACD;;AAED,WAAO,MAAP;AACD;;AAED,YAAU,MAAV,EAAkB,KAAlB,EAAyB,MAAzB,EAAiC;AAC/B,QAAI,OAAO,OAAO,MAAlB;;AAEA,QAAI,OAAO,KAAK,cAAL,CAAoB,MAApB,CAAX;AACA,QAAI,OAAO,OAAO,SAAP,EAAX;;AAEA,QAAI,SAAS,MAAb,EAAqB;;AAErB;;AAEA,QAAI,UAAU,EAAd;;AAEA,SAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,QAAQ,CAA5B,EAA+B,GAA/B,EACE,QAAQ,IAAR,CAAa,OAAO,WAAP,EAAb;;AAEF,QAAI,SAAS,IAAI,UAAJ,CAAe,QAAQ,MAAvB,CAAb;;AAEA,SAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,QAAQ,MAA5B,EAAoC,GAApC,EAAyC;AACvC,aAAO,IAAP,CAAY,OAAO,QAAQ,CAAR,CAAnB;AACA,UAAI,SAAS,KAAK,eAAL,CAAqB,MAArB,EAA6B,CAA7B,EAAgC,MAAhC,CAAb;AACA,UAAI,MAAJ,EAAY;AACV,aAAK,IAAI,IAAI,CAAR,EAAW,IAAI,CAAf,EAAkB,IAAI,CAA3B,EAA8B,IAAI,OAAO,MAAzC,EAAiD,GAAjD,EAAsD;AACpD,iBAAO,IAAI,IAAI,CAAR,GAAY,IAAI,KAAvB,IAAgC,OAAO,CAAP,CAAhC;AACA,cAAK,KAAK,CAAL,GAAS,IAAI,CAAb,GAAiB,CAAtB;AACA,cAAK,KAAK,CAAL,GAAS,CAAT,GAAa,IAAI,CAAtB;AACD;AACF,OAND,MAMO;AACL,gBAAQ,GAAR,CAAY,CAAZ,EAAe,QAAQ,MAAvB;AACD;AAEF;;AAED,WAAO,MAAP;AACD;;AAED,YAAU,MAAV,EAAkB;AAChB,QAAI,OAAO,KAAK,cAAL,CAAoB,MAApB,CAAX;AACA,QAAI,SAAS,MAAb,EAAqB;AACrB,QAAI,OAAO,OAAO,SAAP,EAAX;;AAEA,QAAI,KAAK,EAAT;;AAEA,OAAG,EAAH,GAAQ,OAAO,WAAP,EAAR;AACA,OAAG,IAAH,GAAU,OAAO,WAAP,EAAV;AACA,OAAG,IAAH,GAAU,OAAO,WAAP,EAAV;AACA,OAAG,KAAH,GAAW,OAAO,QAAP,EAAX;AACA,WAAO,OAAP;AACA,OAAG,CAAH,GAAO,OAAO,WAAP,EAAP;AACA,OAAG,CAAH,GAAO,OAAO,WAAP,EAAP;AACA,OAAG,KAAH,GAAW,OAAO,WAAP,EAAX;AACA,OAAG,MAAH,GAAY,OAAO,WAAP,EAAZ;;AAEA,QAAI,GAAG,IAAP,EAAa;AACX,UAAI,OAAO,KAAK,cAAL,CAAoB,MAApB,CAAX;AACA,UAAI,KAAK,SAAL,CAAe,CAAf,EAAkB,CAAlB,KAAwB,IAA5B,EAAkC;AAChC,eAAO,OAAP,CAAe,CAAf;AACA,WAAG,MAAH,GAAY,KAAK,SAAL,CAAe,MAAf,EAAuB,GAAG,KAA1B,EAAiC,GAAG,MAApC,CAAZ;AACD;AACF;AACD;;AAEA,WAAO,EAAP;AACD;;AAED,YAAU,MAAV,EAAkB;AAChB,QAAI,OAAO,KAAK,cAAL,CAAoB,MAApB,CAAX;AACA,QAAI,OAAO,OAAO,SAAP,EAAX;;AAEA,QAAI,KAAK,EAAT;;AAEA,OAAG,EAAH,GAAQ,OAAO,WAAP,EAAR;AACA,OAAG,CAAH,GAAO,OAAO,QAAP,EAAP;AACA,OAAG,CAAH,GAAO,OAAO,QAAP,EAAP;AACA,OAAG,KAAH,GAAW,OAAO,QAAP,EAAX;AACA,OAAG,MAAH,GAAY,OAAO,QAAP,EAAZ;AACA,OAAG,KAAH,GAAW,OAAO,QAAP,EAAX;AACA,OAAG,MAAH,GAAY,OAAO,QAAP,EAAZ;AACA,OAAG,MAAH,GAAY,OAAO,WAAP,EAAZ;AACA,OAAG,MAAH,GAAY,OAAO,WAAP,EAAZ;AACA,OAAG,SAAH,GAAe,OAAO,QAAP,EAAf;;AAEA,WAAO,KAAK,cAAL,CAAoB,MAApB,CAAP;AACA,WAAO,OAAO,SAAP,EAAP;AACA,WAAO,OAAP,CAAe,OAAO,CAAtB;;AAEA,WAAO,OAAP,CAAe,CAAf;;AAEA;AACA;;AAEA,OAAG,IAAH,GAAU,EAAV;;AAEA,SAAK,IAAI,IAAI,OAAO,QAAP,EAAb,EAAgC,MAAM,CAAtC,EAAyC,IAAI,OAAO,QAAP,EAA7C,EAAgE;AAC9D,SAAG,IAAH,IAAW,OAAO,YAAP,CAAoB,CAApB,CAAX;AACD;;AAED,WAAO,EAAP;AACD;;AAED,YAAU,GAAV,EAAe;AACb,QAAI,QAAQ,KAAK,KAAL,CAAW,GAAX,CAAZ;AACA,QAAI,CAAC,KAAL,EAAY;;AAEZ,QAAI,SAAS,IAAI,YAAJ,CAAiB,MAAM,MAAvB,CAAb;;AAEA,QAAI,MAAM,MAAM,MAAhB;;AAEA,QAAI,KAAJ;AACA,QAAI,MAAJ;AACA,QAAI,UAAJ;AACA,QAAI,OAAJ;AACA,QAAI,MAAJ;AACA,QAAI,QAAQ,EAAZ;AACA,QAAI,QAAQ,EAAZ;;AAEA,WAAO,OAAO,MAAP,GAAgB,GAAvB,EAA4B;AAC1B,UAAI,OAAO,KAAK,cAAL,CAAoB,MAApB,CAAX;AACA,UAAI,OAAO,OAAO,SAAP,EAAX;AACA,UAAI,OAAO,OAAO,MAAP,GAAgB,IAAhB,GAAuB,CAAlC;;AAEA,UAAI,QAAQ,MAAZ,EAAoB;AAClB,gBAAQ,OAAO,WAAP,EAAR;AACA,iBAAS,OAAO,WAAP,EAAT;AACA,qBAAa,OAAO,WAAP,EAAb;AACD,OAJD,MAKK,IAAI,QAAQ,MAAZ,EAAoB;AACvB,eAAO,OAAP,CAAe,EAAf;AACA,iBAAS,KAAK,SAAL,CAAe,MAAf,EAAuB,KAAvB,EAA8B,MAA9B,CAAT;AACD,OAHI,MAIA,IAAI,QAAQ,MAAZ,EAAoB;AACvB,kBAAU,EAAV;AACA,aAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,GAApB,EAAyB,GAAzB,EAA8B;AAC5B,cAAI,IAAI,OAAO,QAAP,EAAR;AACA,cAAI,IAAI,OAAO,QAAP,EAAR;AACA,cAAI,IAAI,OAAO,QAAP,EAAR;AACA,kBAAQ,IAAR,CAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB;AACD;AACF,OARI,MASA,IAAI,QAAQ,MAAZ,EAAoB;AACvB,YAAI,KAAK,KAAK,SAAL,CAAe,MAAf,CAAT;AACA,cAAM,GAAG,EAAT,IAAe,EAAf;AACD,OAHI,MAIA,IAAI,QAAQ,MAAZ,EAAoB;AACvB,YAAI,KAAK,KAAK,SAAL,CAAe,MAAf,CAAT;AACA,cAAM,GAAG,EAAT,IAAe,EAAf;AACD,OAHI,MAIA;AACH;AACD;AACD,aAAO,IAAP,CAAY,IAAZ;AACD;;AAED,QAAI,OAAO,IAAI,MAAM,IAAV,CAAe;AACxB,UAAI,GADoB;AAExB,YAAM,KAAK,SAAL,CAAe,GAAf,CAFkB;AAGxB,aAAO,KAHiB;AAIxB,cAAQ,MAJgB;AAKxB,kBAAY,UALY;AAMxB,aAAO,KANiB;AAOxB,aAAO,KAPiB;AAQxB,cAAQ,MARgB;AASxB,eAAS;AATe,KAAf,CAAX;;AAYA,WAAO,IAAP;AACD;;AAED,cAAY,MAAZ,EAAoB;AAClB,YAAQ,GAAR,CAAY,aAAZ;;AAEA,QAAI,SAAS,IAAI,YAAJ,CAAiB,MAAjB,CAAb;;AAEA,QAAI,OAAO,KAAK,cAAL,CAAoB,MAApB,CAAX;AACA,QAAI,OAAO,OAAO,SAAP,EAAX;;AAEA,QAAI,QAAQ,MAAZ,EAAoB;;AAEpB,WAAO,KAAK,cAAL,CAAoB,MAApB,CAAP;AACA,WAAO,OAAO,SAAP,EAAP;;AAEA,QAAI,QAAQ,MAAZ,EAAoB;AAClB,WAAK,QAAL,GAAgB,OAAO,QAAP,EAAhB;;AAEA,UAAI,UAAU,EAAd;;AAEA,WAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,KAAK,QAAzB,EAAmC,GAAnC,EAAwC;AACtC,YAAI,KAAK,OAAO,QAAP,EAAT;AACA,YAAI,OAAO,OAAO,WAAP,EAAX;AACA,gBAAQ,EAAR,IAAc,IAAd;AACD;;AAED,WAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,QAAQ,MAA5B,EAAoC,GAApC,EAAyC;AACvC,YAAI,OAAO,QAAQ,CAAR,CAAX;AACA,YAAI,QAAQ,SAAZ,EAAuB;AACrB,iBAAO,IAAP,CAAY,IAAZ;AACA,cAAI,OAAO,KAAK,cAAL,CAAoB,MAApB,CAAX;AACA,cAAI,OAAO,OAAO,SAAP,EAAX;AACA,eAAK,KAAL,CAAW,CAAX,IAAgB,OAAO,QAAP,CAAgB,OAAO,CAAvB,CAAhB;AACD;AACF;AACF;AACF;;AA9ZY;;AAkaf,OAAO,OAAP,GAAiB,QAAjB;;;;ACraA,IAAI,QAAQ;AACV,UAAQ,QAAQ,UAAR,CADE;AAEV,QAAM,QAAQ,QAAR;AAFI,CAAZ;;AAKA,OAAO,OAAP,GAAiB,KAAjB;;;;ACLA,MAAM,UAAN,CAAiB;AACf,cAAY,MAAZ,EAAoB;AAClB,SAAK,EAAL,GAAU,OAAO,EAAjB;AACA,SAAK,IAAL,GAAY,OAAO,IAAnB;AACA,SAAK,IAAL,GAAY,OAAO,IAAnB;AACA,SAAK,IAAL,GAAY,OAAO,IAAnB;AACA,SAAK,KAAL,GAAa,OAAO,KAApB;AACA,SAAK,CAAL,GAAS,OAAO,CAAhB;AACA,SAAK,CAAL,GAAS,OAAO,CAAhB;AACA,SAAK,KAAL,GAAa,OAAO,KAApB;AACA,SAAK,MAAL,GAAc,OAAO,MAArB;AACA,SAAK,MAAL,GAAc,OAAO,MAArB;AACD;AAZc;;AAejB,OAAO,OAAP,GAAiB,UAAjB;;;AChBA,MAAM,aAAa,QAAQ,UAAR,CAAnB;;AAEA,MAAM,IAAN,CAAW;AACT,cAAY,MAAZ,EAAoB;AAClB,SAAK,EAAL,GAAU,OAAO,EAAjB;AACA,SAAK,IAAL,GAAY,OAAO,IAAnB;AACA,SAAK,KAAL,GAAa,OAAO,KAApB;AACA,SAAK,MAAL,GAAc,OAAO,MAArB;AACA,SAAK,UAAL,GAAkB,OAAO,UAAzB;AACA;AACA,SAAK,KAAL,GAAa,OAAO,KAApB;AACA,SAAK,KAAL,GAAa,OAAO,KAApB;AACA,SAAK,OAAL,GAAe,OAAO,OAAtB;AACA,SAAK,MAAL,GAAc,OAAO,MAArB;AACD;;AAED,eAAa;AACX,QAAI,UAAU,EAAd;AACA,SAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,KAAK,KAAL,CAAW,MAA/B,EAAuC,GAAvC,EAA4C;AAC1C,UAAI,OAAO,KAAK,KAAL,CAAW,CAAX,CAAX;AACA,UAAI,IAAJ,EAAU;AACR,YAAI,OAAO,KAAK,KAAL,CAAW,KAAK,EAAhB,CAAX;AACA;AACA,YAAI,KAAK,IAAI,UAAJ,CAAe;AACtB,cAAI,KAAK,EADa;AAEtB,gBAAM,KAAK,IAFW;AAGtB,aAAG,KAAK,CAHc;AAItB,aAAG,KAAK,CAJc;AAKtB,iBAAO,KAAK,KALU;AAMtB,kBAAQ,KAAK,MANS;AAOtB,kBAAQ,KAAK,MAAL,IAAe;AAPD,SAAf,CAAT;AASA,gBAAQ,IAAR,CAAa,EAAb;AACD;AACF;AACD,WAAO,OAAP;AACD;AAlCQ;;AAqCX,OAAO,OAAP,GAAiB,IAAjB;;;;ACtCA,MAAM,SAAN,CAAgB;AACd,cAAY,MAAZ,EAAoB;AAClB,QAAI,KAAK,SAAS,aAAT,CAAuB,KAAvB,CAAT;AACA,OAAG,SAAH,CAAa,GAAb,CAAiB,WAAjB;;AAEA,QAAI,UAAU,SAAS,aAAT,CAAuB,KAAvB,CAAd;AACA,YAAQ,EAAR,GAAa,OAAb;AACA,YAAQ,SAAR,CAAkB,GAAlB,CAAsB,OAAtB;AACA,YAAQ,WAAR,CAAoB,SAAS,cAAT,CAAwB,OAAO,KAA/B,CAApB;AACA,OAAG,WAAH,CAAe,OAAf;;AAEA,QAAI,YAAY,SAAS,aAAT,CAAuB,KAAvB,CAAhB;AACA,cAAU,EAAV,GAAe,SAAf;;AAEA,cAAU,WAAV,CAAsB,OAAO,OAA7B;;AAEA,OAAG,WAAH,CAAe,SAAf;;AAEA,OAAG,KAAH,CAAS,IAAT,GAAgB,OAAO,CAAP,GAAW,IAA3B;AACA,OAAG,KAAH,CAAS,GAAT,GAAe,OAAO,CAAP,GAAW,IAA1B;;AAEA,SAAK,EAAL,GAAU,EAAV;;AAEA,SAAK,EAAL,CAAQ,gBAAR,CAAyB,WAAzB,EAAsC,IAAtC;AACD;;AAED,SAAO;AACL,aAAS,IAAT,CAAc,WAAd,CAA0B,KAAK,EAA/B;AACD;;AAED,SAAO;AACL,aAAS,IAAT,CAAc,WAAd,CAA0B,KAAK,EAA/B;AACD;;AAED,eAAa;AACX,WAAO,mBAAP,CAA2B,WAA3B,EAAwC,IAAxC;AACA,WAAO,mBAAP,CAA2B,SAA3B,EAAsC,IAAtC;AACA,WAAO,mBAAP,CAA2B,MAA3B,EAAmC,IAAnC;AACD;;AAED,cAAY,KAAZ,EAAmB;AACjB,QAAI,IAAI,MAAM,SAAd;AACA,QAAI,IAAI,MAAM,SAAd;AACA,SAAK,EAAL,CAAQ,KAAR,CAAc,IAAd,GAAsB,KAAK,EAAL,CAAQ,UAAR,GAAqB,CAAtB,GAA2B,IAAhD;AACA,SAAK,EAAL,CAAQ,KAAR,CAAc,GAAd,GAAqB,KAAK,EAAL,CAAQ,SAAR,GAAoB,CAArB,GAA0B,IAA9C;AACD;;AAED,cAAY,KAAZ,EAAmB;AACjB,WAAO,gBAAP,CAAwB,WAAxB,EAAqC,IAArC;AACA,WAAO,gBAAP,CAAwB,SAAxB,EAAmC,IAAnC;AACA,WAAO,gBAAP,CAAwB,MAAxB,EAAgC,IAAhC;AACD;;AAED,YAAU,KAAV,EAAiB;AACf,SAAK,UAAL;AACD;;AAED,SAAO,KAAP,EAAc;AACZ,SAAK,UAAL;AACD;;AAED,cAAY,KAAZ,EAAmB;AACjB,QAAI,MAAM,IAAN,IAAc,WAAlB,EAA+B;AAC7B,WAAK,WAAL,CAAiB,KAAjB;AACD,KAFD,MAGK,IAAI,MAAM,IAAN,IAAc,SAAlB,EAA6B;AAChC,WAAK,SAAL,CAAe,KAAf;AACD,KAFI,MAGA,IAAI,MAAM,IAAN,IAAc,WAAlB,EAA+B;AAClC,WAAK,WAAL,CAAiB,KAAjB;AACD,KAFI,MAGA,IAAI,MAAM,IAAN,IAAc,MAAlB,EAA0B;AAC7B,WAAK,MAAL,CAAY,KAAZ;AACD;AACF;AA1Ea;;AA6EhB,OAAO,OAAP,GAAiB,SAAjB","file":"bundle.js","sourcesContent":["(function(){function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s}return e})()","const Resource = require('./resource');\nconst Container = require('./ui/container');\n\nconst Scumm = require('./scumm');\nconst Bitmap = require('./bitmap');\n\nconst INDEX_FILE = 'monkey2.000';\nconst BUNDLE_FILE = 'monkey2.001';\n\n// const INDEX_FILE = 'mi2demo.000';\n// const BUNDLE_FILE = 'mi2demo.001';\n\nclass App {\n  constructor() {\n    console.log('init');\n\n    this.files = [];\n\n    this.resource = new Resource();\n\n    this.offscreen = document.createElement('canvas');\n    this.offscreen.width = 320;\n    this.offscreen.height = 200;\n\n    window.addEventListener('DOMContentLoaded', () => {\n      this.createElements();\n      this.initEventListeners();\n    });\n  }\n\n  decode(buffer, enc=0) {\n    let temp = new Uint8Array(buffer);\n    for (var i = 0; i < temp.length; i++) {\n      temp[i] = temp[i] ^ enc;\n    }\n    return temp.buffer;\n  }\n\n  createPaletteElement() {\n    let palette = this.palette;\n\n    let paletteEl = this.paletteEl;\n    while(paletteEl.firstChild) paletteEl.removeChild(paletteEl.firstChild);\n\n    if (palette) {\n      for (var i = 0; i < 256; i++) {\n        let r = palette[i*3];\n        let g = palette[i*3 + 1];\n        let b = palette[i*3 + 2];\n        let swatch = document.createElement('div');\n        swatch.classList.add('palette-swatch');\n        swatch.style.backgroundColor = 'rgb('+r+','+g+','+b+')';\n        swatch.title = i + ':' + 'rgb('+r+','+g+','+b+')';\n        paletteEl.appendChild(swatch);\n      }\n    }\n  }\n\n  resizeOffscreenCanvas(width, height) {\n    this.offscreen.width = width;\n    this.offscreen.height = height;\n  }\n\n  createRoomImageElement() {\n    if (!this.room) return;\n    let room = this.room;\n\n    let width = room.width;\n    let height = room.height;\n\n    this.resizeOffscreenCanvas(width, height);\n\n    let ctx = this.offscreen.getContext('2d');\n    ctx.clearRect(0, 0, this.offscreen.width, this.offscreen.height);\n\n    if (room.bitmap) {\n      let imageData = ctx.getImageData(0, 0, width, height);\n\n      for (var i = 0; i < room.bitmap.length; i++) {\n        let index = room.bitmap[i];\n        imageData.data[i * 4 + 0] = this.palette[index * 3 + 0];\n        imageData.data[i * 4 + 1] = this.palette[index * 3 + 1];\n        imageData.data[i * 4 + 2] = this.palette[index * 3 + 2];\n        imageData.data[i * 4 + 3] = 255;\n      }\n\n      ctx.putImageData(imageData, 0, 0);\n    }\n\n    let canvas = this.canvas;\n    canvas.width = width;\n    canvas.height = height;\n\n    ctx = canvas.getContext('2d');\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    // ctx.imageSmoothingEnabled = false;\n    ctx.drawImage(this.offscreen, 0, 0, this.offscreen.width, this.offscreen.height);\n    // this.canvasContainerEl.appendChild(canvas);\n  }\n\n  createCanvasFromBitmap(bitmap, width, height) {\n    let canvas = document.createElement('canvas');\n    canvas.width = width;\n    canvas.height = height;\n    if (bitmap) {\n      let ctx = canvas.getContext('2d');\n      let imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n      for (var i = 0; i < bitmap.length; i++) {\n        let x = i % width;\n        let y = (i / width) >> 0;\n        let index = (y * width + x) * 4;\n        let color = bitmap[i];\n        imageData.data[index + 0] = this.palette[color * 3 + 0];\n        imageData.data[index + 1] = this.palette[color * 3 + 1];\n        imageData.data[index + 2] = this.palette[color * 3 + 2];\n        imageData.data[index + 3] = 255;\n      }\n      ctx.putImageData(imageData, 0, 0);\n    }\n    return canvas;\n  }\n\n  createRoomObjects() {\n    let objects = this.room.getObjects();\n    let contentEl = this.objectsEl;\n    while (contentEl.firstChild) contentEl.removeChild(contentEl.firstChild);\n\n    for (var i = 0; i < objects.length; i++) {\n      let ob = objects[i];\n\n      if (ob.bitmap) {\n        let el = document.createElement('div');\n        el.classList.add('object');\n\n        let imageEl = document.createElement('div');\n        imageEl.classList.add('object-image');\n\n        let canvas = this.createCanvasFromBitmap(ob.bitmap, ob.width, ob.height);\n        imageEl.appendChild(canvas);\n\n        let titleEl = document.createElement('div');\n        titleEl.classList.add('object-title');\n        // titleEl.appendChild(document.createTextNode(ob.name));\n        titleEl.innerHTML = ob.id;\n\n        el.title = ob.name;\n\n        el.appendChild(imageEl);\n        el.appendChild(titleEl);\n\n        contentEl.appendChild(el);\n      }\n    }\n  }\n\n  setRoom(num) {\n    let room = this.resource.getRoom(num);\n    if (room) {\n      this.room = room;\n      this.roomno = num;\n      this.palette = room.palette;\n\n      this.createPaletteElement();\n      this.createRoomImageElement();\n      this.createRoomObjects();\n\n      // console.log(num);\n    }\n  }\n\n  parseFiles() {\n    if (this.files[INDEX_FILE]) {\n      // this.parseIndex();\n      this.resource.addIndex(this.files[INDEX_FILE]);\n    }\n    if (this.files[BUNDLE_FILE]) {\n      this.resource.addBundle(this.files[BUNDLE_FILE]);\n      this.setRoom(29);\n      // this.parseBundle();\n      // this.setRoom(4);\n    }\n  }\n\n  onFileLoaded(filename) {\n    console.log('Loaded', filename, this.files[filename].byteLength);\n\n    if (filename == INDEX_FILE || filename == BUNDLE_FILE) {\n      this.files[filename] = this.decode(this.files[filename], 0x69);\n    }\n\n    this.filesToLoad--;\n\n    if (this.filesToLoad == 0) {\n      console.log('done');\n      this.parseFiles();\n    }\n  }\n\n  loadFile(file) {\n    var reader = new FileReader();\n    var filename = file.name.toLowerCase();\n\t\treader.onload = (event) => {\n      this.files[filename] = event.target.result;\n      this.onFileLoaded(filename);\n\t\t};\n\t  reader.readAsArrayBuffer(file);\n  }\n\n  onDrop(event) {\n    event.stopPropagation();\n    event.preventDefault();\n\n    var files = event.dataTransfer.files;\n    if (files.length) {\n      this.filesToLoad = files.length;\n      for (var i = 0; i < files.length; i++) {\n        this.loadFile(files[i]);\n      }\n    }\n  }\n\n  onDragEnter(event) {\n    event.stopPropagation();\n    event.preventDefault();\n  }\n\n  onDragOver(event) {\n    event.stopPropagation();\n    event.preventDefault();\n  }\n\n  onKeyDown(event) {\n    if (event.key == 'ArrowRight' && !event.repeat) {\n      this.setRoom(this.roomno + 1);\n    }\n    else if (event.key == 'ArrowLeft' && !event.repeat) {\n      this.setRoom(this.roomno - 1);\n    }\n  }\n\n  handleEvent(event) {\n    if (event.type == 'drop') {\n      this.onDrop(event);\n    }\n    else if (event.type == 'dragover') {\n      this.onDragOver(event);\n    }\n    else if (event.type == 'dragenter') {\n      this.onDragEnter(event);\n    }\n    else if (event.type == 'keydown') {\n      this.onKeyDown(event);\n    }\n  }\n\n  // createWindow(title, content, x, y) {\n  //   let el = document.createElement('div');\n  //   el.classList.add('container');\n  //\n  //   let titleEl = document.createElement('div');\n  //   titleEl.id = 'title';\n  //   titleEl.classList.add('title');\n  //   titleEl.appendChild(document.createTextNode(title));\n  //   el.appendChild(titleEl);\n  //\n  //   let contentEl = document.createElement('div');\n  //   contentEl.id = 'content';\n  //\n  //   contentEl.appendChild(content);\n  //\n  //   el.appendChild(contentEl);\n  //\n  //   el.style.left = x + 'px';\n  //   el.style.top = y + 'px';\n  //\n  //   return el;\n  // }\n\n  createElements() {\n    this.canvasContainerEl = document.createElement('div');\n    this.canvasContainerEl.classList.add('room-image');\n\n    this.canvas = document.createElement('canvas');\n    this.canvasContainerEl.appendChild(this.canvas);\n\n    this.imageContainer = new Container({ title: 'Background', content: this.canvasContainerEl, x: 32, y: 32 });\n    this.imageContainer.show();\n\n    this.paletteEl = document.createElement('div');\n    this.paletteEl.classList.add('palette-swatches');\n\n    this.paletteContainer = new Container({ title: 'Palette', content: this.paletteEl, x: 32, y: 256 });\n    this.paletteContainer.show();\n\n    this.objectsEl = document.createElement('div');\n    this.objectsEl.classList.add('objects');\n\n    this.objectsContainer = new Container({ title: 'Objects', content: this.objectsEl, x: 512, y: 32 });\n    this.objectsContainer.show();\n\n  }\n\n  initEventListeners() {\n    window.addEventListener('drop', this, false);\n    window.addEventListener('dragenter', this, false);\n    window.addEventListener('dragover', this, false);\n\n    window.addEventListener('keydown', this, false);\n    window.addEventListener('keyup', this, false);\n  }\n}\n\nmodule.exports = App;\nglobal.App = App;\n","\nclass BitStream {\n  constructor(stream) {\n    this.stream = stream;\n    this.offset = 0;\n    this.cl = 0;\n  }\n\n  next() {\n    this.byte = this.stream.getUint8();\n    this.bit = this.byte & 1;\n    this.cl = 8;\n  }\n\n  shift() {\n    if (this.cl > 1) {\n      this.byte >>= 1;\n      this.bit = this.byte & 1;\n      this.cl--;\n    } else {\n      this.next();\n    }\n  }\n\n  read(length) {\n    if (this.cl == 0) {\n      this.next();\n    }\n\n    if (length) {\n      let value = 0;\n      for (var i = 0; i < length; i++) {\n        value |= (this.bit << i);\n        this.shift();\n      }\n      return value;\n    } else {\n      let value = this.bit ? 1 : 0;\n      this.shift();\n      return value;\n    }\n  }\n}\n\nmodule.exports = BitStream;\n","\nclass Bitmap {\n  constructor(params) {\n    this.width = params.width;\n    this.height = params.height;\n    this.pixels = params.pixels;\n  }\n}\n\nmodule.exports = Bitmap;\n","\nclass BufferStream {\n  constructor(buffer) {\n    this.buffer = buffer;\n    this.view = new DataView(this.buffer);\n    this.offset = 0;\n  }\n\n  get length() {\n    return this.buffer.byteLength;\n  }\n\n  seek(offset=0) {\n    this.offset = offset;\n  }\n\n  advance(count=1) {\n    this.offset += count;\n    if (this.offset > this.buffer.byteLength-1) this.offset = this.buffer.byteLength-1;\n  }\n\n  backup(count=1) {\n    this.offset -= count;\n    if (this.offset < 0) this.offset = 0;\n  }\n\n  getUint8(offset) {\n    if (offset == undefined) {\n      offset = this.offset;\n      this.offset++;\n    }\n    return this.view.getUint8(offset);\n  }\n\n  getUint16(offset, littleEndian=false) {\n    if (offset == undefined) {\n      offset = this.offset;\n      this.offset += 2;\n    }\n    return this.view.getUint16(offset, littleEndian);\n  }\n\n  getUint32(offset, littleEndian=false) {\n    if (offset == undefined) {\n      offset = this.offset;\n      this.offset += 4;\n    }\n    return this.view.getUint32(offset, littleEndian);\n  }\n\n  getUint16LE(offset) {\n    return this.getUint16(offset, true);\n  }\n\n  getUint32LE(offset) {\n    return this.getUint32(offset, true);\n  }\n\n  getBytes(length=1, offset) {\n    if (offset == undefined) {\n      offset = this.offset;\n      this.offset += length;\n    }\n    let bytes = new Uint8Array(length);\n    for (var i = 0; i < length; i++) {\n      bytes[i] = this.view.getUint8(offset + i); //this.getUint8(offset + i);\n    }\n    return bytes;\n  }\n}\n\nmodule.exports = BufferStream;\n","const BufferStream = require('./buffer_stream');\nconst BitStream = require('./bit_stream');\nconst Scumm = require('./scumm');\n\nclass Resource {\n  constructor() {\n    this.rooms = [];\n    this.roomNames = [];\n  }\n\n  addIndex(buffer) {\n    this.parseIndex(buffer);\n  }\n\n  addBundle(buffer) {\n    this.parseBundle(buffer);\n  }\n\n  getRoom(num) {\n    return this.parseRoom(num);\n  }\n\n  getBlockTypeName(uint32) {\n    return String.fromCharCode(\n      (uint32 & 0xff),\n      ((uint32 >> 8) & 0xff),\n      ((uint32 >> 16) & 0xff),\n      ((uint32 >> 24) & 0xff)\n    );\n  }\n\n  parseBlockName(stream) {\n    let type = stream.getUint32LE();\n    return this.getBlockTypeName(type);\n  }\n\n  parseBlockHeader(stream) {\n    let type = stream.getUint32LE();\n    let size = stream.getUint32();\n    let name = this.getBlockTypeName(type);\n    return { type: type, size: size, name: name };\n  }\n\n  parseIndex(buffer) {\n    // if (!this.index) return;\n    console.log('parseIndex');\n    let stream = new BufferStream(buffer);\n\n    while (stream.offset < stream.length) {\n      let name = this.parseBlockName(stream);\n      let size = stream.getUint32();\n\n      if (name == 'RNAM') { // Room names table\n        while (1) {\n          let roomno = stream.getUint8();\n          if (roomno == 0) break;\n          let bytes = stream.getBytes(9);\n          // console.log(bytes);\n          this.roomNames[roomno] = bytes.reduce((accumulator, currentValue) => {\n            return accumulator + (currentValue != 0xff ? String.fromCharCode(currentValue ^ 0xff) : '');\n          }, '');\n          // console.log(this.roomNames[roomno]);\n        }\n        // console.log(this.roomNames);\n      // }\n      // else if (name == 'DROO') {\n      //   let numitems = stream.getUint16LE();\n      //   let roomNos = stream.getBytes(, numitems);\n      //\n      //   let roomOffsets = [];\n      //   for (var i = 0; i < numitems; i++) {\n      //     let offs = stream.getUint32LE();\n      //     roomOffsets[i] = offs;\n      //   }\n      } else {\n        stream.getBytes(size - 8);\n      }\n    }\n  }\n\n  // getBundleStream() {\n  //   let filename = BUNDLE_FILE;\n  //   if (!this.files[filename]) return;\n  //   let stream = new BufferStream(this.files[filename]);\n  //   return stream;\n  // }\n\n  decompress1(bits, shift, width, height) {\n    let pixels = new Uint8Array(width * height);\n    let offset = 0;\n\n    // let color = bits.read(shift);\n    let color = bits.read(8);\n\n    let inc = -1;\n\n    while (offset < width * height) {\n      pixels[offset++] = color;\n      if (bits.read()) {\n        if (!bits.read()) {\n          color = bits.read(shift);\n          inc = -1;\n          // color = bits.read(shift);\n          // inc = -1;\n        } else {\n          if (!bits.read()) {\n            color += inc;\n          } else {\n            inc = -inc;\n            color += inc;\n          }\n          // if (bits.read()) inc = -inc;\n          // color += inc;\n        }\n      }\n    }\n\n    return pixels;\n  }\n\n  decompress2(bits, shift, width, height) {\n    let pixels = new Uint8Array(width * height);\n    let offset = 0;\n\n    // let color = bits.read(shift);\n    let color = bits.read(8);\n    let skip = false;\n\n    while (offset < width * height) {\n      if (!skip) {\n        pixels[offset++] = color;\n        skip = false;\n      }\n\n      if (bits.read()) {\n        if (bits.read()) {\n          // adjust current palette index\n          let c = bits.read(3);\n          let incm = c - 4;\n          if (incm) {\n            color += incm;\n          } else {\n            // console.log('run');\n            let run = bits.read(8);\n            for (var i = 0; i < run; i++) {\n              pixels[offset++] = color;\n            }\n            skip = true;\n          }\n        } else {\n          // read a new palette index\n          color = bits.read(shift);\n        }\n      }\n    }\n    return pixels;\n  }\n\n  //scab-isl 01010100.01101110.11011010.00110100.01001101\n\n  decompressStrip(stream, width, height) {\n    let code = stream.getUint8();\n    let shift = code % 10;\n\n    let bits = new BitStream(stream);\n    let pixels;\n    let orientation = 0;\n\n    if (code == 0x01) { // raw horizontal\n      pixels = new Uint8Array(width * height);\n      for (var i = 0; i < pixels.length; i++) {\n        pixels[i] = stream.getUint8();\n      }\n    }\n    else if (code >= 0x0e && code <= 0x12) { // method 1 vertical\n      orientation = 1;\n      pixels = this.decompress1(bits, shift, width, height);\n    }\n    else if (code >= 0x18 && code <= 0x1c) { // method 1 horizontal\n      pixels = this.decompress1(bits, shift, width, height);\n    }\n    else if (code >= 0x22 && code <= 0x26) { // method 1 vertical transp\n      orientation = 1;\n      pixels = this.decompress1(bits, shift, width, height);\n    }\n    else if (code >= 0x2c && code <= 0x30) { // method 1 horizontal transp\n      pixels = this.decompress1(bits, shift, width, height);\n    }\n    else if (code >= 0x40 && code <= 0x44) { // method 2 horizontal\n      pixels = this.decompress2(bits, shift, width, height);\n    }\n    else if (code >= 0x54 && code <= 0x58) { // method 2 horizontal transp\n      pixels = this.decompress2(bits, shift, width, height);\n    }\n    else if (code >= 0x68 && code <= 0x6c) { // method 2 horizontal transp\n      pixels = this.decompress2(bits, shift, width, height);\n    }\n    else if (code >= 0x7c && code <= 0x80) { // method 2 horizontal\n      pixels = this.decompress2(bits, shift, width, height);\n    }\n    else {\n      console.log('unknown', code);\n    }\n\n    if (orientation) { // vertical\n      let temp = new Uint8Array(pixels.length);\n      for (var i = 0, index = 0; i < pixels.length; i++) {\n        temp[index] = pixels[i];\n        index += 8;\n        if (index >= height * 8) index = ((i / height) >> 0) + 1;\n      }\n      pixels = temp;\n    }\n\n    return pixels;\n  }\n\n  parseSmap(stream, width, height) {\n    let base = stream.offset;\n\n    let name = this.parseBlockName(stream);\n    let size = stream.getUint32();\n\n    if (name !== 'SMAP') return;\n\n    // console.log('smap', width, height);\n\n    let offsets = [];\n\n    for (var i = 0; i < width / 8; i++)\n      offsets.push(stream.getUint32LE());\n\n    let bitmap = new Uint8Array(width * height);\n\n    for (var i = 0; i < offsets.length; i++) {\n      stream.seek(base + offsets[i]);\n      let pixels = this.decompressStrip(stream, 8, height);\n      if (pixels) {\n        for (var j = 0, x = 0, y = 0; j < pixels.length; j++) {\n          bitmap[x + i * 8 + y * width] = pixels[j];\n          y = (x == 7 ? y + 1 : y);\n          x = (x == 7 ? 0 : x + 1);\n        }\n      } else {\n        console.log(i, offsets.length);\n      }\n\n    }\n\n    return bitmap;\n  }\n\n  parseOBIM(stream) {\n    let name = this.parseBlockName(stream);\n    if (name !== 'IMHD') return;\n    let size = stream.getUint32();\n\n    let ob = {};\n\n    ob.id = stream.getUint16LE();\n    ob.imnn = stream.getUint16LE();\n    ob.zpnn = stream.getUint16LE();\n    ob.flags = stream.getUint8();\n    stream.advance();\n    ob.x = stream.getUint16LE();\n    ob.y = stream.getUint16LE();\n    ob.width = stream.getUint16LE();\n    ob.height = stream.getUint16LE();\n\n    if (ob.imnn) {\n      let name = this.parseBlockName(stream);\n      if (name.substring(0, 2) == 'IM') {\n        stream.advance(4);\n        ob.bitmap = this.parseSmap(stream, ob.width, ob.height);\n      }\n    }\n    // console.log(ob);\n\n    return ob;\n  }\n\n  parseOBCD(stream) {\n    let name = this.parseBlockName(stream);\n    let size = stream.getUint32();\n\n    let ob = {};\n\n    ob.id = stream.getUint16LE();\n    ob.x = stream.getUint8();\n    ob.y = stream.getUint8();\n    ob.width = stream.getUint8();\n    ob.height = stream.getUint8();\n    ob.flags = stream.getUint8();\n    ob.parent = stream.getUint8();\n    ob.walk_x = stream.getUint16LE();\n    ob.walk_y = stream.getUint16LE();\n    ob.actor_dir = stream.getUint8();\n\n    name = this.parseBlockName(stream);\n    size = stream.getUint32();\n    stream.advance(size - 8);\n\n    stream.advance(8);\n\n    // name = this.parseBlockName(stream);\n    // size = stream.getUint32();\n\n    ob.name = '';\n\n    for (let b = stream.getUint8(); b !== 0; b = stream.getUint8()) {\n      ob.name += String.fromCharCode(b);\n    }\n\n    return ob;\n  }\n\n  parseRoom(num) {\n    let block = this.rooms[num];\n    if (!block) return;\n\n    let stream = new BufferStream(block.buffer);\n\n    let end = block.length;\n\n    let width;\n    let height;\n    let numObjects;\n    let palette;\n    let bitmap;\n    let obIMs = [];\n    let obCDs = [];\n\n    while (stream.offset < end) {\n      let name = this.parseBlockName(stream);\n      let size = stream.getUint32();\n      let jump = stream.offset + size - 8;\n\n      if (name == 'RMHD') {\n        width = stream.getUint16LE();\n        height = stream.getUint16LE();\n        numObjects = stream.getUint16LE();\n      }\n      else if (name == 'RMIM') {\n        stream.advance(18);\n        bitmap = this.parseSmap(stream, width, height);\n      }\n      else if (name == 'CLUT') {\n        palette = [];\n        for (var i = 0; i < 256; i++) {\n          let r = stream.getUint8();\n          let g = stream.getUint8();\n          let b = stream.getUint8();\n          palette.push(r, g, b);\n        }\n      }\n      else if (name == 'OBIM') {\n        let ob = this.parseOBIM(stream);\n        obIMs[ob.id] = ob;\n      }\n      else if (name == 'OBCD') {\n        let ob = this.parseOBCD(stream);\n        obCDs[ob.id] = ob;\n      }\n      else {\n        // stream.getBytes(size - 8);\n      }\n      stream.seek(jump);\n    }\n\n    let room = new Scumm.Room({\n      id: num,\n      name: this.roomNames[num],\n      width: width,\n      height: height,\n      numObjects: numObjects,\n      obIMs: obIMs,\n      obCDs: obCDs,\n      bitmap: bitmap,\n      palette: palette\n    });\n\n    return room;\n  }\n\n  parseBundle(buffer) {\n    console.log('parseBundle');\n\n    let stream = new BufferStream(buffer);\n\n    let name = this.parseBlockName(stream);\n    let size = stream.getUint32();\n\n    if (name != 'LECF') return;\n\n    name = this.parseBlockName(stream);\n    size = stream.getUint32();\n\n    if (name == 'LOFF') {\n      this.numrooms = stream.getUint8();\n\n      let offsets = [];\n\n      for (var i = 0; i < this.numrooms; i++) {\n        let id = stream.getUint8();\n        let offs = stream.getUint32LE();\n        offsets[id] = offs;\n      }\n\n      for (var i = 0; i < offsets.length; i++) {\n        let offs = offsets[i];\n        if (offs != undefined) {\n          stream.seek(offs);\n          let name = this.parseBlockName(stream);\n          let size = stream.getUint32();\n          this.rooms[i] = stream.getBytes(size - 8);\n        }\n      }\n    }\n  }\n\n}\n\nmodule.exports = Resource;\n","\nvar Scumm = {\n  Object: require('./object'),\n  Room: require('./room')\n}\n\nmodule.exports = Scumm;\n","\nclass RoomObject {\n  constructor(params) {\n    this.id = params.id;\n    this.name = params.name;\n    this.imnn = params.imnn;\n    this.zpnn = params.zpnn;\n    this.flags = params.flags;\n    this.x = params.x;\n    this.y = params.y;\n    this.width = params.width;\n    this.height = params.height;\n    this.bitmap = params.bitmap;\n  }\n}\n\nmodule.exports = RoomObject;\n","const RoomObject = require('./object');\n\nclass Room {\n  constructor(params) {\n    this.id = params.id;\n    this.name = params.name;\n    this.width = params.width;\n    this.height = params.height;\n    this.numObjects = params.numObjects;\n    // this.objects = params.objects;\n    this.obIMs = params.obIMs;\n    this.obCDs = params.obCDs;\n    this.palette = params.palette;\n    this.bitmap = params.bitmap;\n  }\n\n  getObjects() {\n    let objects = [];\n    for (var i = 0; i < this.obIMs.length; i++) {\n      let obim = this.obIMs[i];\n      if (obim) {\n        let obcd = this.obCDs[obim.id];\n        // console.log(obcd);\n        let ob = new RoomObject({\n          id: obim.id,\n          name: obcd.name,\n          x: obim.x,\n          y: obim.y,\n          width: obim.width,\n          height: obim.height,\n          bitmap: obim.bitmap || null\n        });\n        objects.push(ob);\n      }\n    }\n    return objects;\n  }\n}\n\nmodule.exports = Room;\n","\nclass Container {\n  constructor(params) {\n    let el = document.createElement('div');\n    el.classList.add('container');\n\n    let titleEl = document.createElement('div');\n    titleEl.id = 'title';\n    titleEl.classList.add('title');\n    titleEl.appendChild(document.createTextNode(params.title));\n    el.appendChild(titleEl);\n\n    let contentEl = document.createElement('div');\n    contentEl.id = 'content';\n\n    contentEl.appendChild(params.content);\n\n    el.appendChild(contentEl);\n\n    el.style.left = params.x + 'px';\n    el.style.top = params.y + 'px';\n\n    this.el = el;\n\n    this.el.addEventListener('mousedown', this);\n  }\n\n  show() {\n    document.body.appendChild(this.el);\n  }\n\n  hide() {\n    document.body.removeChild(this.el);\n  }\n\n  cancelDrag() {\n    window.removeEventListener('mousemove', this);\n    window.removeEventListener('mouseup', this);\n    window.removeEventListener('blur', this);\n  }\n\n  onMouseMove(event) {\n    let x = event.movementX;\n    let y = event.movementY;\n    this.el.style.left = (this.el.offsetLeft + x) + 'px';\n    this.el.style.top = (this.el.offsetTop + y) + 'px';\n  }\n\n  onMouseDown(event) {\n    window.addEventListener('mousemove', this);\n    window.addEventListener('mouseup', this);\n    window.addEventListener('blur', this);\n  }\n\n  onMouseUp(event) {\n    this.cancelDrag();\n  }\n\n  onBlur(event) {\n    this.cancelDrag();\n  }\n\n  handleEvent(event) {\n    if (event.type == 'mousedown') {\n      this.onMouseDown(event);\n    }\n    else if (event.type == 'mouseup') {\n      this.onMouseUp(event);\n    }\n    else if (event.type == 'mousemove') {\n      this.onMouseMove(event);\n    }\n    else if (event.type == 'blur') {\n      this.onBlur(event);\n    }\n  }\n}\n\nmodule.exports = Container;\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}