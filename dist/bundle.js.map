{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/app.js","src/bit_stream.js","src/bitmap.js","src/buffer_stream.js","src/scumm/resource.js","src/scumm/room.js","src/scumm/room_object.js","src/ui/container.js","src/ui/list.js","src/ui/workspace.js"],"names":[],"mappings":"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","file":"bundle.js","sourcesContent":["(function(){function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s}return e})()","const Container = require('./ui/container');\nconst Workspace = require('./ui/workspace');\nconst List = require('./ui/list');\n\nconst Resource = require('./scumm/resource');\n// const Scumm = require('./scumm');\nconst Bitmap = require('./bitmap');\n\nconst INDEX_FILE = 'monkey2.000';\nconst BUNDLE_FILE = 'monkey2.001';\n\n// const INDEX_FILE = 'mi2demo.000';\n// const BUNDLE_FILE = 'mi2demo.001';\n\nclass App {\n  constructor() {\n    console.log('init');\n\n    this.files = [];\n\n    this.resource = new Resource();\n\n    this.offscreen = document.createElement('canvas');\n    this.offscreen.width = 320;\n    this.offscreen.height = 200;\n\n    this.canvasImages = [];\n\n    this.el = document.getElementById('workspace');\n\n    window.addEventListener('DOMContentLoaded', () => {\n      this.createElements();\n      this.initEventListeners();\n    });\n  }\n\n  decode(buffer, enc=0) {\n    let temp = new Uint8Array(buffer);\n    for (var i = 0; i < temp.length; i++) {\n      temp[i] = temp[i] ^ enc;\n    }\n    return temp.buffer;\n  }\n\n  updatePalette() {\n    let palette = this.palette;\n\n    let paletteEl = this.paletteEl;\n    while(paletteEl.firstChild) paletteEl.removeChild(paletteEl.firstChild);\n\n    if (palette) {\n      for (var i = 0; i < 256; i++) {\n        let r = palette[i*3];\n        let g = palette[i*3 + 1];\n        let b = palette[i*3 + 2];\n        let swatch = document.createElement('div');\n        swatch.classList.add('palette-swatch');\n        swatch.style.backgroundColor = 'rgb(' + r + ',' + g + ',' + b + ')';\n        // swatch.title = 'Index: ' + i + '\\n' + 'RGB: ' + r + ', ' + g + ', ' + b;\n        paletteEl.appendChild(swatch);\n      }\n    }\n  }\n\n  updateRoomImage() {\n    if (!this.room) return;\n    let room = this.room;\n\n    let width = room.width;\n    let height = room.height;\n\n    this.offscreen.width = width;\n    this.offscreen.height = height;\n\n    let ctx = this.offscreen.getContext('2d');\n    ctx.clearRect(0, 0, this.offscreen.width, this.offscreen.height);\n\n    if (room.bitmap) {\n      let imageData = ctx.getImageData(0, 0, width, height);\n\n      for (var i = 0; i < room.bitmap.length; i++) {\n        let index = room.bitmap[i];\n        imageData.data[i * 4 + 0] = this.palette[index * 3 + 0];\n        imageData.data[i * 4 + 1] = this.palette[index * 3 + 1];\n        imageData.data[i * 4 + 2] = this.palette[index * 3 + 2];\n        imageData.data[i * 4 + 3] = 255;\n      }\n\n      ctx.putImageData(imageData, 0, 0);\n\n      for (var i = 0; i < this.canvasImages.length; i++) {\n        let im = this.canvasImages[i];\n        ctx.drawImage(im.image, im.x, im.y);\n      }\n    }\n\n    let scale = 1;\n\n    let canvas = this.canvas;\n    canvas.title = room.name;\n    canvas.width = width * scale;\n    canvas.height = height * scale;\n\n    ctx = canvas.getContext('2d');\n    ctx.imageSmoothingEnabled = false;\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    ctx.drawImage(this.offscreen, 0, 0, this.offscreen.width*scale, this.offscreen.height*scale);\n\n    this.imageContainer.setSize(width * scale, height * scale);\n  }\n\n  createCanvasFromBitmap(bitmap, width, height, transparent) {\n    let canvas = document.createElement('canvas');\n    canvas.width = width;\n    canvas.height = height;\n    if (bitmap) {\n      let ctx = canvas.getContext('2d');\n      let imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n      for (var i = 0; i < bitmap.length; i++) {\n        let x = i % width;\n        let y = (i / width) >> 0;\n        let index = (y * width + x) * 4;\n        let color = bitmap[i];\n        if (color !== transparent) {\n          imageData.data[index + 0] = this.palette[color * 3 + 0];\n          imageData.data[index + 1] = this.palette[color * 3 + 1];\n          imageData.data[index + 2] = this.palette[color * 3 + 2];\n          imageData.data[index + 3] = 255;\n        }\n      }\n      ctx.putImageData(imageData, 0, 0);\n    }\n    return canvas;\n  }\n\n  updateRoomObjects() {\n    this.roomObjects = this.room.getObjects();\n    let objectsEl = this.roomObjectsEl;\n    while (objectsEl.firstChild) objectsEl.removeChild(objectsEl.firstChild);\n\n    let list = new List({ type: 'icon-list', multiple: true });\n\n    for (var i = 0, index = 1; i < this.roomObjects.length; i++) {\n      let ob = this.roomObjects[i];\n\n      if (ob.bitmaps) {\n        for (var j = 0; j < ob.bitmaps.length; j++) {\n          let bitmap = ob.bitmaps[j];\n          let canvas = this.createCanvasFromBitmap(bitmap, ob.width, ob.height, this.room.transparent);\n          list.addItem({\n            id: index++,\n            title: ob.id,\n            image: canvas,\n            data: ob.id\n          });\n        }\n      }\n    }\n\n    this.roomObjectsList = list;\n\n    this.roomObjectsList.dom().addEventListener('change', (e) => {\n      this.clearCanvasImages();\n      let selection = e.detail.selection;\n      for (var i = 0; i < selection.length; i++) {\n        let item = selection[i];\n        let ob = this.roomObjects.find(element => element.id == item.data);\n        if (ob) {\n          this.addImageToCanvas(item.image, ob.x, ob.y);\n        }\n      }\n      this.updateRoomImage();\n    });\n\n    this.roomObjectsEl.appendChild(list.dom());\n  }\n\n  setRoom(num) {\n    if (this.roomno == num) return;\n    let room = this.resource.getRoom(num);\n    if (room) {\n      this.room = room;\n      this.roomno = num;\n      this.palette = room.palette;\n      this.canvasImages = [];\n\n      this.updatePalette();\n      this.updateRoomImage();\n      this.updateRoomObjects();\n    }\n  }\n\n  addImageToCanvas(image, x, y) {\n    this.canvasImages.push({\n      x: x,\n      y: y,\n      image: image\n    });\n    this.updateRoomImage();\n  }\n\n  clearCanvasImages() {\n    this.canvasImages = [];\n  }\n\n  updateRoomList() {\n    let roomList = this.resource.getRoomList();\n    for (var i = 0; i < roomList.length; i++) {\n      let room = roomList[i];\n      this.roomList.addItem({ id: room.id, title: room.id.toString().padStart(3, '0') + ' ' + room.name });\n    }\n  }\n\n  parseFiles() {\n    if (this.files[INDEX_FILE]) {\n      this.resource.addIndex(this.files[INDEX_FILE]);\n    }\n    if (this.files[BUNDLE_FILE]) {\n      this.resource.addBundle(this.files[BUNDLE_FILE]);\n      this.updateRoomList();\n      this.setRoom(1);\n      this.roomList.select(0);\n    }\n  }\n\n  onFileLoaded(filename) {\n    console.log('Loaded', filename, this.files[filename].byteLength);\n\n    if (filename == INDEX_FILE || filename == BUNDLE_FILE) {\n      this.files[filename] = this.decode(this.files[filename], 0x69);\n    }\n\n    this.filesToLoad--;\n\n    if (this.filesToLoad == 0) {\n      this.parseFiles();\n    }\n  }\n\n  loadFile(file) {\n    var reader = new FileReader();\n    var filename = file.name.toLowerCase();\n\t\treader.onload = (event) => {\n      this.files[filename] = event.target.result;\n      this.onFileLoaded(filename);\n\t\t};\n\t  reader.readAsArrayBuffer(file);\n  }\n\n  onDrop(event) {\n    event.stopPropagation();\n    event.preventDefault();\n\n    var files = event.dataTransfer.files;\n    if (files.length) {\n      this.filesToLoad = files.length;\n      for (var i = 0; i < files.length; i++) {\n        this.loadFile(files[i]);\n      }\n    }\n  }\n\n  onDragEnter(event) {\n    event.stopPropagation();\n    event.preventDefault();\n  }\n\n  onDragOver(event) {\n    event.stopPropagation();\n    event.preventDefault();\n  }\n\n  onKeyDown(event) {\n    // console.log(event.target);\n    if (event.key == 'ArrowRight' && !event.repeat) {\n      // this.setRoom(this.roomno + 1);\n    }\n    else if (event.key == 'ArrowLeft' && !event.repeat) {\n      // this.setRoom(this.roomno - 1);\n    }\n  }\n\n  handleEvent(event) {\n    if (event.type == 'drop') {\n      this.onDrop(event);\n    }\n    else if (event.type == 'dragover') {\n      this.onDragOver(event);\n    }\n    else if (event.type == 'dragenter') {\n      this.onDragEnter(event);\n    }\n    else if (event.type == 'keydown') {\n      this.onKeyDown(event);\n    }\n  }\n\n  createElements() {\n    this.app = document.getElementById('app');\n\n    let sidebarEl = document.createElement('div');\n    sidebarEl.classList.add('side-bar');\n\n    this.roomList = new List();\n    this.roomList.dom().addEventListener('change', (e) => {\n      // console.log('change');\n      let selection = e.detail.selection;\n      if (selection.length) {\n        // let id = e.detail.id;\n        this.setRoom(selection[0].id);\n      }\n    });\n\n    this.roomListEl = document.createElement('div');\n    this.roomListEl.classList.add('room-list');\n\n    this.roomListEl.appendChild(this.roomList.dom());\n\n    let el = document.createElement('div');\n    // el.classList.add('room-list-heading');\n    // el.innerHTML = 'Rooms';\n    // sidebarEl.appendChild(el);\n\n    sidebarEl.appendChild(this.roomListEl);\n\n    this.app.appendChild(sidebarEl);\n\n    this.workspace = new Workspace({ parent: this.app });\n\n    this.canvasContainerEl = document.createElement('div');\n    this.canvasContainerEl.classList.add('room-image');\n\n    this.canvas = document.createElement('canvas');\n    this.canvasContainerEl.appendChild(this.canvas);\n\n    this.imageContainer = new Container({ title: 'Background', content: this.canvasContainerEl, x: 32, y: 32, width: 320, height: 200 });\n    this.workspace.add(this.imageContainer);\n\n    this.paletteEl = document.createElement('div');\n    this.paletteEl.classList.add('palette-swatches');\n\n    this.paletteContainer = new Container({ title: 'Palette', content: this.paletteEl, x: 32, y: 280, width: 192, height: 192, status: false });\n    this.workspace.add(this.paletteContainer);\n\n    this.roomObjectsEl = document.createElement('div');\n    this.roomObjectsEl.classList.add('room-objects');\n    this.roomObjectsContainer = new Container({ title: 'Object Images', content: this.roomObjectsEl, x: 256, y: 280, width: 336, height: 278 });\n    this.workspace.add(this.roomObjectsContainer);\n\n\n    this.costumesEl = document.createElement('div');\n    this.costumesEl.classList.add('costumes');\n    this.costumesContainer = new Container({ title: 'Costumes', content: this.costumesEl, x: 624, y: 280, width: 336, height: 278 });\n    this.workspace.add(this.costumesContainer);\n\n  }\n\n  initEventListeners() {\n    window.addEventListener('drop', this, false);\n    window.addEventListener('dragenter', this, false);\n    window.addEventListener('dragover', this, false);\n\n    window.addEventListener('keydown', this, false);\n    window.addEventListener('keyup', this, false);\n  }\n}\n\nmodule.exports = App;\nglobal.App = App;\n","\nclass BitStream {\n  constructor(stream) {\n    this.stream = stream;\n    this.offset = 0;\n    this.cl = 0;\n  }\n\n  next() {\n    this.byte = this.stream.getUint8();\n    this.bit = this.byte & 1;\n    this.cl = 8;\n  }\n\n  shift() {\n    if (this.cl > 1) {\n      this.byte >>= 1;\n      this.bit = this.byte & 1;\n      this.cl--;\n    } else {\n      this.next();\n    }\n  }\n\n  read(length) {\n    if (this.cl == 0) {\n      this.next();\n    }\n\n    if (length) {\n      let value = 0;\n      for (var i = 0; i < length; i++) {\n        value |= (this.bit << i);\n        this.shift();\n      }\n      return value;\n    } else {\n      let value = this.bit ? 1 : 0;\n      this.shift();\n      return value;\n    }\n  }\n}\n\nmodule.exports = BitStream;\n","\nclass Bitmap {\n  constructor(params) {\n    this.width = params.width;\n    this.height = params.height;\n    this.pixels = params.pixels;\n  }\n}\n\nmodule.exports = Bitmap;\n","\nclass BufferStream {\n  constructor(buffer) {\n    this.buffer = buffer;\n    this.view = new DataView(this.buffer);\n    this.offset = 0;\n  }\n\n  get length() {\n    return this.buffer.byteLength;\n  }\n\n  seek(offset=0) {\n    this.offset = offset;\n  }\n\n  advance(count=1) {\n    this.offset += count;\n    if (this.offset > this.buffer.byteLength-1) this.offset = this.buffer.byteLength-1;\n  }\n\n  backup(count=1) {\n    this.offset -= count;\n    if (this.offset < 0) this.offset = 0;\n  }\n\n  getUint8(offset) {\n    if (offset == undefined) {\n      offset = this.offset;\n      this.offset++;\n    }\n    return this.view.getUint8(offset);\n  }\n\n  getUint16(offset, littleEndian=false) {\n    if (offset == undefined) {\n      offset = this.offset;\n      this.offset += 2;\n    }\n    return this.view.getUint16(offset, littleEndian);\n  }\n\n  getUint32(offset, littleEndian=false) {\n    if (offset == undefined) {\n      offset = this.offset;\n      this.offset += 4;\n    }\n    return this.view.getUint32(offset, littleEndian);\n  }\n\n  getUint16LE(offset) {\n    return this.getUint16(offset, true);\n  }\n\n  getUint32LE(offset) {\n    return this.getUint32(offset, true);\n  }\n\n  getBytes(length=1, offset) {\n    if (offset == undefined) {\n      offset = this.offset;\n      this.offset += length;\n    }\n    let bytes = new Uint8Array(length);\n    for (var i = 0; i < length; i++) {\n      bytes[i] = this.view.getUint8(offset + i); //this.getUint8(offset + i);\n    }\n    return bytes;\n  }\n}\n\nmodule.exports = BufferStream;\n","const BufferStream = require('./../buffer_stream');\nconst BitStream = require('./../bit_stream');\nconst RoomObject = require('./room_object');\nconst Room = require('./room');\n\nclass Resource {\n  constructor() {\n    this.rooms = [];\n    this.roomNames = [];\n    this.diskBlocks = [];\n    this.offsets = {\n      costume: [],\n      room: []\n    };\n  }\n\n  addIndex(buffer) {\n    this.parseIndex(buffer);\n  }\n\n  addBundle(buffer) {\n    this.parseBundle(buffer);\n  }\n\n  getRoom(num) {\n    // console.log('getRoom', num);\n    return this.parseRoom(num);\n  }\n\n  getBlockTypeName(uint32) {\n    return String.fromCharCode(\n      (uint32 & 0xff),\n      ((uint32 >> 8) & 0xff),\n      ((uint32 >> 16) & 0xff),\n      ((uint32 >> 24) & 0xff)\n    );\n  }\n\n  parseBlockName(stream) {\n    let type = stream.getUint32LE();\n    return this.getBlockTypeName(type);\n  }\n\n  parseIndex(buffer) {\n    // console.log('parseIndex');\n    let stream = new BufferStream(buffer);\n\n    while (stream.offset < stream.length) {\n      let name = this.parseBlockName(stream);\n      let size = stream.getUint32();\n      let jmp = stream.offset + size - 8;\n\n      if (name == 'RNAM') { // Room names table\n        while (1) {\n          let roomno = stream.getUint8();\n          if (roomno == 0) break;\n          let bytes = stream.getBytes(9);\n          this.roomNames[roomno] = bytes.reduce((accumulator, currentValue) => {\n            return accumulator + (currentValue != 0xff ? String.fromCharCode(currentValue ^ 0xff) : '');\n          }, '');\n        }\n      }\n      else if (name == 'DCOS') {\n        // console.log('DCOS', size);\n        let num = stream.getUint16LE();\n        // console.log('DCOS', num);\n\n        for (var i = 0; i < num; i++) {\n          let roomno = stream.getUint8();\n          this.offsets.costume[i] = { roomno: roomno };\n        }\n        for (var i = 0; i < num; i++) {\n          let offs = stream.getUint32LE();\n          this.offsets.costume[i].offset = offs;\n          // console.log(offs);\n        }\n        // console.log(this.offsets.costume);\n      }\n      else if (name == 'DROO') {\n      //   let numitems = stream.getUint16LE();\n      //   let roomNos = stream.getBytes(, numitems);\n      //\n      //   let roomOffsets = [];\n      //   for (var i = 0; i < numitems; i++) {\n      //     let offs = stream.getUint32LE();\n      //     roomOffsets[i] = offs;\n      //   }\n\n      }\n      stream.seek(jmp);\n    }\n  }\n\n  decompress1(bits, shift, width, height) {\n    let pixels = new Uint8Array(width * height);\n    let offset = 0;\n\n    let color = bits.read(8);\n\n    let inc = -1;\n\n    while (offset < width * height) {\n      pixels[offset++] = color;\n      if (bits.read()) {\n        if (!bits.read()) {\n          color = bits.read(shift);\n          inc = -1;\n        } else {\n          if (!bits.read()) {\n            color += inc;\n          } else {\n            inc = -inc;\n            color += inc;\n          }\n        }\n      }\n    }\n\n    return pixels;\n  }\n\n  decompress2(bits, shift, width, height) {\n    let pixels = new Uint8Array(width * height);\n    let offset = 0;\n\n    let color = bits.read(8);\n    let skip = false;\n\n    while (offset < width * height) {\n      if (!skip) {\n        pixels[offset++] = color;\n        skip = false;\n      }\n\n      if (bits.read()) {\n        if (bits.read()) {\n          // adjust current palette index\n          let c = bits.read(3);\n          let incm = c - 4;\n          if (incm) {\n            color += incm;\n          } else {\n            let run = bits.read(8);\n            for (var i = 0; i < run; i++) {\n              pixels[offset++] = color;\n            }\n            skip = true;\n          }\n        } else {\n          // read a new palette index\n          color = bits.read(shift);\n        }\n      }\n    }\n    return pixels;\n  }\n\n  decompressStrip(stream, width, height) {\n    let code = stream.getUint8();\n    let shift = code % 10;\n\n    let bits = new BitStream(stream);\n    let pixels;\n    let orientation = 0;\n\n    if (code == 0x01) { // raw horizontal\n      pixels = new Uint8Array(width * height);\n      for (var i = 0; i < pixels.length; i++) {\n        pixels[i] = stream.getUint8();\n      }\n    }\n    else if (code >= 0x0e && code <= 0x12) { // method 1 vertical\n      orientation = 1;\n      pixels = this.decompress1(bits, shift, width, height);\n    }\n    else if (code >= 0x18 && code <= 0x1c) { // method 1 horizontal\n      pixels = this.decompress1(bits, shift, width, height);\n    }\n    else if (code >= 0x22 && code <= 0x26) { // method 1 vertical transp\n      orientation = 1;\n      pixels = this.decompress1(bits, shift, width, height);\n    }\n    else if (code >= 0x2c && code <= 0x30) { // method 1 horizontal transp\n      pixels = this.decompress1(bits, shift, width, height);\n    }\n    else if (code >= 0x40 && code <= 0x44) { // method 2 horizontal\n      pixels = this.decompress2(bits, shift, width, height);\n    }\n    else if (code >= 0x54 && code <= 0x58) { // method 2 horizontal transp\n      pixels = this.decompress2(bits, shift, width, height);\n    }\n    else if (code >= 0x68 && code <= 0x6c) { // method 2 horizontal transp\n      pixels = this.decompress2(bits, shift, width, height);\n    }\n    else if (code >= 0x7c && code <= 0x80) { // method 2 horizontal\n      pixels = this.decompress2(bits, shift, width, height);\n    }\n    else {\n      console.log('unknown', code);\n    }\n\n    if (orientation) { // vertical\n      let temp = new Uint8Array(pixels.length);\n      for (var i = 0, index = 0; i < pixels.length; i++) {\n        temp[index] = pixels[i];\n        index += 8;\n        if (index >= height * 8) index = ((i / height) >> 0) + 1;\n      }\n      pixels = temp;\n    }\n\n    return pixels;\n  }\n\n  parseSMAP(stream, width, height) {\n    let base = stream.offset;\n    let name = this.parseBlockName(stream);\n    let size = stream.getUint32();\n\n    if (name !== 'SMAP') return;\n\n    let offsets = [];\n\n    for (var i = 0; i < width / 8; i++)\n      offsets.push(stream.getUint32LE());\n\n    let bitmap = new Uint8Array(width * height);\n\n    for (var i = 0; i < offsets.length; i++) {\n      stream.seek(base + offsets[i]);\n      let pixels = this.decompressStrip(stream, 8, height);\n      if (pixels) {\n        for (var j = 0, x = 0, y = 0; j < pixels.length; j++) {\n          bitmap[x + i * 8 + y * width] = pixels[j];\n          y = (x == 7 ? y + 1 : y);\n          x = (x == 7 ? 0 : x + 1);\n        }\n      }\n\n    }\n\n    return bitmap;\n  }\n\n  parseOBIM(stream) {\n    let name = this.parseBlockName(stream);\n    if (name !== 'OBIM') return;\n    // console.log(name);\n    let size = stream.getUint32();\n\n    name = this.parseBlockName(stream);\n    if (name !== 'IMHD') return;\n    // console.log(name);\n    size = stream.getUint32();\n\n    let ob = {};\n\n    ob.id = stream.getUint16LE();\n    ob.imnn = stream.getUint16LE();\n    ob.zpnn = stream.getUint16LE();\n    ob.flags = stream.getUint8();\n    stream.advance();\n    ob.x = stream.getUint16LE();\n    ob.y = stream.getUint16LE();\n    ob.width = stream.getUint16LE();\n    ob.height = stream.getUint16LE();\n    ob.bitmaps = [];\n\n    if (ob.imnn) {\n      for (var i = 0; i < ob.imnn; i++) {\n        let name = this.parseBlockName(stream);\n        let size = stream.getUint32();\n        let jump = stream.offset + size - 8;\n\n        let bitmap = this.parseSMAP(stream, ob.width, ob.height);\n        ob.bitmaps.push(bitmap);\n        stream.seek(jump);\n      }\n    }\n\n    return ob;\n  }\n\n  parseOBCD(stream) {\n    let name, size;\n\n    name = this.parseBlockName(stream);\n    if (name !== 'OBCD') return;\n    // console.log(name);\n    size = stream.getUint32();\n\n    name = this.parseBlockName(stream);\n    size = stream.getUint32();\n\n    let ob = {};\n\n    ob.id = stream.getUint16LE();\n    ob.x = stream.getUint8();\n    ob.y = stream.getUint8();\n    ob.width = stream.getUint8();\n    ob.height = stream.getUint8();\n    ob.flags = stream.getUint8();\n    ob.parent = stream.getUint8();\n    ob.walk_x = stream.getUint16LE();\n    ob.walk_y = stream.getUint16LE();\n    ob.actor_dir = stream.getUint8();\n    ob.name = '';\n\n    // VERB\n\n    name = this.parseBlockName(stream);\n    size = stream.getUint32();\n    stream.advance(size - 8);\n\n    // OBNA\n\n    name = this.parseBlockName(stream);\n    size = stream.getUint32();\n    let end = stream.offset + size - 8;\n\n    for (let b = stream.getUint8(); b !== 0 && stream.offset < end; b = stream.getUint8()) {\n      ob.name += String.fromCharCode(b);\n    }\n\n    return ob;\n  }\n\n  parseCOST(stream) {\n    let name = this.parseBlockName(stream);\n    if (name !== 'COST') return;\n    let size = stream.getUint32();\n    console.log(name, stream.length);\n\n    let base = stream.offset - 8 + 2;\n    // let base = stream.offset;\n\n    let numAnim = stream.getUint8();\n    console.log('numAnim', numAnim);\n    let format = stream.getUint8();\n    let numColors = (format & 1 ? 32 : 16);\n\n    // console.log('format', (format & 0x7e).toString(16), format.toString(16));\n\n    let palette = stream.getBytes(numColors);\n\n    stream.advance(2); // skip cmds offset 16bitLE\n\n    let limbOffsets = [];\n    for (var i = 0; i < 16; i++) {\n      let value = stream.getUint16LE();\n      limbOffsets.push(value);\n    }\n    console.log(limbOffsets);\n\n    let animOffsets = []\n    for (var i = 0; i < numAnim; i++) {\n      animOffsets.push(stream.getUint16LE());\n    }\n    console.log(animOffsets);\n\n    let stop;\n\n    for (var i = 0; i < limbOffsets.length; i++) {\n    // for (var i = 0; i < 1; i++) {\n      let offs = limbOffsets[i];\n      if (offs === stop) break;\n\n      stream.seek(base + offs);\n\n      let picOffset = stream.getUint16LE();\n\n      if (base + picOffset < stream.length) {\n        stream.seek(base + picOffset);\n        let width = stream.getUint16LE();\n        let height = stream.getUint16LE();\n        console.log(base + picOffset, picOffset, 'w', width, 'h', height);\n      }\n\n      if (i == 0) stop = picOffset;\n\n      // if (i < limbOffsets.length - 1 && picOffset == limbOffsets[i + 1]) {\n      //   break;\n      // }\n\n    }\n\n    for (var i = 0; i < animOffsets.length; i++) {\n      let offs = animOffsets[i];\n      stream.seek(base + offs);\n      let mask = stream.getUint16LE();\n      // console.log(mask.toString(2).padStart(16, '0'));\n    }\n\n  }\n\n  parseRoom(num) {\n    let block = this.diskBlocks[num - 1];\n    if (!block) return;\n\n    let stream = new BufferStream(block.buffer);\n\n    let width;\n    let height;\n    let numObjects;\n    let palette;\n    let bitmap;\n    let transparent;\n    let obIMs = [];\n    let obCDs = [];\n    let costumes = [];\n\n    let name = this.parseBlockName(stream);\n    if (name !== 'ROOM') return;\n    let size = stream.getUint32();\n\n    // console.log('COSTUME OFFSETS');\n    // let offsets = this.offsets.costume.filter(element => element.roomno == num);\n    // console.log(offsets);\n\n    while (stream.offset < block.length) {\n      let name = this.parseBlockName(stream);\n      let size = stream.getUint32();\n      let jump = stream.offset + size - 8;\n      // console.log(name);\n\n      if (name == 'RMHD') {\n        width = stream.getUint16LE();\n        height = stream.getUint16LE();\n        numObjects = stream.getUint16LE();\n      }\n      else if (name == 'RMIM') {\n        stream.advance(18);\n        bitmap = this.parseSMAP(stream, width, height);\n      }\n      else if (name == 'CLUT') {\n        palette = [];\n        for (var i = 0; i < 256; i++) {\n          let r = stream.getUint8();\n          let g = stream.getUint8();\n          let b = stream.getUint8();\n          palette.push(r, g, b);\n        }\n      }\n      else if (name == 'OBIM') {\n        // console.log('OBIM');\n        stream.backup(8);\n        let ob = this.parseOBIM(stream);\n        obIMs[ob.id] = ob;\n      }\n      else if (name == 'OBCD') {\n        // console.log('OBCD');\n        stream.backup(8);\n        let ob = this.parseOBCD(stream);\n        obCDs[ob.id] = ob;\n      }\n      else if (name == 'TRNS') {\n        transparent = stream.getUint8();\n      }\n      else if (name == 'COST') {\n        stream.backup(8);\n        let costume = this.parseCOST(stream);\n        costumes.push(costume);\n      }\n      else {\n      }\n      stream.seek(jump);\n    }\n\n    let room = new Room({\n      id: num,\n      name: this.roomNames[num],\n      width: width,\n      height: height,\n      numObjects: numObjects,\n      obIMs: obIMs,\n      obCDs: obCDs,\n      palette: palette,\n      bitmap: bitmap,\n      costumes: costumes,\n      transparent: transparent\n    });\n\n    return room;\n  }\n\n  getRoomList() {\n    // console.log('getRoomList');\n    let result = [];\n    for (var i = 0; i < this.numrooms; i++) {\n      // let room = this.rooms[i];\n      // if (room) {\n        result.push({ id: i+1, name: this.roomNames[i+1] });\n      // }\n    }\n    return result;\n  }\n\n  parseBundle(buffer) {\n    // console.log('parseBundle');\n\n    let stream = new BufferStream(buffer);\n\n    let name = this.parseBlockName(stream);\n    let size = stream.getUint32();\n\n    if (name != 'LECF') return;\n    // console.log(name);\n\n    name = this.parseBlockName(stream); // LOFF\n    size = stream.getUint32();\n\n    this.numrooms = stream.getUint8();\n    stream.advance(size - 8 - 1);\n\n    // console.log(name);\n\n    while (stream.offset < stream.length) {\n      let name = this.parseBlockName(stream); // LFLF\n      let size = stream.getUint32();\n\n      // console.log(name);\n      let block = stream.getBytes(size - 8);\n\n      this.diskBlocks.push(block);\n    }\n\n    // if (name == 'LOFF') {\n    //   this.numrooms = stream.getUint8();\n    //\n    //   let offsets = [];\n    //\n    //   for (var i = 0; i < this.numrooms; i++) {\n    //     let roomid = stream.getUint8();\n    //     let offs = stream.getUint32LE();\n    //     offsets[roomid] = offs;\n    //   }\n    //\n    //   // Save out ROOM blocks\n    //\n    //   for (var i = 0; i < offsets.length; i++) {\n    //     let offs = offsets[i];\n    //     if (offs != undefined) {\n    //       stream.seek(offs);\n    //       let name = this.parseBlockName(stream);\n    //       let size = stream.getUint32();\n    //       this.rooms[i] = stream.getBytes(size - 8);\n    //     }\n    //   }\n    //\n    //   // Save out COST blocks\n    //\n    //   // for (var i = 0; i < offsets.length; i++) {\n    //   //   stream.seek(offs - 8);\n    //   //   name = this.parseBlockName(stream);\n    //   //   size = stream.getUint32();\n    //   //\n    //   //   let end = stream.offset + size - 8;\n    //   //\n    //   //   while (stream.offset <= end) {\n    //   //     if (stream.offset + 8 > stream.length) break;\n    //   //     let name = this.parseBlockName(stream);\n    //   //     let size = stream.getUint32();\n    //   //     if (name == 'COST') {\n    //   //       console.log(i, name);\n    //   //     }\n    //   //     stream.advance(size - 8);\n    //   //   }\n    //   // }\n    //\n    // }\n  }\n\n}\n\nmodule.exports = Resource;\n","const RoomObject = require('./room_object');\n\nclass Room {\n  constructor(params) {\n    this.id = params.id;\n    this.name = params.name;\n    this.width = params.width;\n    this.height = params.height;\n    this.numObjects = params.numObjects;\n    this.obIMs = params.obIMs;\n    this.obCDs = params.obCDs;\n    this.palette = params.palette;\n    this.bitmap = params.bitmap;\n    this.costumes = params.costumes;\n    this.transparent = params.transparent;\n  }\n\n  getObjects() {\n    let objects = [];\n    for (var i = 0; i < this.obIMs.length; i++) {\n      let obim = this.obIMs[i];\n      if (obim) {\n        let obcd = this.obCDs[obim.id];\n        let ob = new RoomObject({\n          id: obim.id,\n          name: obcd.name,\n          x: obim.x,\n          y: obim.y,\n          width: obim.width,\n          height: obim.height,\n          bitmaps: obim.bitmaps\n        });\n        objects.push(ob);\n      }\n    }\n    return objects;\n  }\n}\n\nmodule.exports = Room;\n","\nclass RoomObject {\n  constructor(params) {\n    this.id = params.id;\n    this.name = params.name;\n    this.imnn = params.imnn;\n    this.zpnn = params.zpnn;\n    this.flags = params.flags;\n    this.x = params.x;\n    this.y = params.y;\n    this.width = params.width;\n    this.height = params.height;\n    this.bitmaps = params.bitmaps;\n  }\n}\n\nmodule.exports = RoomObject;\n","\nclass Container {\n  constructor(params) {\n    this.parent = params.parent;\n\n    this.el = document.createElement('div');\n    this.el.classList.add('container');\n\n    this.titleEl = document.createElement('div');\n    this.titleEl.id = 'title';\n    this.titleEl.classList.add('container-title');\n    this.titleEl.appendChild(document.createTextNode(params.title));\n    this.el.appendChild(this.titleEl);\n\n    this.contentEl = document.createElement('div');\n    this.contentEl.id = 'content';\n    this.contentEl.classList.add('container-content');\n\n    this.contentEl.appendChild(params.content);\n\n    this.el.appendChild(this.contentEl);\n\n    this.el.style.left = params.x + 'px';\n    this.el.style.top = params.y + 'px';\n\n    // this.contentEl.style.width = params.width + 'px';\n    // this.contentEl.style.height = params.height + 'px';\n    this.setSize(params.width, params.height);\n\n    if (params.status) {\n      let statusEl = document.createElement('div');\n      statusEl.classList.add('container-status');\n      // statusEl.innerHTML = 'Status 1234567890';\n      this.el.appendChild(statusEl);\n    }\n\n    this.el.addEventListener('mousedown', this);\n\n    // this.el.tabIndex = -1;\n  }\n\n  dom() {\n    return this.el;\n  }\n\n  setSize(width, height) {\n    this.contentEl.style.maxWidth = this.contentEl.style.width = width + 'px';\n    this.contentEl.style.maxHeight = this.contentEl.style.height = height + 'px';\n\n  }\n\n  cancelDrag() {\n    window.removeEventListener('mousemove', this);\n    window.removeEventListener('mouseup', this);\n    window.removeEventListener('blur', this);\n  }\n\n  onMouseMove(event) {\n    let x = event.movementX;\n    let y = event.movementY;\n    this.el.style.left = (this.el.offsetLeft + x) + 'px';\n    this.el.style.top = (this.el.offsetTop + y) + 'px';\n  }\n\n  onMouseDown(event) {\n    if (event.button == 0 && event.target === this.titleEl) {\n      window.addEventListener('mousemove', this);\n      window.addEventListener('mouseup', this);\n      window.addEventListener('blur', this);\n    }\n  }\n\n  onMouseUp(event) {\n    this.cancelDrag();\n  }\n\n  onBlur(event) {\n    this.cancelDrag();\n  }\n\n  onBlur(event) {\n    this.cancelDrag();\n  }\n\n  handleEvent(event) {\n    if (event.type == 'mousedown') {\n      this.onMouseDown(event);\n    }\n    else if (event.type == 'mouseup') {\n      this.onMouseUp(event);\n    }\n    else if (event.type == 'mousemove') {\n      this.onMouseMove(event);\n    }\n    else if (event.type == 'focus') {\n      this.onFocus(event);\n    }\n    else if (event.type == 'blur') {\n      this.onBlur(event);\n    }\n  }\n}\n\nmodule.exports = Container;\n","\nclass List {\n  constructor(params={}) {\n    // this.type = params.type == undefined ? 'list' : params.type;\n    this.type = params.type || 'basic-list';\n    this.multiple = params.multiple;\n    this.items = [];\n    this.selection = [];\n\n    this.el = document.createElement('div');\n    this.el.classList.add('list');\n    this.listEl = document.createElement('div');\n    this.listEl.classList.add(this.type);\n    this.el.appendChild(this.listEl);\n\n    this.el.addEventListener('mousedown', this);\n    this.el.addEventListener('keydown', this);\n    this.el.addEventListener('focus', this);\n\n    this.el.tabIndex = -1;\n  }\n\n  createItem(item) {\n    let el = document.createElement('div');\n    el.id = 'item' + item.id;\n    el.dataset.id = item.id;\n\n    if (this.type == 'icon-list') {\n      el.classList.add('icon-list-item');\n\n      let imageEl = document.createElement('div');\n      imageEl.classList.add('icon-list-image');\n      imageEl.appendChild(item.image);\n      el.appendChild(imageEl);\n\n      let titleEl = document.createElement('div');\n      titleEl.classList.add('icon-list-title');\n      titleEl.appendChild(document.createTextNode(item.title));\n      el.appendChild(titleEl);\n    } else {\n      el.classList.add('basic-list-item');\n      el.appendChild(document.createTextNode(item.title));\n    }\n\n    this.listEl.appendChild(el);\n\n    this.items.push(item);\n  }\n\n  addItem(candidate) {\n    if (candidate instanceof Array) {\n      for (var i = 0; i < candidate.length; i++) {\n        let item = candidate[i];\n        this.createItem(item);\n      }\n    } else {\n      this.createItem(candidate);\n    }\n  }\n\n  getItemById(id) {\n    return this.items.find(element => element.id == id);\n  }\n\n  dom() {\n    return this.el;\n  }\n\n  select(index, toggle=false) {\n    let item = this.items[index];\n\n    if (!this.selection.includes(item)) {\n      let el = this.listEl.querySelector('#item' + item.id);\n      if (el) {\n        el.classList.add('selected');\n      }\n      this.selection.push(item);\n      // console.log(el.offsetLeft, el.offsetTop);\n      let left = el.offsetLeft;\n      let top = el.offsetTop;\n      let width = el.offsetWidth;\n      let height = el.offsetHeight;\n      // console.log(this.el.offsetHeight);\n      if (top + height > this.el.scrollTop + this.el.offsetHeight) {\n        // console.log('outside', top+ height);\n        this.el.scrollTop = el.offsetTop - this.el.offsetHeight + height;\n      } else if (top < this.el.scrollTop) {\n        this.el.scrollTop = top;\n      }\n    } else {\n      if (toggle) {\n        this.deselect(index);\n      }\n    }\n\n    // let rect = this.el.getBoundingClientRect();\n    // console.log(rect);\n\n    this.announceChange();\n  }\n\n  deselect(index) {\n    if (index !== undefined) {\n      let item = this.items[index];\n      if (item) {\n        let el = this.listEl.querySelector('#item' + item.id);\n        if (el) {\n          el.classList.remove('selected');\n        }\n        this.selection = this.selection.filter(element => element !== item);\n      }\n    }\n    else {\n      for (var i = 0; i < this.selection.length; i++) {\n        let item = this.selection[i];\n        let el = this.listEl.querySelector('#item' + item.id);\n        if (el) {\n          el.classList.remove('selected');\n        }\n      }\n      this.selection = [];\n    }\n    this.announceChange();\n  }\n\n  selectNext() {\n    let index = 0;\n    if (this.selection.length) {\n      let item = this.selection[this.selection.length - 1];\n      index = this.items.indexOf(item) + 1;\n      if (index > this.items.length - 1) index = this.items.length - 1;\n      this.deselect();\n    }\n    this.select(index);\n    // this.announceChange();\n  }\n\n  selectPrevious() {\n    let index = 0;\n    if (this.selection.length) {\n      let item = this.selection[0];\n      index = this.items.indexOf(item) - 1;\n      if (index < 0) index = 0;\n      this.deselect();\n    }\n    this.select(index);\n    // this.announceChange();\n  }\n\n  announceChange() {\n    var myEvent = new CustomEvent('change', {\n      detail: { selection: this.selection }\n    });\n    this.el.dispatchEvent(myEvent);\n  }\n\n  onMouseDown(event) {\n    if (event.button == 0) {\n      // console.log(event.target.parentNode);\n      // console.log('event.button', event.button);\n      let id = event.target.dataset.id;\n      if (id) {\n        let item = this.getItemById(id);\n        let index = this.items.indexOf(item);\n\n        if (this.multiple) {\n          let toggle = event.metaKey || event.ctrlKey;\n          if (!toggle) this.deselect();\n          this.select(index, toggle);\n        } else {\n          this.deselect();\n          this.select(index);\n        }\n      }\n      else {\n        this.deselect();\n      }\n    }\n  }\n\n  onKeyDown(event) {\n    if (event.key == 'ArrowLeft') {\n      if (this.type == 'icon-list') {\n        this.selectPrevious();\n      }\n    }\n    else if (event.key == 'ArrowRight') {\n      if (this.type == 'icon-list') {\n        this.selectNext();\n      }\n    }\n    else if (event.key == 'ArrowDown') {\n      event.preventDefault();\n      if (this.type == 'basic-list') {\n        this.selectNext();\n      }\n    }\n    else if (event.key == 'ArrowUp') {\n      event.preventDefault();\n      if (this.type == 'basic-list') {\n        this.selectPrevious();\n      }\n    }\n  }\n\n  onFocus(event) {\n    // this.el.style.border = '2px solid red';\n  }\n\n  onBlur(event) {\n    // this.el.style.border = 'initial';\n  }\n\n  handleEvent(event) {\n    if (event.type == 'mousedown') {\n      this.onMouseDown(event);\n    }\n    else if (event.type == 'keydown') {\n      this.onKeyDown(event);\n    }\n    else if (event.type == 'focus') {\n      this.onFocus(event);\n    }\n    else if (event.type == 'blur') {\n      this.onBlur(event);\n    }\n  }\n\n}\n\nmodule.exports = List;\n","\nclass Workspace {\n  constructor(params) {\n    this.el = document.createElement('div');\n    this.el.classList.add('workspace');\n    this.parent = params.parent;\n    this.children = [];\n    this.parent.appendChild(this.el);\n  }\n\n  add(child) {\n    child.z = this.children.length ? this.children[this.children.length - 1].z + 1 : 1;\n    let childEl = child.dom();\n    childEl.addEventListener('mousedown', this);\n    this.el.appendChild(childEl);\n    childEl.style.zIndex = child.z;\n    this.children.push(child);\n  }\n\n  remove(child) {\n    let childEl = child.dom();\n    childEl.removeEventListener('mousedown', this);\n    this.el.removeChild(childEl);\n    this.children = this.children.filter(element => element !== child);\n  }\n\n  bringToFront(child) {\n    child.z = Number.POSITIVE_INFINITY;\n    this.children.sort((a, b) => { return a.z - b.z } );\n    for (var i = 0; i < this.children.length; i++) {\n      let child = this.children[i];\n      child.dom().style.zIndex = child.z = i;\n    }\n  }\n\n  onMouseDown(event) {\n    let temp = event.target;\n\n    while (temp.parentNode && temp.parentNode !== document.body) {\n      if (temp.parentNode === this.el) break;\n      temp = temp.parentNode;\n    }\n\n    let child = this.children.find(element => element.dom() === temp);\n    if (child) {\n      this.bringToFront(child);\n    }\n  }\n\n  handleEvent(event) {\n    if (event.type == 'mousedown') {\n      this.onMouseDown(event);\n    }\n  }\n}\n\nmodule.exports = Workspace;\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}