{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/app.js","src/bit_stream.js","src/bitmap.js","src/buffer_stream.js","src/room.js","src/scumm.js"],"names":[],"mappings":"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","file":"bundle.js","sourcesContent":["(function(){function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s}return e})()","const Scumm = require('./scumm');\nconst Bitmap = require('./bitmap');\nconst Room = require('./room');\nconst BufferStream = require('./buffer_stream');\nconst BitStream = require('./bit_stream');\n\nconst INDEX_FILE = 'monkey2.000';\nconst BUNDLE_FILE = 'monkey2.001';\n// const INDEX_FILE = 'mi2demo.000';\n// const BUNDLE_FILE = 'mi2demo.001';\n\nclass App {\n  constructor() {\n    console.log('App');\n\n    this.files = [];\n    this.roomNames = [];\n    this.roomOffsets = [];\n    this.roomBlockOffsets = [];\n    this.rooms = [];\n\n    this.offscreen = document.createElement('canvas');\n    this.offscreen.width = 320;\n    this.offscreen.height = 200;\n\n    this.canvas = document.createElement('canvas');\n    this.canvas.width = 640;\n    this.canvas.height = 400;\n    document.body.appendChild(this.canvas);\n\n    this.initEventListeners();\n  }\n\n  decode(buffer, enc=0) {\n    let temp = new Uint8Array(buffer);\n    for (var i = 0; i < temp.length; i++) {\n      temp[i] = temp[i] ^ enc;\n    }\n    return temp.buffer;\n  }\n\n  getBlockTypeName(uint32) {\n    return String.fromCharCode(\n      (uint32 & 0xff),\n      ((uint32 >> 8) & 0xff),\n      ((uint32 >> 16) & 0xff),\n      ((uint32 >> 24) & 0xff)\n    );\n  }\n\n  parseIndex() {\n    if (!this.files[INDEX_FILE]) return;\n    let stream = new BufferStream(this.files[INDEX_FILE]);\n\n    while (stream.offset < stream.length) {\n      let type = stream.getUint32LE();\n      let size = stream.getUint32();\n      let name = this.getBlockTypeName(type);\n\n      if (name == 'RNAM') { // Room names table\n        while (1) {\n          let roomno = stream.getUint8();\n          if (roomno == 0) break;\n\n          let bytes = stream.getBytes(9);\n          this.roomNames[roomno] = bytes.reduce((accumulator, currentValue) => {\n            return accumulator + (currentValue != 0xff ? String.fromCharCode(currentValue ^ 0xff) : '');\n          }, '');\n        }\n        console.log(this.roomNames);\n      // }\n      // else if (name == 'DROO') {\n      //   let numitems = stream.getUint16LE();\n      //   let roomNos = stream.getBytes(, numitems);\n      //\n      //   let roomOffsets = [];\n      //   for (var i = 0; i < numitems; i++) {\n      //     let offs = stream.getUint32LE();\n      //     roomOffsets[i] = offs;\n      //   }\n      } else {\n        stream.getBytes(size - 8);\n      }\n    }\n  }\n\n  getBundleStream() {\n    let filename = BUNDLE_FILE;\n    if (!this.files[filename]) return;\n    let stream = new BufferStream(this.files[filename]);\n    return stream;\n  }\n\n  readBlockHead(stream) {\n    let type = stream.getUint32LE();\n    let size = stream.getUint32();\n    let name = this.getBlockTypeName(type);\n    return { name: name, type: type, size: size };\n  }\n\n  decompressStrip(stream, width, height) {\n    let pixels = new Uint8Array(width * height);\n    let offset = 0;\n\n    let code = stream.getUint8();\n    let shift = code % 10;\n    // let mask = 0xff >> (8 - shift);\n\n    let color = stream.getUint8();\n\n    let bits = new BitStream(stream);\n\n    console.log(code);\n\n    if (code >= 0x40 && code <= 0x44) {\n      // console.log('Method B Horizontal', code, shift);\n      // console.log('Color', color, '[', this.palette[color*3], this.palette[color*3+1], this.palette[color*3+2], ']');\n\n      //scab-isl\n      //01010100[4]01101110[3]11011010[2]00110100[1]01001101[0]\n\n      // for (var i = 0; i < 1; i++) {\n      //   let b = bits.read(16);\n      //   console.log(b.toString(2).padStart(16, '0'));\n      // }\n\n      while (offset < width * height) {\n        pixels[offset++] = color;\n\n        if (bits.read()) {\n          if (bits.read()) {\n            // command\n            let c = bits.read(3);\n\n            if (c >= 0 && c <= 3) {\n              color += 4 - c;\n            }\n            else if (c == 4) {\n              // run\n              let run = bits.read(8);\n              for (var i = 0; i < run; i++) {\n                pixels[offset++] = color;\n              }\n            }\n            else if (c >= 5 && c <= 7) {\n              color -= c - 4;\n            }\n          } else {\n            // read a palette index\n            color = bits.read(shift);\n            // console.log('new index', color);\n          }\n        }\n      }\n    }\n\n    return pixels;\n  }\n\n  drawStrip(pixels, pos, width, height) {\n    // console.log('drawStrip', pos, width, height);\n    let ctx = this.offscreen.getContext('2d');\n    let imageData = ctx.getImageData(pos, 0, width, height);\n    for (var y = 0; y < height; y++) {\n      for (var x = 0; x < width; x++) {\n        let index = y * width + x;\n        let color = pixels[index];\n        if (color) {\n          imageData.data[index * 4 + 0] = this.palette[color * 3 + 0];\n          imageData.data[index * 4 + 1] = this.palette[color * 3 + 1];\n          imageData.data[index * 4 + 2] = this.palette[color * 3 + 2];\n          imageData.data[index * 4 + 3] = 255;\n        }\n      }\n    }\n    ctx.putImageData(imageData, pos, 0);\n\n    ctx = this.canvas.getContext('2d');\n    ctx.imageSmoothingEnabled = false;\n    ctx.drawImage(this.offscreen, 0, 0, 320*2, 200*2);\n  }\n\n  parseRoom(num) {\n    console.log('Parsing room', num, '...');\n    let stream = this.getBundleStream();\n    let offset = this.roomOffsets[num];\n\n    stream.seek(offset);\n\n    // Read and store the block offsets RMHD, CLUT etc\n\n    let block = this.readBlockHead(stream);\n    let end = offset + block.size;\n    let blocks = {};\n\n    while (stream.offset < end) {\n      let block = this.readBlockHead(stream);\n\n      let info = {\n        name: block.name,\n        size: block.size,\n        offset: stream.offset - 8\n      };\n\n      if (blocks[block.name]) {\n        if (blocks[block.name] instanceof Array) {\n          blocks[block.name].push(info);\n        } else {\n          blocks[block.name] = [ blocks[block.name], info ];\n        }\n      } else {\n        blocks[block.name] = info;\n      }\n\n      stream.getBytes(block.size - 8);\n    }\n\n    // console.log(blocks);\n\n    this.roomBlockOffsets[num] = blocks;\n\n    // Read header data - width, height etc\n\n    stream.seek(blocks['RMHD'].offset + 8);\n    let width = stream.getUint16LE();\n    let height = stream.getUint16LE();\n    let numObjects = stream.getUint16LE();\n\n    // console.log(this.roomNames[num], width, height, numObjects);\n\n    let room = new Room({ width: width, height: height, numObjects: numObjects });\n\n    // Read palette entries\n\n    if (blocks['CLUT']) {\n      stream.seek(blocks['CLUT'].offset + 8);\n\n      room.palette = [];\n      for (var i = 0; i < 256; i++) {\n        let r = stream.getUint8();\n        let g = stream.getUint8();\n        let b = stream.getUint8();\n        room.palette.push(r, g, b);\n      }\n\n      this.palette = room.palette;\n    }\n\n    // Decode background image\n\n    if (blocks['RMIM']) {\n      stream.seek(blocks['RMIM'].offset + 8);\n\n      let block = this.readBlockHead(stream);\n      let numzbuf = stream.getUint16LE();\n\n      if (block.name == 'RMIH') {\n        let block = this.readBlockHead(stream);\n\n        if (block.name == 'IM00') {\n          let SMAPoffs = stream.offset;\n          let block = this.readBlockHead(stream);\n\n          if (block.name == 'SMAP') {\n            let offsets = [];\n            for (var i = 0; i < room.width / 8; i++) {\n              let offs = stream.getUint32LE();\n              offsets.push(offs);\n            }\n            // console.log('offsets', offsets[0], offsets[1]);\n            for (var i = 0; i < room.width / 8; i++) {\n              stream.seek(SMAPoffs + offsets[i]);\n              let pixels = this.decompressStrip(stream, 8, room.height);\n              this.drawStrip(pixels, i*8, 8, room.height);\n            }\n          }\n        }\n      }\n    }\n\n    this.rooms[num] = room;\n  }\n\n  parseBundle(num) {\n    let stream = this.getBundleStream();\n    let block = this.readBlockHead(stream);\n\n    let offset = 8;\n\n    if (block.name == 'LECF') {\n      let block = this.readBlockHead(stream);\n\n      if (block.name == 'LOFF') {\n        let numrooms = stream.getUint8();\n        for (var i = 0; i < numrooms; i++) {\n          let room = stream.getUint8();\n          let offs = stream.getUint32LE();\n          this.roomOffsets[room] = offs;\n        }\n      }\n    }\n  }\n\n  createPaletteElement(num) {\n    let room = this.rooms[num];\n\n    if (room && room.palette) {\n      let paletteEl = document.createElement('div');\n      paletteEl.classList.add('palette');\n\n      for (var i = 0; i < 256; i++) {\n        let r = room.palette[i*3];\n        let g = room.palette[i*3 + 1];\n        let b = room.palette[i*3 + 2];\n        let swatch = document.createElement('div');\n        swatch.classList.add('swatch');\n        swatch.style.backgroundColor = 'rgb('+r+','+g+','+b+')';\n        swatch.title = i + ':' + 'rgb('+r+','+g+','+b+')';\n        paletteEl.appendChild(swatch);\n      }\n\n      document.body.appendChild(paletteEl);\n    }\n  }\n\n  parseFiles() {\n    if (this.files[INDEX_FILE]) {\n      this.parseIndex();\n    }\n    if (this.files[BUNDLE_FILE]) {\n      this.parseBundle();\n      this.parseRoom(2);\n      this.createPaletteElement(2);\n    }\n  }\n\n  onFileLoaded(filename) {\n    console.log('Loaded', filename, this.files[filename].byteLength);\n\n    if (filename == INDEX_FILE || filename == BUNDLE_FILE) {\n      this.files[filename] = this.decode(this.files[filename], 0x69);\n    }\n\n    this.filesToLoad--;\n\n    if (this.filesToLoad == 0) {\n      console.log('Load done.');\n      this.parseFiles();\n    }\n  }\n\n  loadFile(file) {\n    var reader = new FileReader();\n    var filename = file.name.toLowerCase();\n\t\treader.onload = (event) => {\n      // console.log(event.target);\n      this.files[filename] = event.target.result;\n      this.onFileLoaded(filename);\n\t\t};\n\t  reader.readAsArrayBuffer(file);\n  }\n\n  onDrop(event) {\n    event.stopPropagation();\n    event.preventDefault();\n\n    var files = event.dataTransfer.files;\n    if (files.length) {\n      this.filesToLoad = files.length;\n      for (var i = 0; i < files.length; i++) {\n        this.loadFile(files[i]);\n      }\n    }\n  }\n\n  onDragEnter(event) {\n    event.stopPropagation();\n    event.preventDefault();\n  }\n\n  onDragOver(event) {\n    event.stopPropagation();\n    event.preventDefault();\n  }\n\n  handleEvent(event) {\n    if (event.type == 'drop') {\n      this.onDrop(event);\n    }\n    else if (event.type == 'dragover') {\n      this.onDragOver(event);\n    }\n    else if (event.type == 'dragenter') {\n      this.onDragEnter(event);\n    }\n  }\n\n  initEventListeners() {\n    window.addEventListener('drop', this, false);\n    window.addEventListener('dragenter', this, false);\n    window.addEventListener('dragover', this, false);\n  }\n}\n\nwindow.addEventListener('DOMContentLoaded', () => {\n  let app = new App();\n});\n","\nclass BitStream {\n  constructor(stream) {\n    this.stream = stream;\n    this.offset = 0;\n    this.cl = 0;\n  }\n\n  next() {\n    this.byte = this.stream.getUint8();\n    this.bit = this.byte & 1;\n    this.cl = 8;\n  }\n\n  shift() {\n    if (this.cl > 1) {\n      this.byte >>= 1;\n      this.bit = this.byte & 1;\n      this.cl--;\n    } else {\n      this.next();\n    }\n  }\n\n  read(length) {\n    if (this.cl == 0) {\n      // console.log('cl==0');\n      this.next();\n    }\n\n    if (length) {\n      let value = 0;\n      for (var i = 0; i < length; i++) {\n        value |= (this.bit << i);\n        this.shift();\n      }\n      return value;\n    } else {\n      let value = this.bit;\n      this.shift();\n      return value;\n    }\n  }\n}\n\nmodule.exports = BitStream;\n","\nclass Bitmap {\n  constructor(params) {\n    this.width = params.width;\n    this.height = params.height;\n    this.pixels = params.pixels;\n  }\n}\n\nmodule.exports = Bitmap;\n","\nclass BufferStream {\n  constructor(buffer) {\n    this.buffer = buffer;\n    this.view = new DataView(this.buffer);\n    this.offset = 0;\n  }\n\n  get length() {\n    return this.buffer.byteLength;\n  }\n\n  seek(offset=0) {\n    this.offset = offset;\n  }\n  \n  backup() {\n    if (this.offset > 0)\n      this.offset--;\n  }\n\n  getUint8(offset) {\n    if (offset == undefined) {\n      offset = this.offset;\n      this.offset++;\n    }\n    return this.view.getUint8(offset);\n  }\n\n  getUint16(offset, littleEndian=false) {\n    if (offset == undefined) {\n      offset = this.offset;\n      this.offset += 2;\n    }\n    return this.view.getUint16(offset, littleEndian);\n  }\n\n  getUint32(offset, littleEndian=false) {\n    if (offset == undefined) {\n      offset = this.offset;\n      this.offset += 4;\n    }\n    return this.view.getUint32(offset, littleEndian);\n  }\n\n  getUint16LE(offset) {\n    return this.getUint16(offset, true);\n  }\n\n  getUint32LE(offset) {\n    return this.getUint32(offset, true);\n  }\n\n  getBytes(length=1, offset) {\n    if (offset == undefined) {\n      offset = this.offset;\n      this.offset += length;\n    }\n    let bytes = new Uint8Array(length);\n    for (var i = 0; i < length; i++) {\n      bytes[i] = this.view.getUint8(offset + i); //this.getUint8(offset + i);\n    }\n    return bytes;\n  }\n}\n\nmodule.exports = BufferStream;\n","const Bitmap = require('./bitmap');\n\nclass Room {\n  constructor(params) {\n    this.width = params.width;\n    this.height = params.height;\n    this.numObjects = params.numObjects;\n  }\n}\n\nmodule.exports = Room;\n","\nclass Scumm {\n  constructor() {\n    \n  }\n}\n\nmodule.exports = Scumm;\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}