{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/app.js","src/bitmap.js","src/buffer_stream.js","src/room.js","src/scumm.js"],"names":[],"mappings":"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","file":"bundle.js","sourcesContent":["(function(){function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s}return e})()","const Scumm = require('./scumm');\nconst Bitmap = require('./bitmap');\nconst Room = require('./room');\nconst BufferStream = require('./buffer_stream');\n\nclass App {\n  constructor() {\n    console.log('App');\n    this.files = [];\n    this.roomNames = [];\n    this.roomOffsets = [];\n    this.roomBlockOffsets = [];\n    this.rooms = [];\n  }\n\n  decode(buffer, enc=0) {\n    let temp = new Uint8Array(buffer);\n    for (var i = 0; i < temp.length; i++) {\n      temp[i] = temp[i] ^ enc;\n    }\n    return temp.buffer;\n  }\n\n  getBlockTypeName(uint32) {\n    return String.fromCharCode(\n      (uint32 & 0xff),\n      ((uint32 >> 8) & 0xff),\n      ((uint32 >> 16) & 0xff),\n      ((uint32 >> 24) & 0xff)\n    );\n  }\n\n  parseIndexBlock(stream, offset) {\n    let type = stream.getUint32LE();\n    let size = stream.getUint32();\n\n    let name = this.getBlockTypeName(type);\n    console.log(name, size);\n\n    if (name == 'RNAM') {\n      while (1) {\n        let roomno = stream.getUint8();\n        if (roomno == 0) break;\n\n        let bytes = stream.getBytes(9);\n        this.roomNames[roomno] = bytes.reduce((accumulator, currentValue) => {\n          return accumulator + (currentValue != 0xff ? String.fromCharCode(currentValue ^ 0xff) : '');\n        }, '');\n        // offset += 10;\n      }\n      console.log(this.roomNames);\n    }\n    // else if (name == 'DROO') {\n    //   let numitems = stream.getUint16LE();\n    //   let roomNos = stream.getBytes(, numitems);\n    //\n    //   let roomOffsets = [];\n    //   for (var i = 0; i < numitems; i++) {\n    //     let offs = stream.getUint32LE();\n    //     roomOffsets[i] = offs;\n    //   }\n    // }\n    else {\n      stream.getBytes(size - 8);\n    }\n\n  }\n\n  parseIndex() {\n    if (!this.files['monkey2.000']) return;\n\n    let stream = new BufferStream(this.files['monkey2.000']);\n\n    let offset = 0;\n\n    while (offset < stream.length) {\n      let blocksize = stream.getUint32(offset + 4);\n      this.parseIndexBlock(stream, offset);\n      offset += blocksize;\n    }\n  }\n\n  // extractImage(num) {\n  //   let room = this.rooms[num];\n  //   if (!room) return;\n  //\n  //   let filename = 'monkey2.001';\n  //   if (!this.files[filename]) return;\n  //\n  //   let stream = new BufferStream(this.files[filename]);\n  //\n  //   // let offset = this.roomOffsets[num];\n  // }\n\n  getBundleStream() {\n    let filename = 'monkey2.001';\n    if (!this.files[filename]) return;\n    let stream = new BufferStream(this.files[filename]);\n    return stream;\n  }\n\n  parseRoomImage(num) {\n    let stream = this.getBundleStream();\n    let blocks = this.roomBlockOffsets[num];\n    console.log(blocks);\n    if (!blocks) return;\n    stream.seek(blocks['RMIM'].offset + 8);\n    let type = stream.getUint32LE();\n    let name = this.getBlockTypeName(type);\n    console.log(name);\n    // console.log(blocks.RMHD);\n  }\n\n  parseRoom(num) {\n    let stream = this.getBundleStream();\n    let offset = this.roomOffsets[num];\n\n    stream.seek(offset);\n\n    let type = stream.getUint32LE();\n    let size = stream.getUint32();\n    let name = this.getBlockTypeName(type);\n\n    // console.log(name);\n\n    let end = offset + size;\n\n    let blocks = {};\n\n    while (stream.offset < end) {\n      let type = stream.getUint32LE();\n      let size = stream.getUint32();\n\n      let name = this.getBlockTypeName(type);\n\n      let block = {\n        name: name,\n        size: size,\n        offset: stream.offset - 8\n      };\n\n      if (blocks[name]) {\n        if (blocks[name] instanceof Array) {\n          blocks[name].push(block);\n        } else {\n          blocks[name] = [ blocks[name], block ];\n        }\n      } else {\n        blocks[name] = block;\n      }\n\n      stream.getBytes(size - 8);\n    }\n\n    this.roomBlockOffsets[num] = blocks;\n\n    stream.seek(blocks['RMHD'].offset + 8);\n    let width = stream.getUint16LE();\n    let height = stream.getUint16LE();\n    let numObjects = stream.getUint16LE();\n\n    this.rooms[num] = new Room({ width: width, height: height, numObjects: numObjects });\n\n    console.log(num, width, height, numObjects);\n\n    this.parseRoomImage(num);\n  }\n\n  parseBundle(num) {\n    // if (!this.files[filename]) return;\n    // let stream = new BufferStream(this.files[filename]);\n    let stream = this.getBundleStream();\n\n    let type = stream.getUint32LE();\n    let size = stream.getUint32();\n    let name = this.getBlockTypeName(type);\n\n    console.log(name, size);\n\n    let offset = 8;\n\n    if (name == 'LECF') {\n      type = stream.getUint32LE();\n      size = stream.getUint32();\n      name = this.getBlockTypeName(type);\n\n      if (name == 'LOFF') {\n        let numrooms = stream.getUint8();\n        for (var i = 0; i < numrooms; i++) {\n          let room = stream.getUint8();\n          let offs = stream.getUint32LE();\n          this.roomOffsets[room] = offs;\n        }\n      }\n    }\n  }\n\n  onFileLoaded(filename) {\n    console.log('Loaded', filename, this.files[filename].byteLength);\n\n    if (filename == 'monkey2.000') {\n      this.files[filename] = this.decode(this.files[filename], 0x69);\n      this.parseIndex();\n    }\n    else if (filename == 'monkey2.001') {\n      this.files[filename] = this.decode(this.files[filename], 0x69);\n      this.parseBundle(filename);\n      this.parseRoom(2);\n    }\n  }\n\n  loadFile(file) {\n    var reader = new FileReader();\n    var filename = file.name.toLowerCase();\n\t\treader.onload = (event) => {\n      // console.log(event.target);\n      this.files[filename] = event.target.result;\n      this.onFileLoaded(filename);\n\t\t};\n\t  reader.readAsArrayBuffer(file);\n  }\n\n  onDrop(event) {\n    event.stopPropagation();\n    event.preventDefault();\n\n    var files = event.dataTransfer.files;\n    for (var i = 0; i < files.length; i++) {\n      this.loadFile(files[i]);\n    }\n\n  }\n\n  onDragEnter(event) {\n    event.stopPropagation();\n    event.preventDefault();\n  }\n\n  onDragOver(event) {\n    event.stopPropagation();\n    event.preventDefault();\n  }\n\n  handleEvent(event) {\n    if (event.type == 'drop') {\n      this.onDrop(event);\n    }\n    else if (event.type == 'dragover') {\n      this.onDragOver(event);\n    }\n    else if (event.type == 'dragenter') {\n      this.onDragEnter(event);\n    }\n  }\n\n}\n\nwindow.addEventListener('DOMContentLoaded', () => {\n  var app = new App();\n  window.addEventListener('drop', app, false);\n  window.addEventListener('dragenter', app, false);\n  window.addEventListener('dragover', app, false);\n});\n","\nclass Bitmap {\n  constructor(params) {\n    this.width = params.width;\n    this.height = params.height;\n    this.pixels = params.pixels;\n  }\n}\n\nmodule.exports = Bitmap;\n","\nclass BufferStream {\n  constructor(buffer) {\n    this.buffer = buffer;\n    this.view = new DataView(this.buffer);\n    this.offset = 0;\n  }\n\n  get length() {\n    return this.buffer.byteLength;\n  }\n\n  seek(offset=0) {\n    this.offset = offset;\n  }\n\n  getUint8(offset) {\n    if (offset == undefined) {\n      offset = this.offset;\n      this.offset++;\n    }\n    return this.view.getUint8(offset);\n  }\n\n  getUint16(offset, littleEndian=false) {\n    if (offset == undefined) {\n      offset = this.offset;\n      this.offset += 2;\n    }\n    return this.view.getUint16(offset, littleEndian);\n  }\n\n  getUint32(offset, littleEndian=false) {\n    if (offset == undefined) {\n      offset = this.offset;\n      this.offset += 4;\n    }\n    return this.view.getUint32(offset, littleEndian);\n  }\n\n  getUint16LE(offset) {\n    return this.getUint16(offset, true);\n  }\n\n  getUint32LE(offset) {\n    return this.getUint32(offset, true);\n  }\n\n  getBytes(length=1, offset) {\n    if (offset == undefined) {\n      offset = this.offset;\n      this.offset += length;\n    }\n    let bytes = new Uint8Array(length);\n    for (var i = 0; i < length; i++) {\n      bytes[i] = this.view.getUint8(offset + i); //this.getUint8(offset + i);\n    }\n    return bytes;\n  }\n}\n\nmodule.exports = BufferStream;\n","const Bitmap = require('./bitmap');\n\nclass Room {\n  constructor(params) {\n    this.width = params.width;\n    this.height = params.height;\n    this.numObjects = params.numObjects;\n  }\n}\n\nmodule.exports = Room;\n","\nclass Scumm {\n  constructor() {\n    \n  }\n}\n\nmodule.exports = Scumm;\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJzcmMvYXBwLmpzIiwic3JjL2JpdG1hcC5qcyIsInNyYy9idWZmZXJfc3RyZWFtLmpzIiwic3JjL3Jvb20uanMiLCJzcmMvc2N1bW0uanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUNBQSxNQUFNLFFBQVEsUUFBUSxTQUFSLENBQWQ7QUFDQSxNQUFNLFNBQVMsUUFBUSxVQUFSLENBQWY7QUFDQSxNQUFNLE9BQU8sUUFBUSxRQUFSLENBQWI7QUFDQSxNQUFNLGVBQWUsUUFBUSxpQkFBUixDQUFyQjs7QUFFQSxNQUFNLEdBQU4sQ0FBVTtBQUNSLGdCQUFjO0FBQ1osWUFBUSxHQUFSLENBQVksS0FBWjtBQUNBLFNBQUssS0FBTCxHQUFhLEVBQWI7QUFDQSxTQUFLLFNBQUwsR0FBaUIsRUFBakI7QUFDQSxTQUFLLFdBQUwsR0FBbUIsRUFBbkI7QUFDQSxTQUFLLGdCQUFMLEdBQXdCLEVBQXhCO0FBQ0EsU0FBSyxLQUFMLEdBQWEsRUFBYjtBQUNEOztBQUVELFNBQU8sTUFBUCxFQUFlLE1BQUksQ0FBbkIsRUFBc0I7QUFDcEIsUUFBSSxPQUFPLElBQUksVUFBSixDQUFlLE1BQWYsQ0FBWDtBQUNBLFNBQUssSUFBSSxJQUFJLENBQWIsRUFBZ0IsSUFBSSxLQUFLLE1BQXpCLEVBQWlDLEdBQWpDLEVBQXNDO0FBQ3BDLFdBQUssQ0FBTCxJQUFVLEtBQUssQ0FBTCxJQUFVLEdBQXBCO0FBQ0Q7QUFDRCxXQUFPLEtBQUssTUFBWjtBQUNEOztBQUVELG1CQUFpQixNQUFqQixFQUF5QjtBQUN2QixXQUFPLE9BQU8sWUFBUCxDQUNKLFNBQVMsSUFETCxFQUVILFVBQVUsQ0FBWCxHQUFnQixJQUZaLEVBR0gsVUFBVSxFQUFYLEdBQWlCLElBSGIsRUFJSCxVQUFVLEVBQVgsR0FBaUIsSUFKYixDQUFQO0FBTUQ7O0FBRUQsa0JBQWdCLE1BQWhCLEVBQXdCLE1BQXhCLEVBQWdDO0FBQzlCLFFB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R0FBaUIsSUFBakI7Ozs7QUNUQSxNQUFNLEtBQU4sQ0FBWTtBQUNWLGdCQUFjLENBRWI7QUFIUzs7QUFNWixPQUFPLE9BQVAsR0FBaUIsS0FBakIiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbigpe2Z1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIHMobyx1KXtpZighbltvXSl7aWYoIXRbb10pe3ZhciBhPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt2YXIgZj1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK28rXCInXCIpO3Rocm93IGYuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixmfXZhciBsPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChsLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGwsbC5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKylzKHJbb10pO3JldHVybiBzfXJldHVybiBlfSkoKSIsImNvbnN0IFNjdW1tID0gcmVxdWlyZSgnLi9zY3VtbScpO1xuY29uc3QgQml0bWFwID0gcmVxdWlyZSgnLi9iaXRtYXAnKTtcbmNvbnN0IFJvb20gPSByZXF1aXJlKCcuL3Jvb20nKTtcbmNvbnN0IEJ1ZmZlclN0cmVhbSA9IHJlcXVpcmUoJy4vYnVmZmVyX3N0cmVhbScpO1xuXG5jbGFzcyBBcHAge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBjb25zb2xlLmxvZygnQXBwJyk7XG4gICAgdGhpcy5maWxlcyA9IFtdO1xuICAgIHRoaXMucm9vbU5hbWVzID0gW107XG4gICAgdGhpcy5yb29tT2Zmc2V0cyA9IFtdO1xuICAgIHRoaXMucm9vbUJsb2NrT2Zmc2V0cyA9IFtdO1xuICAgIHRoaXMucm9vbXMgPSBbXTtcbiAgfVxuXG4gIGRlY29kZShidWZmZXIsIGVuYz0wKSB7XG4gICAgbGV0IHRlbXAgPSBuZXcgVWludDhBcnJheShidWZmZXIpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGVtcC5sZW5ndGg7IGkrKykge1xuICAgICAgdGVtcFtpXSA9IHRlbXBbaV0gXiBlbmM7XG4gICAgfVxuICAgIHJldHVybiB0ZW1wLmJ1ZmZlcjtcbiAgfVxuXG4gIGdldEJsb2NrVHlwZU5hbWUodWludDMyKSB7XG4gICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoXG4gICAgICAodWludDMyICYgMHhmZiksXG4gICAgICAoKHVpbnQzMiA+PiA4KSAmIDB4ZmYpLFxuICAgICAgKCh1aW50MzIgPj4gMTYpICYgMHhmZiksXG4gICAgICAoKHVpbnQzMiA+PiAyNCkgJiAweGZmKVxuICAgICk7XG4gIH1cblxuICBwYXJzZUluZGV4QmxvY2soc3RyZWFtLCBvZmZzZXQpIHtcbiAgICBsZXQgdHlwZSA9IHN0cmVhbS5nZXRVaW50MzJMRSgpO1xuICAgIGxldCBzaXplID0gc3RyZWFtLmdldFVpbnQzMigpO1xuXG4gICAgbGV0IG5hbWUgPSB0aGlzLmdldEJsb2NrVHlwZU5hbWUodHlwZSk7XG4gICAgY29uc29sZS5sb2cobmFtZSwgc2l6ZSk7XG5cbiAgICBpZiAobmFtZSA9PSAnUk5BTScpIHtcbiAgICAgIHdoaWxlICgxKSB7XG4gICAgICAgIGxldCByb29tbm8gPSBzdHJlYW0uZ2V0VWludDgoKTtcbiAgICAgICAgaWYgKHJvb21ubyA9PSAwKSBicmVhaztcblxuICAgICAgICBsZXQgYnl0ZXMgPSBzdHJlYW0uZ2V0Qnl0ZXMoOSk7XG4gICAgICAgIHRoaXMucm9vbU5hbWVzW3Jvb21ub10gPSBieXRlcy5yZWR1Y2UoKGFjY3VtdWxhdG9yLCBjdXJyZW50VmFsdWUpID0+IHtcbiAgICAgICAgICByZXR1cm4gYWNjdW11bGF0b3IgKyAoY3VycmVudFZhbHVlICE9IDB4ZmYgPyBTdHJpbmcuZnJvbUNoYXJDb2RlKGN1cnJlbnRWYWx1ZSBeIDB4ZmYpIDogJycpO1xuICAgICAgICB9LCAnJyk7XG4gICAgICAgIC8vIG9mZnNldCArPSAxMDtcbiAgICAgIH1cbiAgICAgIGNvbnNvbGUubG9nKHRoaXMucm9vbU5hbWVzKTtcbiAgICB9XG4gICAgLy8gZWxzZSBpZiAobmFtZSA9PSAnRFJPTycpIHtcbiAgICAvLyAgIGxldCBudW1pdGVtcyA9IHN0cmVhbS5nZXRVaW50MTZMRSgpO1xuICAgIC8vICAgbGV0IHJvb21Ob3MgPSBzdHJlYW0uZ2V0Qnl0ZXMoLCBudW1pdGVtcyk7XG4gICAgLy9cbiAgICAvLyAgIGxldCByb29tT2Zmc2V0cyA9IFtdO1xuICAgIC8vICAgZm9yICh2YXIgaSA9IDA7IGkgPCBudW1pdGVtczsgaSsrKSB7XG4gICAgLy8gICAgIGxldCBvZmZzID0gc3RyZWFtLmdldFVpbnQzMkxFKCk7XG4gICAgLy8gICAgIHJvb21PZmZzZXRzW2ldID0gb2ZmcztcbiAgICAvLyAgIH1cbiAgICAvLyB9XG4gICAgZWxzZSB7XG4gICAgICBzdHJlYW0uZ2V0Qnl0ZXMoc2l6ZSAtIDgpO1xuICAgIH1cblxuICB9XG5cbiAgcGFyc2VJbmRleCgpIHtcbiAgICBpZiAoIXRoaXMuZmlsZXNbJ21vbmtleTIuMDAwJ10pIHJldHVybjtcblxuICAgIGxldCBzdHJlYW0gPSBuZXcgQnVmZmVyU3RyZWFtKHRoaXMuZmlsZXNbJ21vbmtleTIuMDAwJ10pO1xuXG4gICAgbGV0IG9mZnNldCA9IDA7XG5cbiAgICB3aGlsZSAob2Zmc2V0IDwgc3RyZWFtLmxlbmd0aCkge1xuICAgICAgbGV0IGJsb2Nrc2l6ZSA9IHN0cmVhbS5nZXRVaW50MzIob2Zmc2V0ICsgNCk7XG4gICAgICB0aGlzLnBhcnNlSW5kZXhCbG9jayhzdHJlYW0sIG9mZnNldCk7XG4gICAgICBvZmZzZXQgKz0gYmxvY2tzaXplO1xuICAgIH1cbiAgfVxuXG4gIC8vIGV4dHJhY3RJbWFnZShudW0pIHtcbiAgLy8gICBsZXQgcm9vbSA9IHRoaXMucm9vbXNbbnVtXTtcbiAgLy8gICBpZiAoIXJvb20pIHJldHVybjtcbiAgLy9cbiAgLy8gICBsZXQgZmlsZW5hbWUgPSAnbW9ua2V5Mi4wMDEnO1xuICAvLyAgIGlmICghdGhpcy5maWxlc1tmaWxlbmFtZV0pIHJldHVybjtcbiAgLy9cbiAgLy8gICBsZXQgc3RyZWFtID0gbmV3IEJ1ZmZlclN0cmVhbSh0aGlzLmZpbGVzW2ZpbGVuYW1lXSk7XG4gIC8vXG4gIC8vICAgLy8gbGV0IG9mZnNldCA9IHRoaXMucm9vbU9mZnNldHNbbnVtXTtcbiAgLy8gfVxuXG4gIGdldEJ1bmRsZVN0cmVhbSgpIHtcbiAgICBsZXQgZmlsZW5hbWUgPSAnbW9ua2V5Mi4wMDEnO1xuICAgIGlmICghdGhpcy5maWxlc1tmaWxlbmFtZV0pIHJldHVybjtcbiAgICBsZXQgc3RyZWFtID0gbmV3IEJ1ZmZlclN0cmVhbSh0aGlzLmZpbGVzW2ZpbGVuYW1lXSk7XG4gICAgcmV0dXJuIHN0cmVhbTtcbiAgfVxuXG4gIHBhcnNlUm9vbUltYWdlKG51bSkge1xuICAgIGxldCBzdHJlYW0gPSB0aGlzLmdldEJ1bmRsZVN0cmVhbSgpO1xuICAgIGxldCBibG9ja3MgPSB0aGlzLnJvb21CbG9ja09mZnNldHNbbnVtXTtcbiAgICBjb25zb2xlLmxvZyhibG9ja3MpO1xuICAgIGlmICghYmxvY2tzKSByZXR1cm47XG4gICAgc3RyZWFtLnNlZWsoYmxvY2tzWydSTUlNJ10ub2Zmc2V0ICsgOCk7XG4gICAgbGV0IHR5cGUgPSBzdHJlYW0uZ2V0VWludDMyTEUoKTtcbiAgICBsZXQgbmFtZSA9IHRoaXMuZ2V0QmxvY2tUeXBlTmFtZSh0eXBlKTtcbiAgICBjb25zb2xlLmxvZyhuYW1lKTtcbiAgICAvLyBjb25zb2xlLmxvZyhibG9ja3MuUk1IRCk7XG4gIH1cblxuICBwYXJzZVJvb20obnVtKSB7XG4gICAgbGV0IHN0cmVhbSA9IHRoaXMuZ2V0QnVuZGxlU3RyZWFtKCk7XG4gICAgbGV0IG9mZnNldCA9IHRoaXMucm9vbU9mZnNldHNbbnVtXTtcblxuICAgIHN0cmVhbS5zZWVrKG9mZnNldCk7XG5cbiAgICBsZXQgdHlwZSA9IHN0cmVhbS5nZXRVaW50MzJMRSgpO1xuICAgIGxldCBzaXplID0gc3RyZWFtLmdldFVpbnQzMigpO1xuICAgIGxldCBuYW1lID0gdGhpcy5nZXRCbG9ja1R5cGVOYW1lKHR5cGUpO1xuXG4gICAgLy8gY29uc29sZS5sb2cobmFtZSk7XG5cbiAgICBsZXQgZW5kID0gb2Zmc2V0ICsgc2l6ZTtcblxuICAgIGxldCBibG9ja3MgPSB7fTtcblxuICAgIHdoaWxlIChzdHJlYW0ub2Zmc2V0IDwgZW5kKSB7XG4gICAgICBsZXQgdHlwZSA9IHN0cmVhbS5nZXRVaW50MzJMRSgpO1xuICAgICAgbGV0IHNpemUgPSBzdHJlYW0uZ2V0VWludDMyKCk7XG5cbiAgICAgIGxldCBuYW1lID0gdGhpcy5nZXRCbG9ja1R5cGVOYW1lKHR5cGUpO1xuXG4gICAgICBsZXQgYmxvY2sgPSB7XG4gICAgICAgIG5hbWU6IG5hbWUsXG4gICAgICAgIHNpemU6IHNpemUsXG4gICAgICAgIG9mZnNldDogc3RyZWFtLm9mZnNldCAtIDhcbiAgICAgIH07XG5cbiAgICAgIGlmIChibG9ja3NbbmFtZV0pIHtcbiAgICAgICAgaWYgKGJsb2Nrc1tuYW1lXSBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICAgICAgYmxvY2tzW25hbWVdLnB1c2goYmxvY2spO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGJsb2Nrc1tuYW1lXSA9IFsgYmxvY2tzW25hbWVdLCBibG9jayBdO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBibG9ja3NbbmFtZV0gPSBibG9jaztcbiAgICAgIH1cblxuICAgICAgc3RyZWFtLmdldEJ5dGVzKHNpemUgLSA4KTtcbiAgICB9XG5cbiAgICB0aGlzLnJvb21CbG9ja09mZnNldHNbbnVtXSA9IGJsb2NrcztcblxuICAgIHN0cmVhbS5zZWVrKGJsb2Nrc1snUk1IRCddLm9mZnNldCArIDgpO1xuICAgIGxldCB3aWR0aCA9IHN0cmVhbS5nZXRVaW50MTZMRSgpO1xuICAgIGxldCBoZWlnaHQgPSBzdHJlYW0uZ2V0VWludDE2TEUoKTtcbiAgICBsZXQgbnVtT2JqZWN0cyA9IHN0cmVhbS5nZXRVaW50MTZMRSgpO1xuXG4gICAgdGhpcy5yb29tc1tudW1dID0gbmV3IFJvb20oeyB3aWR0aDogd2lkdGgsIGhlaWdodDogaGVpZ2h0LCBudW1PYmplY3RzOiBudW1PYmplY3RzIH0pO1xuXG4gICAgY29uc29sZS5sb2cobnVtLCB3aWR0aCwgaGVpZ2h0LCBudW1PYmplY3RzKTtcblxuICAgIHRoaXMucGFyc2VSb29tSW1hZ2UobnVtKTtcbiAgfVxuXG4gIHBhcnNlQnVuZGxlKG51bSkge1xuICAgIC8vIGlmICghdGhpcy5maWxlc1tmaWxlbmFtZV0pIHJldHVybjtcbiAgICAvLyBsZXQgc3RyZWFtID0gbmV3IEJ1ZmZlclN0cmVhbSh0aGlzLmZpbGVzW2ZpbGVuYW1lXSk7XG4gICAgbGV0IHN0cmVhbSA9IHRoaXMuZ2V0QnVuZGxlU3RyZWFtKCk7XG5cbiAgICBsZXQgdHlwZSA9IHN0cmVhbS5nZXRVaW50MzJMRSgpO1xuICAgIGxldCBzaXplID0gc3RyZWFtLmdldFVpbnQzMigpO1xuICAgIGxldCBuYW1lID0gdGhpcy5nZXRCbG9ja1R5cGVOYW1lKHR5cGUpO1xuXG4gICAgY29uc29sZS5sb2cobmFtZSwgc2l6ZSk7XG5cbiAgICBsZXQgb2Zmc2V0ID0gODtcblxuICAgIGlmIChuYW1lID09ICdMRUNGJykge1xuICAgICAgdHlwZSA9IHN0cmVhbS5nZXRVaW50MzJMRSgpO1xuICAgICAgc2l6ZSA9IHN0cmVhbS5nZXRVaW50MzIoKTtcbiAgICAgIG5hbWUgPSB0aGlzLmdldEJsb2NrVHlwZU5hbWUodHlwZSk7XG5cbiAgICAgIGlmIChuYW1lID09ICdMT0ZGJykge1xuICAgICAgICBsZXQgbnVtcm9vbXMgPSBzdHJlYW0uZ2V0VWludDgoKTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBudW1yb29tczsgaSsrKSB7XG4gICAgICAgICAgbGV0IHJvb20gPSBzdHJlYW0uZ2V0VWludDgoKTtcbiAgICAgICAgICBsZXQgb2ZmcyA9IHN0cmVhbS5nZXRVaW50MzJMRSgpO1xuICAgICAgICAgIHRoaXMucm9vbU9mZnNldHNbcm9vbV0gPSBvZmZzO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgb25GaWxlTG9hZGVkKGZpbGVuYW1lKSB7XG4gICAgY29uc29sZS5sb2coJ0xvYWRlZCcsIGZpbGVuYW1lLCB0aGlzLmZpbGVzW2ZpbGVuYW1lXS5ieXRlTGVuZ3RoKTtcblxuICAgIGlmIChmaWxlbmFtZSA9PSAnbW9ua2V5Mi4wMDAnKSB7XG4gICAgICB0aGlzLmZpbGVzW2ZpbGVuYW1lXSA9IHRoaXMuZGVjb2RlKHRoaXMuZmlsZXNbZmlsZW5hbWVdLCAweDY5KTtcbiAgICAgIHRoaXMucGFyc2VJbmRleCgpO1xuICAgIH1cbiAgICBlbHNlIGlmIChmaWxlbmFtZSA9PSAnbW9ua2V5Mi4wMDEnKSB7XG4gICAgICB0aGlzLmZpbGVzW2ZpbGVuYW1lXSA9IHRoaXMuZGVjb2RlKHRoaXMuZmlsZXNbZmlsZW5hbWVdLCAweDY5KTtcbiAgICAgIHRoaXMucGFyc2VCdW5kbGUoZmlsZW5hbWUpO1xuICAgICAgdGhpcy5wYXJzZVJvb20oMik7XG4gICAgfVxuICB9XG5cbiAgbG9hZEZpbGUoZmlsZSkge1xuICAgIHZhciByZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpO1xuICAgIHZhciBmaWxlbmFtZSA9IGZpbGUubmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdHJlYWRlci5vbmxvYWQgPSAoZXZlbnQpID0+IHtcbiAgICAgIC8vIGNvbnNvbGUubG9nKGV2ZW50LnRhcmdldCk7XG4gICAgICB0aGlzLmZpbGVzW2ZpbGVuYW1lXSA9IGV2ZW50LnRhcmdldC5yZXN1bHQ7XG4gICAgICB0aGlzLm9uRmlsZUxvYWRlZChmaWxlbmFtZSk7XG5cdFx0fTtcblx0ICByZWFkZXIucmVhZEFzQXJyYXlCdWZmZXIoZmlsZSk7XG4gIH1cblxuICBvbkRyb3AoZXZlbnQpIHtcbiAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgdmFyIGZpbGVzID0gZXZlbnQuZGF0YVRyYW5zZmVyLmZpbGVzO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZmlsZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoaXMubG9hZEZpbGUoZmlsZXNbaV0pO1xuICAgIH1cblxuICB9XG5cbiAgb25EcmFnRW50ZXIoZXZlbnQpIHtcbiAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICB9XG5cbiAgb25EcmFnT3ZlcihldmVudCkge1xuICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gIH1cblxuICBoYW5kbGVFdmVudChldmVudCkge1xuICAgIGlmIChldmVudC50eXBlID09ICdkcm9wJykge1xuICAgICAgdGhpcy5vbkRyb3AoZXZlbnQpO1xuICAgIH1cbiAgICBlbHNlIGlmIChldmVudC50eXBlID09ICdkcmFnb3ZlcicpIHtcbiAgICAgIHRoaXMub25EcmFnT3ZlcihldmVudCk7XG4gICAgfVxuICAgIGVsc2UgaWYgKGV2ZW50LnR5cGUgPT0gJ2RyYWdlbnRlcicpIHtcbiAgICAgIHRoaXMub25EcmFnRW50ZXIoZXZlbnQpO1xuICAgIH1cbiAgfVxuXG59XG5cbndpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgKCkgPT4ge1xuICB2YXIgYXBwID0gbmV3IEFwcCgpO1xuICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignZHJvcCcsIGFwcCwgZmFsc2UpO1xuICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignZHJhZ2VudGVyJywgYXBwLCBmYWxzZSk7XG4gIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdkcmFnb3ZlcicsIGFwcCwgZmFsc2UpO1xufSk7XG4iLCJcbmNsYXNzIEJpdG1hcCB7XG4gIGNvbnN0cnVjdG9yKHBhcmFtcykge1xuICAgIHRoaXMud2lkdGggPSBwYXJhbXMud2lkdGg7XG4gICAgdGhpcy5oZWlnaHQgPSBwYXJhbXMuaGVpZ2h0O1xuICAgIHRoaXMucGl4ZWxzID0gcGFyYW1zLnBpeGVscztcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEJpdG1hcDtcbiIsIlxuY2xhc3MgQnVmZmVyU3RyZWFtIHtcbiAgY29uc3RydWN0b3IoYnVmZmVyKSB7XG4gICAgdGhpcy5idWZmZXIgPSBidWZmZXI7XG4gICAgdGhpcy52aWV3ID0gbmV3IERhdGFWaWV3KHRoaXMuYnVmZmVyKTtcbiAgICB0aGlzLm9mZnNldCA9IDA7XG4gIH1cblxuICBnZXQgbGVuZ3RoKCkge1xuICAgIHJldHVybiB0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoO1xuICB9XG5cbiAgc2VlayhvZmZzZXQ9MCkge1xuICAgIHRoaXMub2Zmc2V0ID0gb2Zmc2V0O1xuICB9XG5cbiAgZ2V0VWludDgob2Zmc2V0KSB7XG4gICAgaWYgKG9mZnNldCA9PSB1bmRlZmluZWQpIHtcbiAgICAgIG9mZnNldCA9IHRoaXMub2Zmc2V0O1xuICAgICAgdGhpcy5vZmZzZXQrKztcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMudmlldy5nZXRVaW50OChvZmZzZXQpO1xuICB9XG5cbiAgZ2V0VWludDE2KG9mZnNldCwgbGl0dGxlRW5kaWFuPWZhbHNlKSB7XG4gICAgaWYgKG9mZnNldCA9PSB1bmRlZmluZWQpIHtcbiAgICAgIG9mZnNldCA9IHRoaXMub2Zmc2V0O1xuICAgICAgdGhpcy5vZmZzZXQgKz0gMjtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMudmlldy5nZXRVaW50MTYob2Zmc2V0LCBsaXR0bGVFbmRpYW4pO1xuICB9XG5cbiAgZ2V0VWludDMyKG9mZnNldCwgbGl0dGxlRW5kaWFuPWZhbHNlKSB7XG4gICAgaWYgKG9mZnNldCA9PSB1bmRlZmluZWQpIHtcbiAgICAgIG9mZnNldCA9IHRoaXMub2Zmc2V0O1xuICAgICAgdGhpcy5vZmZzZXQgKz0gNDtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMudmlldy5nZXRVaW50MzIob2Zmc2V0LCBsaXR0bGVFbmRpYW4pO1xuICB9XG5cbiAgZ2V0VWludDE2TEUob2Zmc2V0KSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0VWludDE2KG9mZnNldCwgdHJ1ZSk7XG4gIH1cblxuICBnZXRVaW50MzJMRShvZmZzZXQpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRVaW50MzIob2Zmc2V0LCB0cnVlKTtcbiAgfVxuXG4gIGdldEJ5dGVzKGxlbmd0aD0xLCBvZmZzZXQpIHtcbiAgICBpZiAob2Zmc2V0ID09IHVuZGVmaW5lZCkge1xuICAgICAgb2Zmc2V0ID0gdGhpcy5vZmZzZXQ7XG4gICAgICB0aGlzLm9mZnNldCArPSBsZW5ndGg7XG4gICAgfVxuICAgIGxldCBieXRlcyA9IG5ldyBVaW50OEFycmF5KGxlbmd0aCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgYnl0ZXNbaV0gPSB0aGlzLnZpZXcuZ2V0VWludDgob2Zmc2V0ICsgaSk7IC8vdGhpcy5nZXRVaW50OChvZmZzZXQgKyBpKTtcbiAgICB9XG4gICAgcmV0dXJuIGJ5dGVzO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gQnVmZmVyU3RyZWFtO1xuIiwiY29uc3QgQml0bWFwID0gcmVxdWlyZSgnLi9iaXRtYXAnKTtcblxuY2xhc3MgUm9vbSB7XG4gIGNvbnN0cnVjdG9yKHBhcmFtcykge1xuICAgIHRoaXMud2lkdGggPSBwYXJhbXMud2lkdGg7XG4gICAgdGhpcy5oZWlnaHQgPSBwYXJhbXMuaGVpZ2h0O1xuICAgIHRoaXMubnVtT2JqZWN0cyA9IHBhcmFtcy5udW1PYmplY3RzO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gUm9vbTtcbiIsIlxuY2xhc3MgU2N1bW0ge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFNjdW1tO1xuIl19"}