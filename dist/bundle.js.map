{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/app.js","src/bitmap.js","src/buffer_stream.js","src/room.js","src/scumm.js"],"names":[],"mappings":"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","file":"bundle.js","sourcesContent":["(function(){function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s}return e})()","const Scumm = require('./scumm');\nconst Bitmap = require('./bitmap');\nconst Room = require('./room');\nconst BufferStream = require('./buffer_stream');\n\nclass App {\n  constructor() {\n    console.log('App');\n    this.files = [];\n    this.roomNames = [];\n    this.roomOffsets = [];\n    this.roomBlockOffsets = [];\n    this.rooms = [];\n  }\n\n  decode(buffer, enc=0) {\n    let temp = new Uint8Array(buffer);\n    for (var i = 0; i < temp.length; i++) {\n      temp[i] = temp[i] ^ enc;\n    }\n    return temp.buffer;\n  }\n\n  getBlockTypeName(uint32) {\n    return String.fromCharCode(\n      (uint32 & 0xff),\n      ((uint32 >> 8) & 0xff),\n      ((uint32 >> 16) & 0xff),\n      ((uint32 >> 24) & 0xff)\n    );\n  }\n\n  parseIndexBlock(stream, offset) {\n    let type = stream.getUint32LE();\n    let size = stream.getUint32();\n\n    let name = this.getBlockTypeName(type);\n    console.log(name, size);\n\n    if (name == 'RNAM') {\n      while (1) {\n        let roomno = stream.getUint8();\n        if (roomno == 0) break;\n\n        let bytes = stream.getBytes(9);\n        this.roomNames[roomno] = bytes.reduce((accumulator, currentValue) => {\n          return accumulator + (currentValue != 0xff ? String.fromCharCode(currentValue ^ 0xff) : '');\n        }, '');\n        // offset += 10;\n      }\n      console.log(this.roomNames);\n    }\n    // else if (name == 'DROO') {\n    //   let numitems = stream.getUint16LE();\n    //   let roomNos = stream.getBytes(, numitems);\n    //\n    //   let roomOffsets = [];\n    //   for (var i = 0; i < numitems; i++) {\n    //     let offs = stream.getUint32LE();\n    //     roomOffsets[i] = offs;\n    //   }\n    // }\n    else {\n      stream.getBytes(size - 8);\n    }\n\n  }\n\n  parseIndex() {\n    if (!this.files['monkey2.000']) return;\n\n    let stream = new BufferStream(this.files['monkey2.000']);\n\n    let offset = 0;\n\n    while (offset < stream.length) {\n      let blocksize = stream.getUint32(offset + 4);\n      this.parseIndexBlock(stream, offset);\n      offset += blocksize;\n    }\n  }\n\n  getBundleStream() {\n    let filename = 'monkey2.001';\n    if (!this.files[filename]) return;\n    let stream = new BufferStream(this.files[filename]);\n    return stream;\n  }\n\n  readBlockHead(stream) {\n    let type = stream.getUint32LE();\n    let size = stream.getUint32();\n    let name = this.getBlockTypeName(type);\n    return { name: name, type: type, size: size };\n  }\n\n  parseRoomImage(num) {\n    let room = this.rooms[num];\n    if (!room) return;\n\n    let stream = this.getBundleStream();\n    if (!stream) return;\n\n    let blocks = this.roomBlockOffsets[num];\n    if (!blocks) return;\n\n    stream.seek(blocks['RMIM'].offset + 8);\n\n    let block = this.readBlockHead(stream);\n    let numzbuf = stream.getUint16LE();\n\n    console.log(block.name, block.size, numzbuf);\n\n    if (block.name == 'RMIH') {\n      let block = this.readBlockHead(stream);\n\n      if (block.name == 'IM00') {\n        let block = this.readBlockHead(stream);\n\n        if (block.name == 'SMAP') {\n          for (var i = 0; i < room.width / 8; i++) {\n            let offs = stream.getUint32LE();\n            console.log(i, offs);\n          }\n        }\n      }\n    }\n  }\n\n  parseRoom(num) {\n    let stream = this.getBundleStream();\n    let offset = this.roomOffsets[num];\n\n    stream.seek(offset);\n\n    let block = this.readBlockHead(stream);\n\n    let end = offset + block.size;\n\n    let blocks = {};\n\n    while (stream.offset < end) {\n      let block = this.readBlockHead(stream);\n\n      let info = {\n        name: block.name,\n        size: block.size,\n        offset: stream.offset - 8\n      };\n\n      if (blocks[block.name]) {\n        if (blocks[block.name] instanceof Array) {\n          blocks[block.name].push(info);\n        } else {\n          blocks[block.name] = [ blocks[block.name], info ];\n        }\n      } else {\n        blocks[block.name] = info;\n      }\n\n      stream.getBytes(block.size - 8);\n    }\n\n    this.roomBlockOffsets[num] = blocks;\n\n    stream.seek(blocks['RMHD'].offset + 8);\n    let width = stream.getUint16LE();\n    let height = stream.getUint16LE();\n    let numObjects = stream.getUint16LE();\n\n    this.rooms[num] = new Room({ width: width, height: height, numObjects: numObjects });\n\n    console.log(num, width, height, numObjects);\n\n    this.parseRoomImage(num);\n  }\n\n  parseBundle(num) {\n    let stream = this.getBundleStream();\n\n    // let type = stream.getUint32LE();\n    // let size = stream.getUint32();\n    // let name = this.getBlockTypeName(type);\n    let block = this.readBlockHead(stream);\n\n    console.log(block);\n\n    let offset = 8;\n\n    if (block.name == 'LECF') {\n      let block = this.readBlockHead(stream);\n\n      if (block.name == 'LOFF') {\n        let numrooms = stream.getUint8();\n        for (var i = 0; i < numrooms; i++) {\n          let room = stream.getUint8();\n          let offs = stream.getUint32LE();\n          this.roomOffsets[room] = offs;\n        }\n      }\n    }\n  }\n\n  onFileLoaded(filename) {\n    console.log('Loaded', filename, this.files[filename].byteLength);\n\n    if (filename == 'monkey2.000') {\n      this.files[filename] = this.decode(this.files[filename], 0x69);\n      this.parseIndex();\n    }\n    else if (filename == 'monkey2.001') {\n      this.files[filename] = this.decode(this.files[filename], 0x69);\n      this.parseBundle(filename);\n      this.parseRoom(2);\n    }\n  }\n\n  loadFile(file) {\n    var reader = new FileReader();\n    var filename = file.name.toLowerCase();\n\t\treader.onload = (event) => {\n      // console.log(event.target);\n      this.files[filename] = event.target.result;\n      this.onFileLoaded(filename);\n\t\t};\n\t  reader.readAsArrayBuffer(file);\n  }\n\n  onDrop(event) {\n    event.stopPropagation();\n    event.preventDefault();\n\n    var files = event.dataTransfer.files;\n    for (var i = 0; i < files.length; i++) {\n      this.loadFile(files[i]);\n    }\n  }\n\n  onDragEnter(event) {\n    event.stopPropagation();\n    event.preventDefault();\n  }\n\n  onDragOver(event) {\n    event.stopPropagation();\n    event.preventDefault();\n  }\n\n  handleEvent(event) {\n    if (event.type == 'drop') {\n      this.onDrop(event);\n    }\n    else if (event.type == 'dragover') {\n      this.onDragOver(event);\n    }\n    else if (event.type == 'dragenter') {\n      this.onDragEnter(event);\n    }\n  }\n\n}\n\nwindow.addEventListener('DOMContentLoaded', () => {\n  var app = new App();\n  window.addEventListener('drop', app, false);\n  window.addEventListener('dragenter', app, false);\n  window.addEventListener('dragover', app, false);\n});\n","\nclass Bitmap {\n  constructor(params) {\n    this.width = params.width;\n    this.height = params.height;\n    this.pixels = params.pixels;\n  }\n}\n\nmodule.exports = Bitmap;\n","\nclass BufferStream {\n  constructor(buffer) {\n    this.buffer = buffer;\n    this.view = new DataView(this.buffer);\n    this.offset = 0;\n  }\n\n  get length() {\n    return this.buffer.byteLength;\n  }\n\n  seek(offset=0) {\n    this.offset = offset;\n  }\n\n  getUint8(offset) {\n    if (offset == undefined) {\n      offset = this.offset;\n      this.offset++;\n    }\n    return this.view.getUint8(offset);\n  }\n\n  getUint16(offset, littleEndian=false) {\n    if (offset == undefined) {\n      offset = this.offset;\n      this.offset += 2;\n    }\n    return this.view.getUint16(offset, littleEndian);\n  }\n\n  getUint32(offset, littleEndian=false) {\n    if (offset == undefined) {\n      offset = this.offset;\n      this.offset += 4;\n    }\n    return this.view.getUint32(offset, littleEndian);\n  }\n\n  getUint16LE(offset) {\n    return this.getUint16(offset, true);\n  }\n\n  getUint32LE(offset) {\n    return this.getUint32(offset, true);\n  }\n\n  getBytes(length=1, offset) {\n    if (offset == undefined) {\n      offset = this.offset;\n      this.offset += length;\n    }\n    let bytes = new Uint8Array(length);\n    for (var i = 0; i < length; i++) {\n      bytes[i] = this.view.getUint8(offset + i); //this.getUint8(offset + i);\n    }\n    return bytes;\n  }\n}\n\nmodule.exports = BufferStream;\n","const Bitmap = require('./bitmap');\n\nclass Room {\n  constructor(params) {\n    this.width = params.width;\n    this.height = params.height;\n    this.numObjects = params.numObjects;\n  }\n}\n\nmodule.exports = Room;\n","\nclass Scumm {\n  constructor() {\n    \n  }\n}\n\nmodule.exports = Scumm;\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}