{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/app.js","src/bit_stream.js","src/bitmap.js","src/buffer_stream.js","src/room.js","src/scumm.js"],"names":[],"mappings":"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","file":"bundle.js","sourcesContent":["(function(){function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s}return e})()","const Scumm = require('./scumm');\nconst Bitmap = require('./bitmap');\nconst Room = require('./room');\nconst BufferStream = require('./buffer_stream');\nconst BitStream = require('./bit_stream');\n\nconst INDEX_FILE = 'monkey2.000';\nconst BUNDLE_FILE = 'monkey2.001';\n// const INDEX_FILE = 'mi2demo.000';\n// const BUNDLE_FILE = 'mi2demo.001';\n\nclass App {\n  constructor() {\n    console.log('App');\n\n    this.files = [];\n    this.roomNames = [];\n    this.roomOffsets = [];\n    this.roomBlockOffsets = [];\n    this.rooms = [];\n\n    let canvas = document.createElement('canvas');\n    canvas.width = 320;\n    canvas.height = 200;\n    canvas.style.backgroundColor = 'lightgray';\n    document.body.appendChild(canvas);\n\n    this.canvas = canvas;\n\n    this.initEventListeners();\n  }\n\n  decode(buffer, enc=0) {\n    let temp = new Uint8Array(buffer);\n    for (var i = 0; i < temp.length; i++) {\n      temp[i] = temp[i] ^ enc;\n    }\n    return temp.buffer;\n  }\n\n  getBlockTypeName(uint32) {\n    return String.fromCharCode(\n      (uint32 & 0xff),\n      ((uint32 >> 8) & 0xff),\n      ((uint32 >> 16) & 0xff),\n      ((uint32 >> 24) & 0xff)\n    );\n  }\n\n  parseIndex() {\n    if (!this.files[INDEX_FILE]) return;\n    let stream = new BufferStream(this.files[INDEX_FILE]);\n\n    while (stream.offset < stream.length) {\n      let type = stream.getUint32LE();\n      let size = stream.getUint32();\n      let name = this.getBlockTypeName(type);\n\n      if (name == 'RNAM') { // Room names table\n        while (1) {\n          let roomno = stream.getUint8();\n          if (roomno == 0) break;\n\n          let bytes = stream.getBytes(9);\n          this.roomNames[roomno] = bytes.reduce((accumulator, currentValue) => {\n            return accumulator + (currentValue != 0xff ? String.fromCharCode(currentValue ^ 0xff) : '');\n          }, '');\n        }\n        console.log(this.roomNames);\n      // }\n      // else if (name == 'DROO') {\n      //   let numitems = stream.getUint16LE();\n      //   let roomNos = stream.getBytes(, numitems);\n      //\n      //   let roomOffsets = [];\n      //   for (var i = 0; i < numitems; i++) {\n      //     let offs = stream.getUint32LE();\n      //     roomOffsets[i] = offs;\n      //   }\n      } else {\n        stream.getBytes(size - 8);\n      }\n    }\n  }\n\n  getBundleStream() {\n    let filename = BUNDLE_FILE;\n    if (!this.files[filename]) return;\n    let stream = new BufferStream(this.files[filename]);\n    return stream;\n  }\n\n  readBlockHead(stream) {\n    let type = stream.getUint32LE();\n    let size = stream.getUint32();\n    let name = this.getBlockTypeName(type);\n    return { name: name, type: type, size: size };\n  }\n\n  // makeRGBA(palette, index) {\n  //   let offs = index * 3;\n  //   let rgba = palette[offs] << 24 | palette[offs + 2] << 16 | palette[offs + 3] << 8 | 255;\n  //   return rgba;\n  // }\n\n  decompressStrip(stream, width, height) {\n    console.log('decoding...', width, height);\n\n    let pixels = new Uint8Array(width * height);\n    let offset = 0;\n\n    let code = stream.getUint8();\n    let shift = code % 10;\n    // let mask = 0xff >> (8 - shift);\n\n    let color = stream.getUint8();\n\n    let bitstream = new BitStream(stream);\n\n    if (code >= 0x40 && code <= 0x44) {\n      console.log('Method B Horizontal', code, shift);\n      console.log('Color', color, '[', this.palette[color*3], this.palette[color*3+1], this.palette[color*3+2], ']');\n\n      //scab-isl\n      //01010100[4]01101110[3]11011010[2]00110100[1]01001101[0]\n\n      let s = '';\n      for (var i = 0; i < 4; i++) {\n        let b = bitstream.read(8);\n        console.log(b.toString(2).padStart(8, '0'));\n      }\n\n      // let bit;\n      // // let bits = stream.getUint8();\n      //\n      // while (offset < 8) {\n      //   pixels[offset++] = color;\n      //\n      //   bit = bitstream.read();\n      //\n      //   if (bit) {\n      //     bit = bitstream.read();\n      //     if (bit) { // command\n      //       // color\n      //       let c = bitstream.read(3);\n      //       console.log('command', c.toString(2));\n      //       if (c >= 0 && c <= 3) {\n      //         color += 4 - c;\n      //       }\n      //       else if (c == 4) {\n      //         let run = bitstream.read(8);\n      //         console.log('run', run);\n      //         for (var i = 0; i < run; i++) {\n      //           pixels[offset++] = color;\n      //         }\n      //       }\n      //       else if (c >= 5 && c <= 7) {\n      //         color -= c - 4;\n      //       }\n      //     } else { // read a palette index\n      //       color = bitstream.read(shift);\n      //       console.log('new index', color);\n      //     }\n      //   }\n      //   else { // draw pixel\n      //     console.log('draw', color);\n      //     pixels[offset++] = color;\n      //   }\n      // }\n    }\n\n    return pixels;\n  }\n\n  drawStrip(pixels, pos, width, height) {\n    console.log('drawStrip', pos, width, height);\n    let ctx = this.canvas.getContext('2d');\n    let imageData = ctx.getImageData(pos, 0, width, height);\n    for (var y = 0; y < height; y++) {\n      for (var x = 0; x < width; x++) {\n        let index = y * width + x;\n        let color = pixels[index];\n        imageData.data[index * 4 + 0] = this.palette[color * 3 + 0];\n        imageData.data[index * 4 + 1] = this.palette[color * 3 + 1];\n        imageData.data[index * 4 + 2] = this.palette[color * 3 + 2];\n        imageData.data[index * 4 + 3] = 255;\n      }\n    }\n    ctx.putImageData(imageData, pos, 0);\n    ctx.imageSmoothingEnabled = false;\n    ctx.drawImage(this.canvas, 0, 0, 320*4, 200*4);\n  }\n\n  parseRoom(num) {\n    console.log('Parsing room', num, '...');\n    let stream = this.getBundleStream();\n    let offset = this.roomOffsets[num];\n\n    stream.seek(offset);\n\n    // Read and store the block offsets RMHD, CLUT etc\n\n    let block = this.readBlockHead(stream);\n    let end = offset + block.size;\n    let blocks = {};\n\n    while (stream.offset < end) {\n      let block = this.readBlockHead(stream);\n\n      let info = {\n        name: block.name,\n        size: block.size,\n        offset: stream.offset - 8\n      };\n\n      if (blocks[block.name]) {\n        if (blocks[block.name] instanceof Array) {\n          blocks[block.name].push(info);\n        } else {\n          blocks[block.name] = [ blocks[block.name], info ];\n        }\n      } else {\n        blocks[block.name] = info;\n      }\n\n      stream.getBytes(block.size - 8);\n    }\n\n    console.log(blocks);\n\n    this.roomBlockOffsets[num] = blocks;\n\n    // Read header data - width, height etc\n\n    stream.seek(blocks['RMHD'].offset + 8);\n    let width = stream.getUint16LE();\n    let height = stream.getUint16LE();\n    let numObjects = stream.getUint16LE();\n\n    console.log(this.roomNames[num], width, height, numObjects);\n\n    let room = new Room({ width: width, height: height, numObjects: numObjects });\n\n    // Read palette entries\n\n    if (blocks['CLUT']) {\n      stream.seek(blocks['CLUT'].offset + 8);\n\n      room.palette = [];\n      for (var i = 0; i < 256; i++) {\n        let r = stream.getUint8();\n        let g = stream.getUint8();\n        let b = stream.getUint8();\n        room.palette.push(r, g, b);\n      }\n\n      this.palette = room.palette;\n    }\n\n    // Decode background image\n\n    if (blocks['RMIM']) {\n      stream.seek(blocks['RMIM'].offset + 8);\n\n      let block = this.readBlockHead(stream);\n      let numzbuf = stream.getUint16LE();\n\n      if (block.name == 'RMIH') {\n        let block = this.readBlockHead(stream);\n\n        if (block.name == 'IM00') {\n          let SMAPoffs = stream.offset;\n          let block = this.readBlockHead(stream);\n          if (block.name == 'SMAP') {\n            let offsets = [];\n            for (var i = 0; i < room.width / 8; i++) {\n              let offs = stream.getUint32LE();\n              offsets.push(offs);\n            }\n            console.log('offsets', offsets[0], offsets[1]);\n            let pixels = this.decompressStrip(stream, 8, room.height);\n            this.drawStrip(pixels, 0, 8, room.height);\n          }\n        }\n      }\n    }\n\n    this.rooms[num] = room;\n  }\n\n  parseBundle(num) {\n    let stream = this.getBundleStream();\n    let block = this.readBlockHead(stream);\n\n    let offset = 8;\n\n    if (block.name == 'LECF') {\n      let block = this.readBlockHead(stream);\n\n      if (block.name == 'LOFF') {\n        let numrooms = stream.getUint8();\n        for (var i = 0; i < numrooms; i++) {\n          let room = stream.getUint8();\n          let offs = stream.getUint32LE();\n          this.roomOffsets[room] = offs;\n        }\n      }\n    }\n  }\n\n  createPaletteElement(num) {\n    let room = this.rooms[num];\n\n    if (room && room.palette) {\n      let paletteEl = document.createElement('div');\n      paletteEl.classList.add('palette');\n\n      for (var i = 0; i < 256; i++) {\n        let r = room.palette[i*3];\n        let g = room.palette[i*3 + 1];\n        let b = room.palette[i*3 + 2];\n        let swatch = document.createElement('div');\n        swatch.classList.add('swatch');\n        swatch.style.backgroundColor = 'rgb('+r+','+g+','+b+')';\n        swatch.title = i + ':' + 'rgb('+r+','+g+','+b+')';\n        paletteEl.appendChild(swatch);\n      }\n\n      document.body.appendChild(paletteEl);\n    }\n  }\n\n  parseFiles() {\n    if (this.files[INDEX_FILE]) {\n      this.parseIndex();\n    }\n    if (this.files[BUNDLE_FILE]) {\n      this.parseBundle();\n      this.parseRoom(2);\n      this.createPaletteElement(2);\n    }\n  }\n\n  onFileLoaded(filename) {\n    console.log('Loaded', filename, this.files[filename].byteLength);\n\n    if (filename == INDEX_FILE || filename == BUNDLE_FILE) {\n      this.files[filename] = this.decode(this.files[filename], 0x69);\n    }\n\n    this.filesToLoad--;\n\n    if (this.filesToLoad == 0) {\n      console.log('Load done.');\n      this.parseFiles();\n    }\n  }\n\n  loadFile(file) {\n    var reader = new FileReader();\n    var filename = file.name.toLowerCase();\n\t\treader.onload = (event) => {\n      // console.log(event.target);\n      this.files[filename] = event.target.result;\n      this.onFileLoaded(filename);\n\t\t};\n\t  reader.readAsArrayBuffer(file);\n  }\n\n  onDrop(event) {\n    event.stopPropagation();\n    event.preventDefault();\n\n    var files = event.dataTransfer.files;\n    if (files.length) {\n      this.filesToLoad = files.length;\n      for (var i = 0; i < files.length; i++) {\n        this.loadFile(files[i]);\n      }\n    }\n  }\n\n  onDragEnter(event) {\n    event.stopPropagation();\n    event.preventDefault();\n  }\n\n  onDragOver(event) {\n    event.stopPropagation();\n    event.preventDefault();\n  }\n\n  handleEvent(event) {\n    if (event.type == 'drop') {\n      this.onDrop(event);\n    }\n    else if (event.type == 'dragover') {\n      this.onDragOver(event);\n    }\n    else if (event.type == 'dragenter') {\n      this.onDragEnter(event);\n    }\n  }\n\n  initEventListeners() {\n    window.addEventListener('drop', this, false);\n    window.addEventListener('dragenter', this, false);\n    window.addEventListener('dragover', this, false);\n  }\n}\n\nwindow.addEventListener('DOMContentLoaded', () => {\n  let app = new App();\n});\n","\nclass BitStream {\n  constructor(stream) {\n    this.stream = stream;\n    this.offset = 0;\n    this.bit = 1;\n    this.byte = this.stream.getUint8();\n    this.stream.backup();\n  }\n\n  next() {\n    this.byte = this.stream.getUint8();\n    this.offset++;\n    this.bit = 1;\n  }\n\n  read(length) {\n    if (length) {\n      let limit = Math.pow(2, length - 1);\n      let value = 0;\n      let bit = 1;\n      while (bit <= limit) {\n        value = (this.read() ? value | bit : value);\n        bit = bit << 1;\n      }\n      return value;\n    }\n    else {\n      let value = (this.byte & this.bit ? 1 : 0);\n      if (this.bit == 128) {\n        this.next();\n      } else {\n        this.bit = this.bit << 1;\n      }\n      return value;\n    }\n  }\n}\n\nmodule.exports = BitStream;\n","\nclass Bitmap {\n  constructor(params) {\n    this.width = params.width;\n    this.height = params.height;\n    this.pixels = params.pixels;\n  }\n}\n\nmodule.exports = Bitmap;\n","\nclass BufferStream {\n  constructor(buffer) {\n    this.buffer = buffer;\n    this.view = new DataView(this.buffer);\n    this.offset = 0;\n  }\n\n  get length() {\n    return this.buffer.byteLength;\n  }\n\n  seek(offset=0) {\n    this.offset = offset;\n  }\n  \n  backup() {\n    if (this.offset > 0)\n      this.offset--;\n  }\n\n  getUint8(offset) {\n    if (offset == undefined) {\n      offset = this.offset;\n      this.offset++;\n    }\n    return this.view.getUint8(offset);\n  }\n\n  getUint16(offset, littleEndian=false) {\n    if (offset == undefined) {\n      offset = this.offset;\n      this.offset += 2;\n    }\n    return this.view.getUint16(offset, littleEndian);\n  }\n\n  getUint32(offset, littleEndian=false) {\n    if (offset == undefined) {\n      offset = this.offset;\n      this.offset += 4;\n    }\n    return this.view.getUint32(offset, littleEndian);\n  }\n\n  getUint16LE(offset) {\n    return this.getUint16(offset, true);\n  }\n\n  getUint32LE(offset) {\n    return this.getUint32(offset, true);\n  }\n\n  getBytes(length=1, offset) {\n    if (offset == undefined) {\n      offset = this.offset;\n      this.offset += length;\n    }\n    let bytes = new Uint8Array(length);\n    for (var i = 0; i < length; i++) {\n      bytes[i] = this.view.getUint8(offset + i); //this.getUint8(offset + i);\n    }\n    return bytes;\n  }\n}\n\nmodule.exports = BufferStream;\n","const Bitmap = require('./bitmap');\n\nclass Room {\n  constructor(params) {\n    this.width = params.width;\n    this.height = params.height;\n    this.numObjects = params.numObjects;\n  }\n}\n\nmodule.exports = Room;\n","\nclass Scumm {\n  constructor() {\n    \n  }\n}\n\nmodule.exports = Scumm;\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJzcmMvYXBwLmpzIiwic3JjL2JpdF9zdHJlYW0uanMiLCJzcmMvYml0bWFwLmpzIiwic3JjL2J1ZmZlcl9zdHJlYW0uanMiLCJzcmMvcm9vbS5qcyIsInNyYy9zY3VtbS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQ0FBLE1BQU0sUUFBUSxRQUFRLFNBQVIsQ0FBZDtBQUNBLE1BQU0sU0FBUyxRQUFRLFVBQVIsQ0FBZjtBQUNBLE1BQU0sT0FBTyxRQUFRLFFBQVIsQ0FBYjtBQUNBLE1BQU0sZUFBZSxRQUFRLGlCQUFSLENBQXJCO0FBQ0EsTUFBTSxZQUFZLFFBQVEsY0FBUixDQUFsQjs7QUFFQSxNQUFNLGFBQWEsYUFBbkI7QUFDQSxNQUFNLGNBQWMsYUFBcEI7QUFDQTtBQUNBOztBQUVBLE1BQU0sR0FBTixDQUFVO0FBQ1IsZ0JBQWM7QUFDWixZQUFRLEdBQVIsQ0FBWSxLQUFaOztBQUVBLFNBQUssS0FBTCxHQUFhLEVBQWI7QUFDQSxTQUFLLFNBQUwsR0FBaUIsRUFBakI7QUFDQSxTQUFLLFdBQUwsR0FBbUIsRUFBbkI7QUFDQSxTQUFLLGdCQUFMLEdBQXdCLEVBQXhCO0FBQ0EsU0FBSyxLQUFMLEdBQWEsRUFBYjs7QUFFQSxRQUFJLFNBQVMsU0FBUyxhQUFULENBQXVCLFFBQXZCLENBQWI7QUFDQSxXQUFPLEtBQVAsR0FBZSxHQUFmO0FBQ0EsV0FBTyxNQUFQLEdBQWdCLEdBQWhCO0FBQ0EsV0FBTyxLQUFQLENBQWEsZUFBYixHQUErQixXQUEvQjtBQUNBLGFBQVMsSUFBVCxDQUFjLFdBQWQsQ0FBMEIsTUFBMUI7O0FBRUEsU0FBSyxNQUFMLEdBQWMsTUFBZDs7QUFFQSxTQUFLLGtCQUFMO0FBQ0Q7O0FBRUQsU0FBTyxNQUFQLEVBQWUsTUFBSSxDQUFuQixFQUFzQjtBQUNwQixRQUFJLE9BQU8sSUFBSSxVQUFKLENBQWUsTUFBZixDQUFYO0FBQ0EsU0FBSyxJQUFJ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Qy9CLFlBQU0sQ0FBTixJQUFXLEtBQUssSUFBTCxDQUFVLFFBQVYsQ0FBbUIsU0FBUyxDQUE1QixDQUFYLENBRCtCLENBQ1k7QUFDNUM7QUFDRCxXQUFPLEtBQVA7QUFDRDtBQTlEZ0I7O0FBaUVuQixPQUFPLE9BQVAsR0FBaUIsWUFBakI7OztBQ2xFQSxNQUFNLFNBQVMsUUFBUSxVQUFSLENBQWY7O0FBRUEsTUFBTSxJQUFOLENBQVc7QUFDVCxjQUFZLE1BQVosRUFBb0I7QUFDbEIsU0FBSyxLQUFMLEdBQWEsT0FBTyxLQUFwQjtBQUNBLFNBQUssTUFBTCxHQUFjLE9BQU8sTUFBckI7QUFDQSxTQUFLLFVBQUwsR0FBa0IsT0FBTyxVQUF6QjtBQUNEO0FBTFE7O0FBUVgsT0FBTyxPQUFQLEdBQWlCLElBQWpCOzs7O0FDVEEsTUFBTSxLQUFOLENBQVk7QUFDVixnQkFBYyxDQUViO0FBSFM7O0FBTVosT0FBTyxPQUFQLEdBQWlCLEtBQWpCIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24oKXtmdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dmFyIGY9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitvK1wiJ1wiKTt0aHJvdyBmLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsZn12YXIgbD1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwobC5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxsLGwuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc31yZXR1cm4gZX0pKCkiLCJjb25zdCBTY3VtbSA9IHJlcXVpcmUoJy4vc2N1bW0nKTtcbmNvbnN0IEJpdG1hcCA9IHJlcXVpcmUoJy4vYml0bWFwJyk7XG5jb25zdCBSb29tID0gcmVxdWlyZSgnLi9yb29tJyk7XG5jb25zdCBCdWZmZXJTdHJlYW0gPSByZXF1aXJlKCcuL2J1ZmZlcl9zdHJlYW0nKTtcbmNvbnN0IEJpdFN0cmVhbSA9IHJlcXVpcmUoJy4vYml0X3N0cmVhbScpO1xuXG5jb25zdCBJTkRFWF9GSUxFID0gJ21vbmtleTIuMDAwJztcbmNvbnN0IEJVTkRMRV9GSUxFID0gJ21vbmtleTIuMDAxJztcbi8vIGNvbnN0IElOREVYX0ZJTEUgPSAnbWkyZGVtby4wMDAnO1xuLy8gY29uc3QgQlVORExFX0ZJTEUgPSAnbWkyZGVtby4wMDEnO1xuXG5jbGFzcyBBcHAge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBjb25zb2xlLmxvZygnQXBwJyk7XG5cbiAgICB0aGlzLmZpbGVzID0gW107XG4gICAgdGhpcy5yb29tTmFtZXMgPSBbXTtcbiAgICB0aGlzLnJvb21PZmZzZXRzID0gW107XG4gICAgdGhpcy5yb29tQmxvY2tPZmZzZXRzID0gW107XG4gICAgdGhpcy5yb29tcyA9IFtdO1xuXG4gICAgbGV0IGNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpO1xuICAgIGNhbnZhcy53aWR0aCA9IDMyMDtcbiAgICBjYW52YXMuaGVpZ2h0ID0gMjAwO1xuICAgIGNhbnZhcy5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSAnbGlnaHRncmF5JztcbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGNhbnZhcyk7XG5cbiAgICB0aGlzLmNhbnZhcyA9IGNhbnZhcztcblxuICAgIHRoaXMuaW5pdEV2ZW50TGlzdGVuZXJzKCk7XG4gIH1cblxuICBkZWNvZGUoYnVmZmVyLCBlbmM9MCkge1xuICAgIGxldCB0ZW1wID0gbmV3IFVpbnQ4QXJyYXkoYnVmZmVyKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRlbXAubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRlbXBbaV0gPSB0ZW1wW2ldIF4gZW5jO1xuICAgIH1cbiAgICByZXR1cm4gdGVtcC5idWZmZXI7XG4gIH1cblxuICBnZXRCbG9ja1R5cGVOYW1lKHVpbnQzMikge1xuICAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKFxuICAgICAgKHVpbnQzMiAmIDB4ZmYpLFxuICAgICAgKCh1aW50MzIgPj4gOCkgJiAweGZmKSxcbiAgICAgICgodWludDMyID4+IDE2KSAmIDB4ZmYpLFxuICAgICAgKCh1aW50MzIgPj4gMjQpICYgMHhmZilcbiAgICApO1xuICB9XG5cbiAgcGFyc2VJbmRleCgpIHtcbiAgICBpZiAoIXRoaXMuZmlsZXNbSU5ERVhfRklMRV0pIHJldHVybjtcbiAgICBsZXQgc3RyZWFtID0gbmV3IEJ1ZmZlclN0cmVhbSh0aGlzLmZpbGVzW0lOREVYX0ZJTEVdKTtcblxuICAgIHdoaWxlIChzdHJlYW0ub2Zmc2V0IDwgc3RyZWFtLmxlbmd0aCkge1xuICAgICAgbGV0IHR5cGUgPSBzdHJlYW0uZ2V0VWludDMyTEUoKTtcbiAgICAgIGxldCBzaXplID0gc3RyZWFtLmdldFVpbnQzMigpO1xuICAgICAgbGV0IG5hbWUgPSB0aGlzLmdldEJsb2NrVHlwZU5hbWUodHlwZSk7XG5cbiAgICAgIGlmIChuYW1lID09ICdSTkFNJykgeyAvLyBSb29tIG5hbWVzIHRhYmxlXG4gICAgICAgIHdoaWxlICgxKSB7XG4gICAgICAgICAgbGV0IHJvb21ubyA9IHN0cmVhbS5nZXRVaW50OCgpO1xuICAgICAgICAgIGlmIChyb29tbm8gPT0gMCkgYnJlYWs7XG5cbiAgICAgICAgICBsZXQgYnl0ZXMgPSBzdHJlYW0uZ2V0Qnl0ZXMoOSk7XG4gICAgICAgICAgdGhpcy5yb29tTmFtZXNbcm9vbW5vXSA9IGJ5dGVzLnJlZHVjZSgoYWNjdW11bGF0b3IsIGN1cnJlbnRWYWx1ZSkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIGFjY3VtdWxhdG9yICsgKGN1cnJlbnRWYWx1ZSAhPSAweGZmID8gU3RyaW5nLmZyb21DaGFyQ29kZShjdXJyZW50VmFsdWUgXiAweGZmKSA6ICcnKTtcbiAgICAgICAgICB9LCAnJyk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc29sZS5sb2codGhpcy5yb29tTmFtZXMpO1xuICAgICAgLy8gfVxuICAgICAgLy8gZWxzZSBpZiAobmFtZSA9PSAnRFJPTycpIHtcbiAgICAgIC8vICAgbGV0IG51bWl0ZW1zID0gc3RyZWFtLmdldFVpbnQxNkxFKCk7XG4gICAgICAvLyAgIGxldCByb29tTm9zID0gc3RyZWFtLmdldEJ5dGVzKCwgbnVtaXRlbXMpO1xuICAgICAgLy9cbiAgICAgIC8vICAgbGV0IHJvb21PZmZzZXRzID0gW107XG4gICAgICAvLyAgIGZvciAodmFyIGkgPSAwOyBpIDwgbnVtaXRlbXM7IGkrKykge1xuICAgICAgLy8gICAgIGxldCBvZmZzID0gc3RyZWFtLmdldFVpbnQzMkxFKCk7XG4gICAgICAvLyAgICAgcm9vbU9mZnNldHNbaV0gPSBvZmZzO1xuICAgICAgLy8gICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzdHJlYW0uZ2V0Qnl0ZXMoc2l6ZSAtIDgpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGdldEJ1bmRsZVN0cmVhbSgpIHtcbiAgICBsZXQgZmlsZW5hbWUgPSBCVU5ETEVfRklMRTtcbiAgICBpZiAoIXRoaXMuZmlsZXNbZmlsZW5hbWVdKSByZXR1cm47XG4gICAgbGV0IHN0cmVhbSA9IG5ldyBCdWZmZXJTdHJlYW0odGhpcy5maWxlc1tmaWxlbmFtZV0pO1xuICAgIHJldHVybiBzdHJlYW07XG4gIH1cblxuICByZWFkQmxvY2tIZWFkKHN0cmVhbSkge1xuICAgIGxldCB0eXBlID0gc3RyZWFtLmdldFVpbnQzMkxFKCk7XG4gICAgbGV0IHNpemUgPSBzdHJlYW0uZ2V0VWludDMyKCk7XG4gICAgbGV0IG5hbWUgPSB0aGlzLmdldEJsb2NrVHlwZU5hbWUodHlwZSk7XG4gICAgcmV0dXJuIHsgbmFtZTogbmFtZSwgdHlwZTogdHlwZSwgc2l6ZTogc2l6ZSB9O1xuICB9XG5cbiAgLy8gbWFrZVJHQkEocGFsZXR0ZSwgaW5kZXgpIHtcbiAgLy8gICBsZXQgb2ZmcyA9IGluZGV4ICogMztcbiAgLy8gICBsZXQgcmdiYSA9IHBhbGV0dGVbb2Zmc10gPDwgMjQgfCBwYWxldHRlW29mZnMgKyAyXSA8PCAxNiB8IHBhbGV0dGVbb2ZmcyArIDNdIDw8IDggfCAyNTU7XG4gIC8vICAgcmV0dXJuIHJnYmE7XG4gIC8vIH1cblxuICBkZWNvbXByZXNzU3RyaXAoc3RyZWFtLCB3aWR0aCwgaGVpZ2h0KSB7XG4gICAgY29uc29sZS5sb2coJ2RlY29kaW5nLi4uJywgd2lkdGgsIGhlaWdodCk7XG5cbiAgICBsZXQgcGl4ZWxzID0gbmV3IFVpbnQ4QXJyYXkod2lkdGggKiBoZWlnaHQpO1xuICAgIGxldCBvZmZzZXQgPSAwO1xuXG4gICAgbGV0IGNvZGUgPSBzdHJlYW0uZ2V0VWludDgoKTtcbiAgICBsZXQgc2hpZnQgPSBjb2RlICUgMTA7XG4gICAgLy8gbGV0IG1hc2sgPSAweGZmID4+ICg4IC0gc2hpZnQpO1xuXG4gICAgbGV0IGNvbG9yID0gc3RyZWFtLmdldFVpbnQ4KCk7XG5cbiAgICBsZXQgYml0c3RyZWFtID0gbmV3IEJpdFN0cmVhbShzdHJlYW0pO1xuXG4gICAgaWYgKGNvZGUgPj0gMHg0MCAmJiBjb2RlIDw9IDB4NDQpIHtcbiAgICAgIGNvbnNvbGUubG9nKCdNZXRob2QgQiBIb3Jpem9udGFsJywgY29kZSwgc2hpZnQpO1xuICAgICAgY29uc29sZS5sb2coJ0NvbG9yJywgY29sb3IsICdbJywgdGhpcy5wYWxldHRlW2NvbG9yKjNdLCB0aGlzLnBhbGV0dGVbY29sb3IqMysxXSwgdGhpcy5wYWxldHRlW2NvbG9yKjMrMl0sICddJyk7XG5cbiAgICAgIC8vc2NhYi1pc2xcbiAgICAgIC8vMDEwMTAxMDBbNF0wMTEwMTExMFszXTExMDExMDEwWzJdMDAxMTAxMDBbMV0wMTAwMTEwMVswXVxuXG4gICAgICBsZXQgcyA9ICcnO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCA0OyBpKyspIHtcbiAgICAgICAgbGV0IGIgPSBiaXRzdHJlYW0ucmVhZCg4KTtcbiAgICAgICAgY29uc29sZS5sb2coYi50b1N0cmluZygyKS5wYWRTdGFydCg4LCAnMCcpKTtcbiAgICAgIH1cblxuICAgICAgLy8gbGV0IGJpdDtcbiAgICAgIC8vIC8vIGxldCBiaXRzID0gc3RyZWFtLmdldFVpbnQ4KCk7XG4gICAgICAvL1xuICAgICAgLy8gd2hpbGUgKG9mZnNldCA8IDgpIHtcbiAgICAgIC8vICAgcGl4ZWxzW29mZnNldCsrXSA9IGNvbG9yO1xuICAgICAgLy9cbiAgICAgIC8vICAgYml0ID0gYml0c3RyZWFtLnJlYWQoKTtcbiAgICAgIC8vXG4gICAgICAvLyAgIGlmIChiaXQpIHtcbiAgICAgIC8vICAgICBiaXQgPSBiaXRzdHJlYW0ucmVhZCgpO1xuICAgICAgLy8gICAgIGlmIChiaXQpIHsgLy8gY29tbWFuZFxuICAgICAgLy8gICAgICAgLy8gY29sb3JcbiAgICAgIC8vICAgICAgIGxldCBjID0gYml0c3RyZWFtLnJlYWQoMyk7XG4gICAgICAvLyAgICAgICBjb25zb2xlLmxvZygnY29tbWFuZCcsIGMudG9TdHJpbmcoMikpO1xuICAgICAgLy8gICAgICAgaWYgKGMgPj0gMCAmJiBjIDw9IDMpIHtcbiAgICAgIC8vICAgICAgICAgY29sb3IgKz0gNCAtIGM7XG4gICAgICAvLyAgICAgICB9XG4gICAgICAvLyAgICAgICBlbHNlIGlmIChjID09IDQpIHtcbiAgICAgIC8vICAgICAgICAgbGV0IHJ1biA9IGJpdHN0cmVhbS5yZWFkKDgpO1xuICAgICAgLy8gICAgICAgICBjb25zb2xlLmxvZygncnVuJywgcnVuKTtcbiAgICAgIC8vICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBydW47IGkrKykge1xuICAgICAgLy8gICAgICAgICAgIHBpeGVsc1tvZmZzZXQrK10gPSBjb2xvcjtcbiAgICAgIC8vICAgICAgICAgfVxuICAgICAgLy8gICAgICAgfVxuICAgICAgLy8gICAgICAgZWxzZSBpZiAoYyA+PSA1ICYmIGMgPD0gNykge1xuICAgICAgLy8gICAgICAgICBjb2xvciAtPSBjIC0gNDtcbiAgICAgIC8vICAgICAgIH1cbiAgICAgIC8vICAgICB9IGVsc2UgeyAvLyByZWFkIGEgcGFsZXR0ZSBpbmRleFxuICAgICAgLy8gICAgICAgY29sb3IgPSBiaXRzdHJlYW0ucmVhZChzaGlmdCk7XG4gICAgICAvLyAgICAgICBjb25zb2xlLmxvZygnbmV3IGluZGV4JywgY29sb3IpO1xuICAgICAgLy8gICAgIH1cbiAgICAgIC8vICAgfVxuICAgICAgLy8gICBlbHNlIHsgLy8gZHJhdyBwaXhlbFxuICAgICAgLy8gICAgIGNvbnNvbGUubG9nKCdkcmF3JywgY29sb3IpO1xuICAgICAgLy8gICAgIHBpeGVsc1tvZmZzZXQrK10gPSBjb2xvcjtcbiAgICAgIC8vICAgfVxuICAgICAgLy8gfVxuICAgIH1cblxuICAgIHJldHVybiBwaXhlbHM7XG4gIH1cblxuICBkcmF3U3RyaXAocGl4ZWxzLCBwb3MsIHdpZHRoLCBoZWlnaHQpIHtcbiAgICBjb25zb2xlLmxvZygnZHJhd1N0cmlwJywgcG9zLCB3aWR0aCwgaGVpZ2h0KTtcbiAgICBsZXQgY3R4ID0gdGhpcy5jYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcbiAgICBsZXQgaW1hZ2VEYXRhID0gY3R4LmdldEltYWdlRGF0YShwb3MsIDAsIHdpZHRoLCBoZWlnaHQpO1xuICAgIGZvciAodmFyIHkgPSAwOyB5IDwgaGVpZ2h0OyB5KyspIHtcbiAgICAgIGZvciAodmFyIHggPSAwOyB4IDwgd2lkdGg7IHgrKykge1xuICAgICAgICBsZXQgaW5kZXggPSB5ICogd2lkdGggKyB4O1xuICAgICAgICBsZXQgY29sb3IgPSBwaXhlbHNbaW5kZXhdO1xuICAgICAgICBpbWFnZURhdGEuZGF0YVtpbmRleCAqIDQgKyAwXSA9IHRoaXMucGFsZXR0ZVtjb2xvciAqIDMgKyAwXTtcbiAgICAgICAgaW1hZ2VEYXRhLmRhdGFbaW5kZXggKiA0ICsgMV0gPSB0aGlzLnBhbGV0dGVbY29sb3IgKiAzICsgMV07XG4gICAgICAgIGltYWdlRGF0YS5kYXRhW2luZGV4ICogNCArIDJdID0gdGhpcy5wYWxldHRlW2NvbG9yICogMyArIDJdO1xuICAgICAgICBpbWFnZURhdGEuZGF0YVtpbmRleCAqIDQgKyAzXSA9IDI1NTtcbiAgICAgIH1cbiAgICB9XG4gICAgY3R4LnB1dEltYWdlRGF0YShpbWFnZURhdGEsIHBvcywgMCk7XG4gICAgY3R4LmltYWdlU21vb3RoaW5nRW5hYmxlZCA9IGZhbHNlO1xuICAgIGN0eC5kcmF3SW1hZ2UodGhpcy5jYW52YXMsIDAsIDAsIDMyMCo0LCAyMDAqNCk7XG4gIH1cblxuICBwYXJzZVJvb20obnVtKSB7XG4gICAgY29uc29sZS5sb2coJ1BhcnNpbmcgcm9vbScsIG51bSwgJy4uLicpO1xuICAgIGxldCBzdHJlYW0gPSB0aGlzLmdldEJ1bmRsZVN0cmVhbSgpO1xuICAgIGxldCBvZmZzZXQgPSB0aGlzLnJvb21PZmZzZXRzW251bV07XG5cbiAgICBzdHJlYW0uc2VlayhvZmZzZXQpO1xuXG4gICAgLy8gUmVhZCBhbmQgc3RvcmUgdGhlIGJsb2NrIG9mZnNldHMgUk1IRCwgQ0xVVCBldGNcblxuICAgIGxldCBibG9jayA9IHRoaXMucmVhZEJsb2NrSGVhZChzdHJlYW0pO1xuICAgIGxldCBlbmQgPSBvZmZzZXQgKyBibG9jay5zaXplO1xuICAgIGxldCBibG9ja3MgPSB7fTtcblxuICAgIHdoaWxlIChzdHJlYW0ub2Zmc2V0IDwgZW5kKSB7XG4gICAgICBsZXQgYmxvY2sgPSB0aGlzLnJlYWRCbG9ja0hlYWQoc3RyZWFtKTtcblxuICAgICAgbGV0IGluZm8gPSB7XG4gICAgICAgIG5hbWU6IGJsb2NrLm5hbWUsXG4gICAgICAgIHNpemU6IGJsb2NrLnNpemUsXG4gICAgICAgIG9mZnNldDogc3RyZWFtLm9mZnNldCAtIDhcbiAgICAgIH07XG5cbiAgICAgIGlmIChibG9ja3NbYmxvY2submFtZV0pIHtcbiAgICAgICAgaWYgKGJsb2Nrc1tibG9jay5uYW1lXSBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICAgICAgYmxvY2tzW2Jsb2NrLm5hbWVdLnB1c2goaW5mbyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYmxvY2tzW2Jsb2NrLm5hbWVdID0gWyBibG9ja3NbYmxvY2submFtZV0sIGluZm8gXTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYmxvY2tzW2Jsb2NrLm5hbWVdID0gaW5mbztcbiAgICAgIH1cblxuICAgICAgc3RyZWFtLmdldEJ5dGVzKGJsb2NrLnNpemUgLSA4KTtcbiAgICB9XG5cbiAgICBjb25zb2xlLmxvZyhibG9ja3MpO1xuXG4gICAgdGhpcy5yb29tQmxvY2tPZmZzZXRzW251bV0gPSBibG9ja3M7XG5cbiAgICAvLyBSZWFkIGhlYWRlciBkYXRhIC0gd2lkdGgsIGhlaWdodCBldGNcblxuICAgIHN0cmVhbS5zZWVrKGJsb2Nrc1snUk1IRCddLm9mZnNldCArIDgpO1xuICAgIGxldCB3aWR0aCA9IHN0cmVhbS5nZXRVaW50MTZMRSgpO1xuICAgIGxldCBoZWlnaHQgPSBzdHJlYW0uZ2V0VWludDE2TEUoKTtcbiAgICBsZXQgbnVtT2JqZWN0cyA9IHN0cmVhbS5nZXRVaW50MTZMRSgpO1xuXG4gICAgY29uc29sZS5sb2codGhpcy5yb29tTmFtZXNbbnVtXSwgd2lkdGgsIGhlaWdodCwgbnVtT2JqZWN0cyk7XG5cbiAgICBsZXQgcm9vbSA9IG5ldyBSb29tKHsgd2lkdGg6IHdpZHRoLCBoZWlnaHQ6IGhlaWdodCwgbnVtT2JqZWN0czogbnVtT2JqZWN0cyB9KTtcblxuICAgIC8vIFJlYWQgcGFsZXR0ZSBlbnRyaWVzXG5cbiAgICBpZiAoYmxvY2tzWydDTFVUJ10pIHtcbiAgICAgIHN0cmVhbS5zZWVrKGJsb2Nrc1snQ0xVVCddLm9mZnNldCArIDgpO1xuXG4gICAgICByb29tLnBhbGV0dGUgPSBbXTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgMjU2OyBpKyspIHtcbiAgICAgICAgbGV0IHIgPSBzdHJlYW0uZ2V0VWludDgoKTtcbiAgICAgICAgbGV0IGcgPSBzdHJlYW0uZ2V0VWludDgoKTtcbiAgICAgICAgbGV0IGIgPSBzdHJlYW0uZ2V0VWludDgoKTtcbiAgICAgICAgcm9vbS5wYWxldHRlLnB1c2gociwgZywgYik7XG4gICAgICB9XG5cbiAgICAgIHRoaXMucGFsZXR0ZSA9IHJvb20ucGFsZXR0ZTtcbiAgICB9XG5cbiAgICAvLyBEZWNvZGUgYmFja2dyb3VuZCBpbWFnZVxuXG4gICAgaWYgKGJsb2Nrc1snUk1JTSddKSB7XG4gICAgICBzdHJlYW0uc2VlayhibG9ja3NbJ1JNSU0nXS5vZmZzZXQgKyA4KTtcblxuICAgICAgbGV0IGJsb2NrID0gdGhpcy5yZWFkQmxvY2tIZWFkKHN0cmVhbSk7XG4gICAgICBsZXQgbnVtemJ1ZiA9IHN0cmVhbS5nZXRVaW50MTZMRSgpO1xuXG4gICAgICBpZiAoYmxvY2submFtZSA9PSAnUk1JSCcpIHtcbiAgICAgICAgbGV0IGJsb2NrID0gdGhpcy5yZWFkQmxvY2tIZWFkKHN0cmVhbSk7XG5cbiAgICAgICAgaWYgKGJsb2NrLm5hbWUgPT0gJ0lNMDAnKSB7XG4gICAgICAgICAgbGV0IFNNQVBvZmZzID0gc3RyZWFtLm9mZnNldDtcbiAgICAgICAgICBsZXQgYmxvY2sgPSB0aGlzLnJlYWRCbG9ja0hlYWQoc3RyZWFtKTtcbiAgICAgICAgICBpZiAoYmxvY2submFtZSA9PSAnU01BUCcpIHtcbiAgICAgICAgICAgIGxldCBvZmZzZXRzID0gW107XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJvb20ud2lkdGggLyA4OyBpKyspIHtcbiAgICAgICAgICAgICAgbGV0IG9mZnMgPSBzdHJlYW0uZ2V0VWludDMyTEUoKTtcbiAgICAgICAgICAgICAgb2Zmc2V0cy5wdXNoKG9mZnMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc29sZS5sb2coJ29mZnNldHMnLCBvZmZzZXRzWzBdLCBvZmZzZXRzWzFdKTtcbiAgICAgICAgICAgIGxldCBwaXhlbHMgPSB0aGlzLmRlY29tcHJlc3NTdHJpcChzdHJlYW0sIDgsIHJvb20uaGVpZ2h0KTtcbiAgICAgICAgICAgIHRoaXMuZHJhd1N0cmlwKHBpeGVscywgMCwgOCwgcm9vbS5oZWlnaHQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMucm9vbXNbbnVtXSA9IHJvb207XG4gIH1cblxuICBwYXJzZUJ1bmRsZShudW0pIHtcbiAgICBsZXQgc3RyZWFtID0gdGhpcy5nZXRCdW5kbGVTdHJlYW0oKTtcbiAgICBsZXQgYmxvY2sgPSB0aGlzLnJlYWRCbG9ja0hlYWQoc3RyZWFtKTtcblxuICAgIGxldCBvZmZzZXQgPSA4O1xuXG4gICAgaWYgKGJsb2NrLm5hbWUgPT0gJ0xFQ0YnKSB7XG4gICAgICBsZXQgYmxvY2sgPSB0aGlzLnJlYWRCbG9ja0hlYWQoc3RyZWFtKTtcblxuICAgICAgaWYgKGJsb2NrLm5hbWUgPT0gJ0xPRkYnKSB7XG4gICAgICAgIGxldCBudW1yb29tcyA9IHN0cmVhbS5nZXRVaW50OCgpO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG51bXJvb21zOyBpKyspIHtcbiAgICAgICAgICBsZXQgcm9vbSA9IHN0cmVhbS5nZXRVaW50OCgpO1xuICAgICAgICAgIGxldCBvZmZzID0gc3RyZWFtLmdldFVpbnQzMkxFKCk7XG4gICAgICAgICAgdGhpcy5yb29tT2Zmc2V0c1tyb29tXSA9IG9mZnM7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBjcmVhdGVQYWxldHRlRWxlbWVudChudW0pIHtcbiAgICBsZXQgcm9vbSA9IHRoaXMucm9vbXNbbnVtXTtcblxuICAgIGlmIChyb29tICYmIHJvb20ucGFsZXR0ZSkge1xuICAgICAgbGV0IHBhbGV0dGVFbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgcGFsZXR0ZUVsLmNsYXNzTGlzdC5hZGQoJ3BhbGV0dGUnKTtcblxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCAyNTY7IGkrKykge1xuICAgICAgICBsZXQgciA9IHJvb20ucGFsZXR0ZVtpKjNdO1xuICAgICAgICBsZXQgZyA9IHJvb20ucGFsZXR0ZVtpKjMgKyAxXTtcbiAgICAgICAgbGV0IGIgPSByb29tLnBhbGV0dGVbaSozICsgMl07XG4gICAgICAgIGxldCBzd2F0Y2ggPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgc3dhdGNoLmNsYXNzTGlzdC5hZGQoJ3N3YXRjaCcpO1xuICAgICAgICBzd2F0Y2guc3R5bGUuYmFja2dyb3VuZENvbG9yID0gJ3JnYignK3IrJywnK2crJywnK2IrJyknO1xuICAgICAgICBzd2F0Y2gudGl0bGUgPSBpICsgJzonICsgJ3JnYignK3IrJywnK2crJywnK2IrJyknO1xuICAgICAgICBwYWxldHRlRWwuYXBwZW5kQ2hpbGQoc3dhdGNoKTtcbiAgICAgIH1cblxuICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChwYWxldHRlRWwpO1xuICAgIH1cbiAgfVxuXG4gIHBhcnNlRmlsZXMoKSB7XG4gICAgaWYgKHRoaXMuZmlsZXNbSU5ERVhfRklMRV0pIHtcbiAgICAgIHRoaXMucGFyc2VJbmRleCgpO1xuICAgIH1cbiAgICBpZiAodGhpcy5maWxlc1tCVU5ETEVfRklMRV0pIHtcbiAgICAgIHRoaXMucGFyc2VCdW5kbGUoKTtcbiAgICAgIHRoaXMucGFyc2VSb29tKDIpO1xuICAgICAgdGhpcy5jcmVhdGVQYWxldHRlRWxlbWVudCgyKTtcbiAgICB9XG4gIH1cblxuICBvbkZpbGVMb2FkZWQoZmlsZW5hbWUpIHtcbiAgICBjb25zb2xlLmxvZygnTG9hZGVkJywgZmlsZW5hbWUsIHRoaXMuZmlsZXNbZmlsZW5hbWVdLmJ5dGVMZW5ndGgpO1xuXG4gICAgaWYgKGZpbGVuYW1lID09IElOREVYX0ZJTEUgfHwgZmlsZW5hbWUgPT0gQlVORExFX0ZJTEUpIHtcbiAgICAgIHRoaXMuZmlsZXNbZmlsZW5hbWVdID0gdGhpcy5kZWNvZGUodGhpcy5maWxlc1tmaWxlbmFtZV0sIDB4NjkpO1xuICAgIH1cblxuICAgIHRoaXMuZmlsZXNUb0xvYWQtLTtcblxuICAgIGlmICh0aGlzLmZpbGVzVG9Mb2FkID09IDApIHtcbiAgICAgIGNvbnNvbGUubG9nKCdMb2FkIGRvbmUuJyk7XG4gICAgICB0aGlzLnBhcnNlRmlsZXMoKTtcbiAgICB9XG4gIH1cblxuICBsb2FkRmlsZShmaWxlKSB7XG4gICAgdmFyIHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7XG4gICAgdmFyIGZpbGVuYW1lID0gZmlsZS5uYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0cmVhZGVyLm9ubG9hZCA9IChldmVudCkgPT4ge1xuICAgICAgLy8gY29uc29sZS5sb2coZXZlbnQudGFyZ2V0KTtcbiAgICAgIHRoaXMuZmlsZXNbZmlsZW5hbWVdID0gZXZlbnQudGFyZ2V0LnJlc3VsdDtcbiAgICAgIHRoaXMub25GaWxlTG9hZGVkKGZpbGVuYW1lKTtcblx0XHR9O1xuXHQgIHJlYWRlci5yZWFkQXNBcnJheUJ1ZmZlcihmaWxlKTtcbiAgfVxuXG4gIG9uRHJvcChldmVudCkge1xuICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICB2YXIgZmlsZXMgPSBldmVudC5kYXRhVHJhbnNmZXIuZmlsZXM7XG4gICAgaWYgKGZpbGVzLmxlbmd0aCkge1xuICAgICAgdGhpcy5maWxlc1RvTG9hZCA9IGZpbGVzLmxlbmd0aDtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZmlsZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdGhpcy5sb2FkRmlsZShmaWxlc1tpXSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgb25EcmFnRW50ZXIoZXZlbnQpIHtcbiAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICB9XG5cbiAgb25EcmFnT3ZlcihldmVudCkge1xuICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gIH1cblxuICBoYW5kbGVFdmVudChldmVudCkge1xuICAgIGlmIChldmVudC50eXBlID09ICdkcm9wJykge1xuICAgICAgdGhpcy5vbkRyb3AoZXZlbnQpO1xuICAgIH1cbiAgICBlbHNlIGlmIChldmVudC50eXBlID09ICdkcmFnb3ZlcicpIHtcbiAgICAgIHRoaXMub25EcmFnT3ZlcihldmVudCk7XG4gICAgfVxuICAgIGVsc2UgaWYgKGV2ZW50LnR5cGUgPT0gJ2RyYWdlbnRlcicpIHtcbiAgICAgIHRoaXMub25EcmFnRW50ZXIoZXZlbnQpO1xuICAgIH1cbiAgfVxuXG4gIGluaXRFdmVudExpc3RlbmVycygpIHtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignZHJvcCcsIHRoaXMsIGZhbHNlKTtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignZHJhZ2VudGVyJywgdGhpcywgZmFsc2UpO1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdkcmFnb3ZlcicsIHRoaXMsIGZhbHNlKTtcbiAgfVxufVxuXG53aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsICgpID0+IHtcbiAgbGV0IGFwcCA9IG5ldyBBcHAoKTtcbn0pO1xuIiwiXG5jbGFzcyBCaXRTdHJlYW0ge1xuICBjb25zdHJ1Y3RvcihzdHJlYW0pIHtcbiAgICB0aGlzLnN0cmVhbSA9IHN0cmVhbTtcbiAgICB0aGlzLm9mZnNldCA9IDA7XG4gICAgdGhpcy5iaXQgPSAxO1xuICAgIHRoaXMuYnl0ZSA9IHRoaXMuc3RyZWFtLmdldFVpbnQ4KCk7XG4gICAgdGhpcy5zdHJlYW0uYmFja3VwKCk7XG4gIH1cblxuICBuZXh0KCkge1xuICAgIHRoaXMuYnl0ZSA9IHRoaXMuc3RyZWFtLmdldFVpbnQ4KCk7XG4gICAgdGhpcy5vZmZzZXQrKztcbiAgICB0aGlzLmJpdCA9IDE7XG4gIH1cblxuICByZWFkKGxlbmd0aCkge1xuICAgIGlmIChsZW5ndGgpIHtcbiAgICAgIGxldCBsaW1pdCA9IE1hdGgucG93KDIsIGxlbmd0aCAtIDEpO1xuICAgICAgbGV0IHZhbHVlID0gMDtcbiAgICAgIGxldCBiaXQgPSAxO1xuICAgICAgd2hpbGUgKGJpdCA8PSBsaW1pdCkge1xuICAgICAgICB2YWx1ZSA9ICh0aGlzLnJlYWQoKSA/IHZhbHVlIHwgYml0IDogdmFsdWUpO1xuICAgICAgICBiaXQgPSBiaXQgPDwgMTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICBsZXQgdmFsdWUgPSAodGhpcy5ieXRlICYgdGhpcy5iaXQgPyAxIDogMCk7XG4gICAgICBpZiAodGhpcy5iaXQgPT0gMTI4KSB7XG4gICAgICAgIHRoaXMubmV4dCgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5iaXQgPSB0aGlzLmJpdCA8PCAxO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEJpdFN0cmVhbTtcbiIsIlxuY2xhc3MgQml0bWFwIHtcbiAgY29uc3RydWN0b3IocGFyYW1zKSB7XG4gICAgdGhpcy53aWR0aCA9IHBhcmFtcy53aWR0aDtcbiAgICB0aGlzLmhlaWdodCA9IHBhcmFtcy5oZWlnaHQ7XG4gICAgdGhpcy5waXhlbHMgPSBwYXJhbXMucGl4ZWxzO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gQml0bWFwO1xuIiwiXG5jbGFzcyBCdWZmZXJTdHJlYW0ge1xuICBjb25zdHJ1Y3RvcihidWZmZXIpIHtcbiAgICB0aGlzLmJ1ZmZlciA9IGJ1ZmZlcjtcbiAgICB0aGlzLnZpZXcgPSBuZXcgRGF0YVZpZXcodGhpcy5idWZmZXIpO1xuICAgIHRoaXMub2Zmc2V0ID0gMDtcbiAgfVxuXG4gIGdldCBsZW5ndGgoKSB7XG4gICAgcmV0dXJuIHRoaXMuYnVmZmVyLmJ5dGVMZW5ndGg7XG4gIH1cblxuICBzZWVrKG9mZnNldD0wKSB7XG4gICAgdGhpcy5vZmZzZXQgPSBvZmZzZXQ7XG4gIH1cbiAgXG4gIGJhY2t1cCgpIHtcbiAgICBpZiAodGhpcy5vZmZzZXQgPiAwKVxuICAgICAgdGhpcy5vZmZzZXQtLTtcbiAgfVxuXG4gIGdldFVpbnQ4KG9mZnNldCkge1xuICAgIGlmIChvZmZzZXQgPT0gdW5kZWZpbmVkKSB7XG4gICAgICBvZmZzZXQgPSB0aGlzLm9mZnNldDtcbiAgICAgIHRoaXMub2Zmc2V0Kys7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnZpZXcuZ2V0VWludDgob2Zmc2V0KTtcbiAgfVxuXG4gIGdldFVpbnQxNihvZmZzZXQsIGxpdHRsZUVuZGlhbj1mYWxzZSkge1xuICAgIGlmIChvZmZzZXQgPT0gdW5kZWZpbmVkKSB7XG4gICAgICBvZmZzZXQgPSB0aGlzLm9mZnNldDtcbiAgICAgIHRoaXMub2Zmc2V0ICs9IDI7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnZpZXcuZ2V0VWludDE2KG9mZnNldCwgbGl0dGxlRW5kaWFuKTtcbiAgfVxuXG4gIGdldFVpbnQzMihvZmZzZXQsIGxpdHRsZUVuZGlhbj1mYWxzZSkge1xuICAgIGlmIChvZmZzZXQgPT0gdW5kZWZpbmVkKSB7XG4gICAgICBvZmZzZXQgPSB0aGlzLm9mZnNldDtcbiAgICAgIHRoaXMub2Zmc2V0ICs9IDQ7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnZpZXcuZ2V0VWludDMyKG9mZnNldCwgbGl0dGxlRW5kaWFuKTtcbiAgfVxuXG4gIGdldFVpbnQxNkxFKG9mZnNldCkge1xuICAgIHJldHVybiB0aGlzLmdldFVpbnQxNihvZmZzZXQsIHRydWUpO1xuICB9XG5cbiAgZ2V0VWludDMyTEUob2Zmc2V0KSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0VWludDMyKG9mZnNldCwgdHJ1ZSk7XG4gIH1cblxuICBnZXRCeXRlcyhsZW5ndGg9MSwgb2Zmc2V0KSB7XG4gICAgaWYgKG9mZnNldCA9PSB1bmRlZmluZWQpIHtcbiAgICAgIG9mZnNldCA9IHRoaXMub2Zmc2V0O1xuICAgICAgdGhpcy5vZmZzZXQgKz0gbGVuZ3RoO1xuICAgIH1cbiAgICBsZXQgYnl0ZXMgPSBuZXcgVWludDhBcnJheShsZW5ndGgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIGJ5dGVzW2ldID0gdGhpcy52aWV3LmdldFVpbnQ4KG9mZnNldCArIGkpOyAvL3RoaXMuZ2V0VWludDgob2Zmc2V0ICsgaSk7XG4gICAgfVxuICAgIHJldHVybiBieXRlcztcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEJ1ZmZlclN0cmVhbTtcbiIsImNvbnN0IEJpdG1hcCA9IHJlcXVpcmUoJy4vYml0bWFwJyk7XG5cbmNsYXNzIFJvb20ge1xuICBjb25zdHJ1Y3RvcihwYXJhbXMpIHtcbiAgICB0aGlzLndpZHRoID0gcGFyYW1zLndpZHRoO1xuICAgIHRoaXMuaGVpZ2h0ID0gcGFyYW1zLmhlaWdodDtcbiAgICB0aGlzLm51bU9iamVjdHMgPSBwYXJhbXMubnVtT2JqZWN0cztcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFJvb207XG4iLCJcbmNsYXNzIFNjdW1tIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgXG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBTY3VtbTtcbiJdfQ=="}